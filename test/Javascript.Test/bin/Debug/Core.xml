<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Py.Windows.Ime">
            <summary> 
            输入法辅助类。
            </summary> 
        </member>
        <member name="M:Py.Windows.Ime.Activate(System.String)">
            <summary>
            设定当前Ime 。 
            </summary>
            <param name="ImeName">设置的输入法的名称。  如 "中文(简体) - 美式键盘"</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">输入法未安装。</exception>
        </member>
        <member name="M:Py.Windows.Ime.Close">
            <summary>
            关闭输入法。
            </summary>
        </member>
        <member name="M:Py.Windows.Ime.GetIme(System.Int32)">
            <summary>
            获取指定线程的输入法模式。
            </summary>
            <param name="threadId">线程。</param>
            <returns>输入法的名。</returns>
        </member>
        <member name="M:Py.Windows.Ime.Activate(System.UInt32)">
            <summary>
            设定当前Ime 。
            </summary>
            <param name="ImeId">设置的输入法序列。 </param>
        </member>
        <member name="M:Py.Windows.Ime.NotTellShell(System.String)">
            <summary>
            当装入新的键盘布局时，禁止一个ShellProe过程接收一个HSHELL_LANGUAGE代码。
            </summary>
            <param name="ImeName">设置的输入法名字。</param>
        </member>
        <member name="M:Py.Windows.Ime.#cctor">
            <summary>
            初始化 <see cref="T:Py.Windows.Ime"/> 的静态成员。
            </summary>
            <exception cref="T:System.NotSupportedException">不支持。</exception>
        </member>
        <member name="P:Py.Windows.Ime.IsClose">
            <summary>
            获取一个值，指示当前输入法是否为打开。
            </summary>
        </member>
        <member name="P:Py.Windows.Ime.Current">
            <summary>
            获取或设置当前激活的 ime ， 如 ime 为关闭，则返回 null 。
            </summary>
        </member>
        <member name="P:Py.Windows.Ime.Imes">
            <summary>
            返回安装的所有的 Ime 列表。
            </summary>
        </member>
        <member name="T:Py.Windows.WindowState">
            <summary>
            所有窗口显示的状态枚举。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Hide">
            <summary>
            窗口隐藏。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Normal">
            <summary>
            正常。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ShowMinimized">
            <summary>
            窗口最小化。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ShowMaximized">
            <summary>
            窗口最大化。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.NoActivate">
            <summary>
            不激活。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Show">
            <summary>
            显示。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Minimized">
            <summary>
            窗口最小化。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Maximized">
            <summary>
            窗口最大化。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ShowMinNoActive">
            <summary>
            除了未激活的，最小化窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ShowNa">
            <summary>
            显示在当前位置。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ReStore">
            <summary>
            窗口成还原。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.Default">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowState.ForceMinimize">
            <summary>
            强制最小化。仅在不同线程使用。
            </summary>
        </member>
        <member name="T:Py.Windows.RDW">
            <summary>
            表示 RedrawWindow 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.AllChildren">
            <summary>
            重画操作包括子窗口（前提是它们存在于重画区域） 。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.Erase">
            <summary>
            重画前，先清除重画区域的背景。也必须指定RDW.Invalidate   。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.EraseNow">
            <summary>
            立即删除指定的重画区域。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.FRAME">
            <summary>
            如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW.Invalidate 。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.InternalPaint">
            <summary>
            即使窗口并非无效，也向其投递一条WM_PAINT消息 。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.Invalidate">
            <summary>
            禁用（屏蔽）重画区域。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.NoChildren">
            <summary>
            重画操作排除子窗口（前提是它们存在于重画区域）。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.NoErase">
            <summary>
            禁止删除重画区域的背景。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.NoFrame">
            <summary>
            禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW.Validate 。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.NoInternalPaint">
            <summary>
            禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.UpdateNow">
            <summary>
            立即更新指定的重画区域。
            </summary>
        </member>
        <member name="F:Py.Windows.RDW.Validate">
            <summary>
            检验重画区域。
            </summary>
        </member>
        <member name="T:Py.Windows.SWP">
            <summary>
            表示 SetWindowPos 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.AsncWindowPos">
            <summary>
            如果调用进程不拥有窗口，系统会向拥有窗口的线程发出需求。这就防止调用线程在其他线程处理需求的时候发生死锁。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.DeferErase">
            <summary>
            防止产生WM_SYNCPAINT消息。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.DrawFrame">
            <summary>
            在窗口周围画一个边框（定义在窗口类描述中）。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.FrameChanged">
            <summary>
            给窗口发送WM_NCCALCSIZE消息，即使窗口尺寸没有改变也会发送该消息。如果未指定这个标志，只有在改变了窗口尺寸时才发送WM_NCCALCSIZE。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.HideWindow">
            <summary>
            隐藏窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoActivate">
            <summary>
            不激活窗口。如果未设置标志，则窗口被激活，并被设置到其他最高级窗口或非最高级组的顶部（根据参数hWndlnsertAfter设置）。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoCopyBits">
            <summary>
            清除客户区的所有内容。如果未设置该标志，客户区的有效内容被保存并且在窗口尺寸更新和重定位后拷贝回客户区。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoMove">
            <summary>
            维持当前位置（忽略X和Y参数）。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoOwnerZOrder">
            <summary>
            不改变z序中的所有者窗口的位置。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoRedraw">
            <summary>
            不重画改变的内容。如果设置了这个标志，则不发生任何重画动作。适用于客户区和非客户区（包括标题栏和滚动条）和任何由于窗回移动而露出的父窗口的所有部分。如果设置了这个标志，应用程序必须明确地使窗口无效并区重画窗口的任何部分和父窗口需要重画的部分。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoReposition">
            <summary>
            不改变z序中的所有者窗口的位置。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoSendChanging">
            <summary>
            防止窗口接收WM_WINDOWPOSCHANGING消息。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoSize">
            <summary>
            维持当前尺寸（忽略cx和Cy参数）。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.NoZorder">
            <summary>
            维持当前Z序（忽略hWndlnsertAfter参数）。
            </summary>
        </member>
        <member name="F:Py.Windows.SWP.ShowWindow">
            <summary>
            显示窗口。
            </summary>
        </member>
        <member name="T:Py.Windows.SendAsyncProc">
            <summary>
            发送消息的回调委托。
            </summary>
            <param name="hwnd">指定被发送的消息。</param>
            <param name="uMsg">发送信息的数据。</param>
            <param name="dwData">发送信息的数据。</param>
            <param name="lResult">发送信息处理结果。</param>
        </member>
        <member name="T:Py.Windows.EnumWindowsCallback">
            <summary>
            枚举窗口用的委托。
            </summary>
            <param name="hWnd">枚举的窗口句柄。</param>
            <param name="lParam">内容。</param>
            <returns>是否还有下一个窗口。</returns>
        </member>
        <member name="T:Py.Windows.SMTO">
            <summary>
            表示 SendMessageTImeout 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.SMTO.AbortIfHung">
            <summary>
            如果接收进程处于“hung”状态，不等待超时周期结束就返回。
            </summary>
        </member>
        <member name="F:Py.Windows.SMTO.Block">
            <summary>
            阻止调用线程处理其他任何请求，直到函数返回。
            </summary>
        </member>
        <member name="F:Py.Windows.SMTO.Normal">
            <summary>
            调用线程等待函数返回时，不被阻止处理其他请求。
            </summary>
        </member>
        <member name="F:Py.Windows.SMTO.NotIMEOutIfNotHung">
            <summary>
            如果接收线程没被挂起，当超时周期结束时不返回。
            </summary>
        </member>
        <member name="T:Py.Windows.DT">
            <summary>
            表示 DrawText 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.AcceptDBCS">
            <summary>
            接受双字节。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Bottom">
            <summary>
            将正文调整到矩形底部。此值必须和DT_SINGLELINE组合。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.CalCrect">
            <summary>
            决定矩形的宽和高。 　　如果正文有多行，DrawText使用lpRect定义的矩形的宽度，并扩展矩形的底部以容纳正文的最后一行。 　　如果正文只有一行，则DrawText改变矩形的右边界，以容纳下正文行的最后一个字符。 　　出现上述任何一种情况，DrawText返回格式化正文的高度，而不是绘制正文。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Center">
            <summary>
            使正文在矩形中水平居中。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Vcenter">
            <summary>
            使正文在矩形中垂直居中。 　　(DreamSmart注:此参数必须和DT_SINGLE连用,否则GDI无法计算目的矩形) 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.EditControl">
            <summary>
            复制多行编辑控制的正文显示特性。 　　特殊地，为编辑控制的平均字符宽度是以同样的方法计算的，此函数不显示只是部分可见的最后一行。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.EndEllipsis">
            <summary>
            对于显示的文本，如果结束的字符串的范围不在矩形内，它会被截断并被附加到椭圆中。 　　如果一个字母不是在字符串的末尾处超出了矩形范围，它不会被椭圆截断。 　　字符串不会被修改，除非指定了DT_MODIFYSTRING标志。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.ExpandTabs">
            <summary>
            扩展制表符，每个制表符的缺省字符数是8。 　　DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS和DT_END_ELLIPSIS不能和此参数一起使用 。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.ExternalLeading">
            <summary>
            在行的高度里包含字体的外部标头，通常，外部标头不被包含在正文行的高度里。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.HidePrefix">
            <summary>
            忽略正文中的前缀字符（&amp;），并且前缀字符后面的字母不会出现下划线。其它前缀字符的调用方式不受影响。 　　输入的字符串: "A&amp;bc&amp;&amp;d" 　　正常:  "Abc&amp;d" 　DT_HIDEPREFIX  :  "Abc&amp;d"   。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Internal">
            <summary>
            用系统字体来计算正文度量。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Left">
            <summary>
            用正文左对齐。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.ModifyString">
            <summary>
            修改给定的字符串来匹配显示的正文。 此标志必须和DT_END_ELLIPSIS 或 DT_PATH_ELLIPSIS同时使用。　
            </summary>
        </member>
        <member name="F:Py.Windows.DT.NoClip">
            <summary>
            无裁剪绘制。当DT_NOCLIP使用时DrawText的使用会有所加快。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.NoFullWidthCharBreak">
            <summary>
            在宽字符的字符串中防止行断开，因此折行规则相当于单字符的字符串。 　　例如，我们可以用在棒子版的windows中，为图标标签提供更好的可读性。 　　除非指定DT_WORDBREAK，否则此值没有作用。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.NoPrefix">
            <summary>
            关闭前缀字符的处理。 　　通常DrawText解释助记前缀字符，&amp;为给其后的字符加下划线，解释&amp;&amp;为显示单个&amp;  。指定DT_NOPREFIX，这种处理被关闭。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.PathEllipsis">
            <summary>
            对于显示的正文，替换字符串在椭圆中的字符，以确保结果能在合适的矩形内。 　　如果该字符串包含反斜杠（\）字符，DT_PATH_ELLIPSIS尽可能的保留最后一个反斜杠之后的正文。 　　字符串不会被修改，除非指定了DT_MODIFYSTRING标志。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.PrefixOnly">
            <summary>
            仅仅在(&amp;)前缀字符的位置下绘制一个下划线。不绘制字符串中的任何其他字符。 　　输入的字符串: "A&amp;bc&amp;&amp;d" 　　正常: "Abc&amp;d" 　　DT_PREFIXONLY:" _   " 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Right">
            <summary>
            正文右对齐。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.RtlReading">
            <summary>
            当选择进设备环境的字体是希伯来文或阿拉伯文字体时，为双向正文安排从右到左的阅读顺序都是从左到右的。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.SingleLine">
            <summary>
            显示正文的同一行，回车和换行符都不能折行。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Tabstop">
            <summary>
            设置制表，参数uFormat的15"C8位（低位字中的高位字节）指定每个制表符的字符数，每个制表符的缺省字符数是8。 　　注意：DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, 　　DT_NOCLIP, DT_NOPREFIX值不能和DT_TABSTOP值一起使用。
            </summary>
        </member>
        <member name="F:Py.Windows.DT.Top">
            <summary>
            正文顶端对齐（仅对单行）。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.WordBreak">
            <summary>
            断开字。当一行中的字符将会延伸到由lpRect指定的矩形的边框时，此行自动地在字之间断开。一个回车一换行也能使行折断。 
            </summary>
        </member>
        <member name="F:Py.Windows.DT.WordEllipsis">
            <summary>
            截短不符合矩形的正文，并增加椭圆。
            </summary>
        </member>
        <member name="T:Py.Windows.PM">
            <summary>
            表示 PeekMessage 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.PM.NoRemove">
            <summary>
            PeekMessage处理后，消息不从队列里除掉。
            </summary>
        </member>
        <member name="F:Py.Windows.PM.Remove">
            <summary>
            PeekMessage处理后，消息从队列里除掉。
            </summary>
        </member>
        <member name="F:Py.Windows.PM.NoYield">
            <summary>
            未实现。
            </summary>
        </member>
        <member name="T:Py.Windows.BlendFunction">
            <summary>
            控制源和目标位图的混合功能的结构。
            </summary>
        </member>
        <member name="F:Py.Windows.BlendFunction.BlendOp">
            <summary>
            指定源混合操作。
            </summary>
        </member>
        <member name="F:Py.Windows.BlendFunction.BlendFlags">
            <summary>
            混合记号， 必须为 0。
            </summary>
        </member>
        <member name="F:Py.Windows.BlendFunction.SourceConstantAlpha">
            <summary>
            指定一个alpha透明度值将用于整个源位图;该SourceConstantAlpha值与任何在源位图的每个像素的alpha值组合;如果设置为0，就会假定你的图片是透明的;如果需要使用每像素alpha值，设置SourceConstantAlpha值255 。
            </summary>
        </member>
        <member name="F:Py.Windows.BlendFunction.AlphaFormat">
            <summary>
            AC_SRC_ALPHA 这个标志被设置当那位图有Alpha通道。
            </summary>
        </member>
        <member name="M:Py.Windows.BlendFunction.#ctor(System.Byte)">
            <summary>
            初始化 <see cref="T:Py.Windows.BlendFunction"/> 的新实例。
            </summary>
            <param name="sourceConstantAlpha">透明。</param>
        </member>
        <member name="T:Py.Windows.AlphaFlags">
            <summary>
            滤镜标记。
            </summary>
        </member>
        <member name="F:Py.Windows.AlphaFlags.SrcOver">
            <summary>
            全部。
            </summary>
        </member>
        <member name="F:Py.Windows.AlphaFlags.SrcAlpha">
            <summary>
            通道。
            </summary>
        </member>
        <member name="T:Py.Windows.ULW">
            <summary>
            表示 UpdateLayeredWindowsFlags 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.ULW.ColorKey">
            <summary>
            彩色。
            </summary>
        </member>
        <member name="F:Py.Windows.ULW.Alpha">
            <summary>
            通道。
            </summary>
        </member>
        <member name="F:Py.Windows.ULW.Opaque">
            <summary>
            混淆。
            </summary>
        </member>
        <member name="T:Py.Windows.TrackMouseEvents">
            <summary>
            表示鼠标悬停的信息。
            </summary>
        </member>
        <member name="F:Py.Windows.TrackMouseEvents.Size">
            <summary>
            悬停的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.TrackMouseEvents.Flags">
            <summary>
            悬停标记。
            </summary>
        </member>
        <member name="F:Py.Windows.TrackMouseEvents.Track">
            <summary>
            发送悬停的窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.TrackMouseEvents.HoverTime">
            <summary>
            悬停时间。
            </summary>
        </member>
        <member name="T:Py.Windows.TME">
            <summary>
            表示 TrackMouseEvents 内部记号。
            </summary>
        </member>
        <member name="F:Py.Windows.TME.Cancel">
            <summary>
            取消。
            </summary>
        </member>
        <member name="F:Py.Windows.TME.Hover">
            <summary>
            悬停。
            </summary>
        </member>
        <member name="F:Py.Windows.TME.Leave">
            <summary>
            离开。
            </summary>
        </member>
        <member name="F:Py.Windows.TME.NonClient">
            <summary>
            不在屏幕上。
            </summary>
        </member>
        <member name="F:Py.Windows.TME.Query">
            <summary>
            正在查询。
            </summary>
        </member>
        <member name="T:Py.Windows.DCX">
            <summary>
            表示 GetDCEx 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.Cache">
            <summary>
            不管窗口类的样式，从windows缓存获取设备场景。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.ClipChildren">
            <summary>
            所有可见的子窗口区都要从DC的剪裁区中排除。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.ClipSiblings">
            <summary>
            窗口hWnd上的所有可见兄弟窗口都要从DC的剪裁区中排除。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.EcludeRgn">
            <summary>
            从DC剪裁区中排除由hrgnclip指定的区域。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.ExcludeUpdate">
            <summary>
            从设备场景剪裁区中排除刷新区域
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.IntersectRgn">
            <summary>
            由hrgnclip指定的区域与设备场景剪裁区相交
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.IntersectUpdate">
            <summary>
            指定区域与设备场景刷新区域相交
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.LockWindowUpdate">
            <summary>
            该标志为允许向窗口绘图，即使它由于LockWindowUpdate的调用被锁住
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.NoRecomput">
            <summary>
            不计算。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.NoResetAttrs">
            <summary>
            设备场景释放后不被重置为默认状态。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.ParentClip">
            <summary>
            放弃CS_PARENTDC类样式设置。DC的起点设为hWnd窗口的左上角
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.Validate">
            <summary>
            剪切区域。
            </summary>
        </member>
        <member name="F:Py.Windows.DCX.Window">
            <summary>
            返回窗口边距。
            </summary>
        </member>
        <member name="T:Py.Windows.SM">
            <summary>
            表示 GetSystemMetrics 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CleanBoot">
            <summary>
            指定启动模式。0=普通模式；1=带网络支持的安全模式 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CMetrics">
            <summary>
            可用系统环境的数量。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CMouseButton">
            <summary>
            鼠标按钮（按键）的数量。如没有鼠标，就为零。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxBorder">
            <summary>
            尺寸不可变边框的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyBorder">
            <summary>
            尺寸不可变边框的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxCursor">
            <summary>
            标准指针大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyCursor">
            <summary>
            标准指针大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxDlgFrame">
            <summary>
            对话框边框的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyDlgFrame">
            <summary>
            对话框边框的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxDoubleClk">
            <summary>
            双击区域的大小（参考注解）。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyDoubleClk">
            <summary>
            双击区域的大小（参考注解）。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxDrag">
            <summary>
            移动大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyDrag">
            <summary>
            移动大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxEdge">
            <summary>
            编辑大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyEdge">
            <summary>
            编辑大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxFrame">
            <summary>
            尺寸可变边框的大小（在win95和nt 4.0中使用C?FIXEDFRAME） 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyFrame">
            <summary>
            尺寸可变边框的大小（在win95和nt 4.0中使用C?FIXEDFRAME） 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxFullscreen">
            <summary>
            最大化窗口客户区的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyFullscreen">
            <summary>
            最大化窗口客户区的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxHScroll">
            <summary>
            水平滚动条上的箭头大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyHScroll">
            <summary>
            水平滚动条上的箭头大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxHThumb">
            <summary>
            滚动块在水平滚动条上的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyVThumb">
            <summary>
            滚动块在水平滚动条上的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxIcon">
            <summary>
            标准图标的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyIcon">
            <summary>
            标准图标的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxIconSpacing">
            <summary>
            桌面图标之间的间隔距离。在win95和nt 4.0中是指大图标的间距。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyIconSpacing">
            <summary>
            桌面图标之间的间隔距离。在win95和nt 4.0中是指大图标的间距。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMaximized">
            <summary>
            最大化窗口的默认尺寸。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMaximized">
            <summary>
            最大化窗口的默认尺寸。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMaxTrack">
            <summary>
            改变窗口大小时，最大的轨迹宽度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMaxTrack">
            <summary>
            改变窗口大小时，最大的轨迹宽度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMenuCheck">
            <summary>
            菜单复选号位图的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMenuCheck">
            <summary>
            菜单复选号位图的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMenuSize">
            <summary>
            菜单栏上的按钮大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMenuSize">
            <summary>
            菜单栏上的按钮大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMin">
            <summary>
            窗口的最小尺寸。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMin">
            <summary>
            窗口的最小尺寸。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMinimized">
            <summary>
            最小化的窗口必须填充进去的一个矩形小于或等于SM_C?ICONSPACING 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMinimized">
            <summary>
            最小化的窗口必须填充进去的一个矩形小于或等于SM_C?ICONSPACING 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMinSpacing">
            <summary>
            最小的间隔。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMinSpacing">
            <summary>
            最小的间隔。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxMinTrack">
            <summary>
            窗口的最小轨迹宽度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMinTrack">
            <summary>
            窗口的最小轨迹宽度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxScreen">
            <summary>
            屏幕大小
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyScreen">
            <summary>
            屏幕大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxSize">
            <summary>
            标题栏位图的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CySize">
            <summary>
            标题栏位图的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxSizeFrame">
            <summary>
            具有WS_THICKFRAME样式的窗口的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CySizeFrame">
            <summary>
            具有WS_THICKFRAME样式的窗口的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxSmIcon">
            <summary>
            小图标的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CySmIcon">
            <summary>
            小标题按钮的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxSmSize">
            <summary>
            小标题按钮的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CySmSize">
            <summary>
            小标题按钮的大小。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.XVirtualScreen">
            <summary>
            虚拟的屏幕。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.YVirtualScreen">
            <summary>
            虚拟的屏幕。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxVirtualScreen">
            <summary>
            虚拟的屏幕。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyVirtualScreen">
            <summary>
            虚拟的屏幕。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CxVscroll">
            <summary>
            垂直滚动条中的箭头按钮的大小 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyVscroll">
            <summary>
            垂直滚动条中的箭头按钮的大小 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyCaption">
            <summary>
            窗口标题的高度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyKanjiWindow">
            <summary>
            Kanji窗口的大小（Height of Kanji window）。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CyMenu">
            <summary>
            菜单高度。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.CySmCaption">
            <summary>
            小标题的高度 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.DbcsEnabled">
            <summary>
            如支持双字节则为TRUE 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.Debug">
            <summary>
            如windows的调试版正在运行，则为TRUE 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.MenuDropAlignment">
            <summary>
            如弹出式菜单对齐菜单栏项目的左侧，则为零 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.MideastEnabled">
            <summary>
            允许了希伯来和阿拉伯语 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.MousePresent">
            <summary>
            如安装了鼠标则为TRUE 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.MouseWheelPresent">
            <summary>
            如安装了带轮鼠标则为TRUE；只适用于nt 4.0 。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.Network">
            <summary>
            如安装了网络，则设置位0。其他位保留未用。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.PenWindows">
            <summary>
            如装载了支持笔窗口的DLL，则表示笔窗口的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.Secure">
            <summary>
            如安装了安全（保密）机制，则为TRUE。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.ShowSounds">
            <summary>
            强制视觉提示播放声音。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.SlowMachine">
            <summary>
            系统速度太慢，但仍在运行中。
            </summary>
        </member>
        <member name="F:Py.Windows.SM.SwapButton">
            <summary>
            如左右鼠标键已经交换，则为TRUE 。
            </summary>
        </member>
        <member name="T:Py.Windows.SW">
            <summary>
            表示 ScrollWindowEx 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.SW.Invalidate">
            <summary>
            在滚动后，使得由参数hrgnUpdate标识的无效区域被擦除。
            </summary>
        </member>
        <member name="F:Py.Windows.SW.ScrollChildren">
            <summary>
            动所有由参数prcScroll指出交叉重叠矩形的子窗体。子窗体按照dx和dy规定的像素个数滚动。系统发送。
            </summary>
        </member>
        <member name="F:Py.Windows.SW.SmootHScroll">
            <summary>
            消息给所有由prcScroll指出交叉重叠矩形的子窗体，即使他们不移动。
            </summary>
        </member>
        <member name="F:Py.Windows.SW.Hide">
            <summary>
            隐藏。
            </summary>
        </member>
        <member name="F:Py.Windows.SW.Normal">
            <summary>
            正常。
            </summary>
        </member>
        <member name="T:Py.Windows.SB">
            <summary>
            表示 ShowScrollBar 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.SB.Both">
            <summary>
            显示或隐藏窗体的标准的水平或垂直滚动条。
            </summary>
        </member>
        <member name="F:Py.Windows.SB.Ctl">
            <summary>
            显示或隐藏窗体的标准的水平或垂直滚动条。
            </summary>
        </member>
        <member name="F:Py.Windows.SB.Horz">
            <summary>
            显示或隐藏窗体的标准的水平滚动条。
            </summary>
        </member>
        <member name="F:Py.Windows.SB.Vert">
            <summary>
            显示或隐藏窗体的标准的水平滚动条。
            </summary>
        </member>
        <member name="T:Py.Windows.AW">
            <summary>
            表示 AnimateWindow 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.Slide">
            <summary>
            使用滑动类型。缺省则为滚动动画类型。当使用CENTER标志时，这个标志就被忽略。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.Active">
            <summary>
            激活窗口。在使用了HIDE标志后不要使用这个标志。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.Blend">
            <summary>
            使用淡出效果。只有当hWnd为顶层窗口的时候才可以使用此标志。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.Hide">
            <summary>
            隐藏窗口，缺省则显示窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.Center">
            <summary>
            若使用了HIDE标志，则使窗口向内重叠；若未使用HIDE标志，则使窗口向外扩展。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.HorNegative">
            <summary>
            自右向左显示窗口。该标志可以在滚动动画和滑动动画中使用。当使用CENTER标志时，该标志将被忽略。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.HorPositive">
            <summary>
            自左向右显示窗口。该标志可以在滚动动画和滑动动画中使用。当使用CENTER标志时，该标志将被忽略。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.VerPositive">
            <summary>
            自顶向下显示窗口。该标志可以在滚动动画和滑动动画中使用。当使用CENTER标志时，该标志将被忽略。
            </summary>
        </member>
        <member name="F:Py.Windows.AW.VerNegative">
            <summary>
            自下向上显示窗口。该标志可以在滚动动画和滑动动画中使用。当使用CENTER标志时，该标志将被忽略。
            </summary>
        </member>
        <member name="T:Py.Windows.GW">
            <summary>
            表示 GetNextWindow 的记号。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.Child">
            <summary>
            子窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.EnablePopup">
            <summary>
            允许弹出窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.HwndFirst">
            <summary>
            第一个窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.HwndLast">
            <summary>
            最后一个窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.HwndNext">
            <summary>
            下个窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.HwndPrev">
            <summary>
            上个窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.Max">
            <summary>
            最大的窗口。
            </summary>
        </member>
        <member name="F:Py.Windows.GW.Owner">
            <summary>
            所有者。
            </summary>
        </member>
        <member name="T:Py.Windows.WindowsHook">
            <summary>
            表示 Hook 类型。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.CallWndproc">
            <summary>
            窗口钩子，当系统向目标窗口发送消息时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.CallWndprocRef">
            <summary>
            窗口钩子，当窗口处理完消息后将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Cbt">
            <summary>
            当Windows激活、产生、释放（关闭）、最小化、最大化或改变窗口时都将触发此事件。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Debug">
            <summary>
            调试钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.ForegroundIdle">
            <summary>
            前景修改。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.GetMessage">
            <summary>
            当往消息队列中增加一个消息时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Hardware">
            <summary>
            硬件修改。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.JournalPlayback">
            <summary>
            回放钩子，可以用于播放已记录的鼠标和键盘的操作 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.JournalRecord">
            <summary>
            记录钩子，可以用于记录鼠标和键盘的操作，木马程序可以使用此钩子窃取受控方在屏幕中敲入的密码 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Keyboard">
            <summary>
            当敲击键盘时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.KeyboardLL">
            <summary>
            当敲击键盘时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Mouse">
            <summary>
            当有鼠标操作时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.MouseLL">
            <summary>
            当有鼠标操作时将触发此钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.MsgFiter">
            <summary>
            消息过滤钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.Shell">
            <summary>
            Shell钩子 。
            </summary>
        </member>
        <member name="F:Py.Windows.WindowsHook.SysMsgFilter">
            <summary>
            系统消息过滤钩子。
            </summary>
        </member>
        <member name="T:Py.Windows.MouseEventFlag">
            <summary>
            表示 mouse_event 的标记。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.Move">
            <summary>
            发生移动。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.LeftDown">
            <summary>
            按下鼠标左键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.LeftUp">
            <summary>
            松开鼠标左键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.RightDown">
            <summary>
            按下鼠标右键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.RightUp">
            <summary>
            松开鼠标右键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.MiddleDown">
            <summary>
            按下鼠标中键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.MiddleUp">
            <summary>
            松开鼠标中键。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.XDown">
            <summary>
            X Button 。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.XUp">
            <summary>
            X Button 。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.Wheel">
            <summary>
            鼠标轮被移动。移动的数量由dwData给出。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.VirtualDesk">
            <summary>
            虚拟的桌面。
            </summary>
        </member>
        <member name="F:Py.Windows.MouseEventFlag.Absolute">
            <summary>
            指示坐标为绝对位置。
            </summary>
        </member>
        <member name="T:Py.Windows.HookCode">
            <summary>
            一个 HookCode 的枚举。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.Canceled">
            <summary>
            已撤销。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.Action">
            <summary>
            动作。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.GetNext">
            <summary>
            下一个 Hook 。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.NoRemove">
            <summary>
            不移除。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.Skip">
            <summary>
            跳过。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.SysModalOff">
            <summary>
            系统模型关闭。
            </summary>
        </member>
        <member name="F:Py.Windows.HookCode.SysModalOn">
            <summary>
            系统模型打开。
            </summary>
        </member>
        <member name="T:Py.Windows.Modifiers">
            <summary>
            表示键修饰键。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.None">
            <summary>
            无修饰。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.Alt">
            <summary>
             Alt 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.Ctrl">
            <summary>
             Ctrl 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.Shift">
            <summary>
             Shift 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.Win">
            <summary>
             Win 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.AltShift">
            <summary>
            Alt， Shift 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.CtrlShift">
            <summary>
            Ctrl， Shift 。
            </summary>
        </member>
        <member name="F:Py.Windows.Modifiers.AltCtrlShift">
            <summary>
            Alt , Ctrl， Shift 。
            </summary>
        </member>
        <member name="T:Py.Windows.RunMethod">
            <summary>
            启动方式。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.Load">
            <summary>
            载入项。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.Userinit">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.Run">
            <summary>
            启动。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.RunOnce">
            <summary>
            启动只有一次。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.RunOnceUser">
            <summary>
            用户启动。只有一次。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.RunUser">
            <summary>
            用户启动。
            </summary>
        </member>
        <member name="F:Py.Windows.RunMethod.Startup">
            <summary>
            启动文件夹。
            </summary>
        </member>
        <member name="T:Py.Windows.GCL">
            <summary>
            一个 GetClassLong 的枚举。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.CbClsExtra">
            <summary>
            扩展窗体风格。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.HbrBackground">
            <summary>
            获得与类有关的背景刷子的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.CbWndExtra">
            <summary>
            获得与类中的每个窗口相关的额外窗口中内存空间的字节大小，进入该存储空间的方法请参看GetWindwoLong。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.Conversion">
            <summary>
            转换。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.HCursor">
            <summary>
            获得与类有关的光标的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.HIcon">
            <summary>
            获得与类有关的图标的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.HIconSm">
            <summary>
            获得与类有关的小图标的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.HMoudle">
            <summary>
            获得注册该类的模块的句柄。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.MenuName">
            <summary>
            获得菜单名字符串的地址，该字符串标识了与类有关的菜单资源。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.ReverseLength">
            <summary>
            保留。长度。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.ReverseConversion">
            <summary>
            保留。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.Style">
            <summary>
            获得窗口类的风格位。
            </summary>
        </member>
        <member name="F:Py.Windows.GCL.WndProc">
            <summary>
            获得与类有关的窗口过程的地址。
            </summary>
        </member>
        <member name="T:Py.Windows.GetFileInfoFlags">
            <summary>
            定义获取资源标识。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.Icon">
            <summary>
            获取图标。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.DisplayName">
            <summary>
            获取名字。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.Typename">
            <summary>
            获取类型名。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.Attributes">
            <summary>
            获取属性。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.IconLocation">
            <summary>
            获取图标位置。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.ExeType">
            <summary>
            获取打开此文件的可执行文件。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.SysIconIndex">
            <summary>
            获取系统图标位置。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.LinkOverlay">
            <summary>
            图标的链接。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.Selected">
            <summary>
            显示选择状态。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.AttrSpecified">
            <summary>
            只返回指定的属性。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.LargeIcon">
            <summary>
            获取系统的大图标。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.SmallIcon">
            <summary>
            获取系统的大图标。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.OpenIcon">
            <summary>
            获取系统的打开图标。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.ShellIconSize">
            <summary>
            获取系统的图标大小。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.Pidl">
            <summary>
            pid标记。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.UseFileAttributes">
            <summary>
            使用文件属性。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.AddOverlays">
            <summary>
            添加覆盖。
            </summary>
        </member>
        <member name="F:Py.Windows.GetFileInfoFlags.OverlayIndex">
            <summary>
            覆盖索引。
            </summary>
        </member>
        <member name="T:Py.Core.FileHelper">
            <summary>
            文件辅助类。
            </summary>
            <remarks>
            <para>
            <list type="bullet">
            <item>FileName:  文件名或相对位置，用 ~ 表示绝对路径。 ../../a.txt</item>
            <item>FilePath:  文件位置, 必须是绝对路径。      E:\a.d  </item>
            <item>FileUrl:   文件网络位置。               http://localhost  </item>
            </list>
            文件路径确实是个很烦的东西。 比如:
            
            给定一个地址:
            
            D:\Document And Settings\UserName
            
            这是文件还是文件夹?
            
            都可能是。
            
            现在假如要得到上面地址所在的文件夹。
            
            最简单的方法是获取倒数2个 \ 符号的位置， Document And Settings  就是答案。
            
            但如果地址格式为
            
            D:\Document And Settings\UserName\
            
            仅仅一个符合就让你的代码更复杂:需要额外的确定有无存在最后的\
            
            地址的多变
            
            D:\Document And Settings\\UserName\
            D:/Document And Settings\UserName\../Use
            D:/Document And Settings\./UserName\
            
            
            上面这些都是合法的地址。
            程序处理的地址往往是字符串连接而成，这样导致地址的多变。
            
            
            
            
            
            所以，很有必要整出一套路径规范。
            
            
            以下是大家熟悉的 也是 FileHelper 使用的路径规范说明
            
            1.  地址分 绝对地址 和 相对地址。
                    文件系统  绝对地址  用 \ 做分隔符。  (Unix 和 Windows 相反)
                              相对地址  用 / 做分隔符。 允许用 . 标记。
                    URL                 用 / 做分隔符。
                例:
                          D:\Do\
                          ../Do/
                          http://localhost/www
            
            2.   文件夹路径必须用 / 或 \ (按第1条) 后缀。 URL 任意。
            
            3.   所有扩展名均包含前缀 . 。 空字符串表示不存在扩展名。
            
            4.   标准地址不允许出现连续的 / 和 \ 。
            
            5.   规范地址不使用多余的 ../。
            
            
            1.   变量名 path 说明绝对路径，而 name 说明 相对路径(也可以绝对)。
            
            2.   使用 FixPath 修复地址，让其符合  前 3 个规范。
            
            3.   函数 Normalize 使地址 符合 5 个规范。
            </para>
            </remarks>
        </member>
        <member name="F:Py.Core.FileHelper._rootPath">
            <summary>
            当前的跟目录。
            </summary>
        </member>
        <member name="M:Py.Core.FileHelper.GetExistsFilePath(System.String)">
            <summary>
            获取存在的文件文件夹路径
            </summary>
            <param name="fileName">文件或文件夹名。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CombinePath(System.String,System.String)">
            <summary>
            连接两个路径。
            </summary>
            <param name="pathA">位置。</param>
            <param name="pathB">位置。</param>
            <returns>连接的字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CombinePath(System.String[])">
            <summary>
            将多个位置连成一个位置，保证2个位置间只要一个分隔符。
            </summary>
            <param name="path">位置。</param>
            <returns>处理后的地址。</returns>
            <example>
            <code>
            FileHelper.Combine("H:\\", "File", "Doc.txt"); //   H:\\File\\Doc.txt
             FileHelper.Combine("H:\\", "File\\", "../Doc.txt"); //   H:\\File\\../Doc.txt
            
            </code></example>
        </member>
        <member name="M:Py.Core.FileHelper.GetCopyedNameInternal(System.String)">
            <summary>
            获得复制的文件名。
            </summary>
            <param name="fileName">文件名。</param>
            <returns>复制后的文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.NormalizePathInternal(System.String[])">
            <summary>
            内部规范路径。
            </summary>
            <param name="folders">各层文件。</param>
            <returns>大小。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.NormalizePath(System.String,System.Char)">
            <summary>
            规范路径。
            </summary>
            <param name="value">要处理的位置。</param>
            <param name="seperator">分隔符。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.NormalizePath(System.String)">
            <summary>
            规范路径。
            </summary>
            <param name="value">要处理的位置。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFullPath(System.String)">
            <summary>
            根据文件名获得文件位置。
            </summary>
            <param name="name">文件或文件夹名。</param>
            <returns>文件或文件夹位置。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ComparePath(System.String,System.String)">
            <summary>
            比较2个路径，返回出现不同的位置。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFileName(System.String)">
            <summary>
            根据文件位置获得文件名。
            </summary>
            <param name="path">文件或文件夹名。</param>
            <returns>路径</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetName(System.String)">
            <summary>
            根据一个位置返回名字。
            </summary>
            <param name="path">位置。</param>
            <returns>名字。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            提取不带扩展的文件名。
            </summary>
            <param name="path">位置。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetExtension(System.String)">
            <summary>
            根据文件名获得扩展名的小写(含点)
            </summary>
            <param name="path">文件或文件夹名。</param>
            <returns>路径</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ChangeDirectory(System.String,System.String)">
            <summary>
            改变路径对应的文件夹。
            </summary>
            <param name="path">文件位置。</param>
            <param name="folderName">新文件夹名。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ChangeFileName(System.String,System.String)">
            <summary>
            改变路径对应的文件名。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="fileName">新文件名。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ChangeExtension(System.String,System.String)">
            <summary>
            更改扩展名
            </summary>
            <param name="fileName">文件或文件夹名。</param>
            <param name="extension">扩展名。含点。</param>
            <returns>结果</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetDirectory(System.String)">
            <summary>
            获取父文件夹位置
            </summary>
            <param name="path">文件或文件夹位置。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFolderName(System.String)">
            <summary>
            获取文件夹名字
            </summary>
            <param name="path">文件或文件夹位置。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetRelativePath(System.String,System.String,System.Int32)">
            <summary>
            把地址转成相对地址格式  。文件: H:\d\aa.gif  文件:  H:\d\a.html
            </summary>
            <param name="path">绝对文件或文件夹的位置。将会把这个地址转为相对的。</param>
            <param name="rePath">作为相对位置的比较文件夹位置，返回<paramref name="path"/> 在通过本路径后的相对位置。如果 null 则取默认文件夹。</param>
            <param name="g">记号。</param>
            <returns>相对位置字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetRelativePath(System.String,System.String)">
            <summary>
            把地址转成相对地址格式  。文件: H:\d\aa.gif  文件:  H:\d\a.html
            </summary>
            <param name="path">绝对文件或文件夹的位置。将会把这个地址转为相对的。</param>
            <param name="reFilePath">作为相对位置的比较文件位置，返回<paramref name="path"/> 在通过本路径后的相对位置。如果 null 则取默认文件夹。</param>
            <returns>相对位置字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetRelativePathX(System.String,System.String)">
            <summary>
            把地址转成相对地址格式  。文件夹: H:\d  文件:  H:\d\a.txt
            </summary>
            <param name="path">绝对文件或文件夹的位置。将会把这个地址转为相对的。</param>
            <param name="reFolderPath">作为相对位置的比较文件夹位置，返回<paramref name="path"/> 在通过本路径后的相对位置。如果 null 则取默认文件夹。</param>
            <returns>相对位置字符串。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.FixDirectoryPath(System.String)">
            <summary>
            添加一个地址的末尾的  /  和  \。
            </summary>
            <param name="folderPath">文件或文件夹的位置。</param>
            <returns>处理后的地址。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.FixPath(System.String,System.Boolean)">
            <summary>
            删除或追加一个地址的末尾的  /  和  \。
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <param name="isDirectory">指示是否为文件夹。</param>
            <returns>处理后的地址。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.PathEquals(System.String,System.String)">
            <summary>
            判断路径是否相同。
            </summary>
            <param name="x">位置a。</param>
            <param name="y">位置b。</param>
            <returns>等效位置返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ToUniqueName(System.String)">
            <summary>
            生成不重名的文件名。
            </summary>
            <param name="filePath">文件位置。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.IsRelativePath(System.String)">
            <summary>
            判断路径是否为相对位置。
            </summary>
            <param name="path">位置。</param>
            <returns>如果是相对位置返回 true 。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.IsInDirectory(System.String,System.String)">
            <summary>
            判断地址2是否在文件夹中。 
            </summary>
            <param name="folderPath">文件夹的位置。</param>
            <param name="path">文件或文件夹的位置。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ForEachInternal(System.String,Py.Core.ForEachAction{System.String},Py.Core.ForEachAction{System.String},System.String,System.IO.SearchOption)">
            <summary>
            对文件夹所有文件夹,文件操作。
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <param name="folderFuntion">对文件夹执行的委托</param>
            <param name="fileFuntion">对文件执行的委托</param>
            <param name="searchPattern">搜索的模式字符串。</param>
            <param name="searchOption">搜索选项。</param>
        </member>
        <member name="M:Py.Core.FileHelper.ForEach(System.String,Py.Core.ForEachAction{System.String},Py.Core.ForEachAction{System.String},System.String,System.IO.SearchOption)">
            <summary>
            对文件夹所有文件夹,文件操作
            </summary>
            <param name="path">文件或文件夹名。</param>
            <param name="folderFuntion">对文件夹执行的委托</param>
            <param name="fileFuntion">对文件执行的委托</param>
            <param name="searchPattern">搜索的模式字符串。</param>
            <param name="searchOption">搜索选项。</param>
        </member>
        <member name="M:Py.Core.FileHelper.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">路径。</param>
            <param name="option">选项。</param>
            <returns>文件名的数组。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">路径。</param>
            <param name="searchPatterns">搜索的扩展名。 如 *.jpg;*.bmp</param>
            <param name="option">选项。</param>
            <returns>文件名的数组。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFolders(System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">路径。</param>
            <param name="option">选项。</param>
            <returns>文件名的数组。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.EnSureParentFolder(System.String)">
            <summary>
            确认一个文件所在的文件夹存在。
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <returns>可以确保是存在则返回true，否则返回false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.InspectFilePath(System.String)">
            <summary>
            在创建一个文件时，检查该文件存储位置是否可以保存文件。
            </summary>
            <param name="filePath">文件位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.InspectFilePath(System.String@,Py.Core.OverwriteType,System.Boolean)">
            <summary>
            尝试写入文件时，处理文件路径问题。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="create">是否确定所在文件夹一定存在。</param>
            <returns>如果可创建文件返回 true;否则返回 false。</returns>
            <remarks>
            创建新文件时，需要满足:
             - 所创建的文件不存在
             - 文件的文件夹存在
            这个函数会检查上述情况，确保能完成写入。
            </remarks>
        </member>
        <member name="M:Py.Core.FileHelper.InspectFolderPath(System.String@,Py.Core.OverwriteType,System.Boolean)">
            <summary>
            尝试写入文件夹时，处理文件路径问题。
            </summary>
            <param name="folderPath">文件夹的位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="create">是否确定所在文件夹一定存在。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CheckPath(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CheckName(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="name">文件或文件夹名。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CheckXml(System.String)">
            <summary>
            检查是否合法Xml,且有无读写权限。
            </summary>
            <param name="filePath">文件位置。</param>
            <returns>正确返回true,否则返回false 。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Exists(System.String)">
            <summary>
            检查文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹名。</param>
            <returns>存在返回 true,不存在得到 false</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ExistsFile(System.String)">
            <summary>
            检查文件是否存在。
            </summary>
            <param name="filePath">文件名</param>
            <returns>存在返回 true,不存在得到 false</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ExistsFolder(System.String)">
            <summary>
            检查指定文件夹是否存在。
            </summary>
            <param name="folderPath">文件夹名</param>
            <returns>存在返回 true,不存在得到 false</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ToUniqueFile(System.String)">
            <summary>
            生成不重名的文件名。
            </summary>
            <returns>新文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ToUniqueFolder(System.String)">
            <summary>。
            生成不重名的文件夹名。
            </summary>
            <returns>新文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CheckFilePopedom(System.String)">
            <summary>
            检查文件否具有读写删除权限。
            </summary>
            <param name="filePath">文件路径。</param>
            <returns>如果具有返回true否则false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CheckFolderPopedom(System.String)">
            <summary>
            检查文件夹里所有文件读写权限。
            </summary>
            <returns>正确返回true,否则返回false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFileSize(System.String)">
            <summary>
            获取文件大小。
            </summary>
            <param name="filePath">文件位置。</param>
            <returns>大小。文件不存在返回 -1。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetFolderSize(System.String)">
            <summary>
            获取文件大小。
            </summary>
            <param name="folderPath">文件夹的位置。</param>
            <returns>大小。文件不存在返回 -1。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.IsFolderEmpty(System.String)">
            <summary>
            获取一个文件夹是否空。
            </summary>
            <param name="folderPath">文件夹的位置。</param>
            <returns>空返回true，没有权限返回和不空返回false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.DeleteFile(System.String)">
            <summary>
            删除文件。
            </summary>
            <param name="filePath">文件的位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.DeleteFileX(System.String)">
            <summary>
            强制删除文件。
            </summary>
            <param name="filePath">文件位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.DeleteFolderInternal(System.String)">
            <summary>
            删除文件夹。
            </summary>
            <param name="folderPath">文件夹的位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.DeleteFolder(System.String)">
            <summary>
            删除文件夹。
            </summary>
            <param name="folderPath">文件夹名字。</param>
            <returns>如果文件不存在或成功删除返回true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.DeleteEmptyFolder(System.String)">
            <summary>
            删除文件中所有空的文件夹。
            </summary>
            <param name="folderPath">文件夹位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.ClearFolder(System.String)">
            <summary>
            清空文件夹。
            </summary>
            <param name="folderPath">文件夹位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.PrepareFolder(System.String)">
            <summary>
            如果文件夹不存在则创建， 如果已存在， 清空。
            </summary>
            <param name="folderPath">文件夹的位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFile(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            复制一个文件。
            </summary>
            <param name="fromFilePath">用于复制的文件位置。</param>
            <param name="toFilePath">复制后的文件保存位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回文件是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制一个文件。
            </summary>
            <param name="fromFilePath">用于复制的文件位置。</param>
            <param name="toFilePath">复制后的文件保存位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回文件是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFile(System.String,System.Boolean)">
            <summary>
            复制一个文件；并在复制的文件后追加" - 复制"。
            </summary>
            <param name="fromFilePath">用于复制的文件名。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回文件是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolderInternal(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            文件夹复制。
            </summary>
            <param name="fromFolderPath">源</param>
            <param name="toFolderPath">至</param>
            <param name="overwrite">覆盖的方式。</param>
            <exception cref="T:System.IO.IOException">复制文件夹到子目录。</exception>
            <returns>返回文件夹是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolder(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            复制一个文件夹。
            </summary>
            <param name="fromFolderPath">用于复制的文件夹名。</param>
            <param name="toFolderPath">复制后的文件夹保存的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <exception cref="T:System.IO.IOException">复制文件夹到子目录。</exception>
            <returns>返回文件夹是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolder(System.String,System.String,System.Boolean)">
            <summary>
            复制一个文件夹。
            </summary>
            <param name="fromFolderPath">用于复制的文件夹名。</param>
            <param name="toFolderPath">复制后的文件夹保存的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <exception cref="T:System.IO.IOException">复制文件夹到子目录。</exception>
            <returns>返回文件夹是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolder(System.String)">
            <summary>
            复制一个文件夹。
            </summary>
            <param name="folderPath">复制的文件夹名。</param>
            <returns>返回文件夹是否复制成功。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolderTo(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            复制一个文件夹到指定文件夹。
            </summary>
            <param name="fromFolderPath">用于复制的文件夹名。</param>
            <param name="toFolderPath">复制的目标文件夹。</param>
            <param name="overwrite">覆盖的方式。</param>
            <exception cref="T:System.IO.IOException">复制文件夹到子目录。</exception>
            <returns>返回复制得到的文件夹位置。如果复制失败，返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFolderTo(System.String,System.String,System.Boolean)">
            <summary>
            复制一个文件夹到指定文件夹。
            </summary>
            <param name="fromFolderPath">用于复制的文件夹名。</param>
            <param name="toFolderPath">复制的目标文件夹。</param>
            <param name="overwrite">覆盖的方式。</param>
            <exception cref="T:System.IO.IOException">复制文件夹到子目录。</exception>
            <returns>返回复制得到的文件夹位置。如果复制失败，返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFileTo(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            复制一个文件到指定文件夹。
            </summary>
            <param name="fromFilePath">用于复制的文件名。</param>
            <param name="toFolderPath">复制的目标文件夹。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回复制得到的文件位置。如果复制失败，返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CopyFileTo(System.String,System.String,System.Boolean)">
            <summary>
            复制一个文件到指定文件夹。
            </summary>
            <param name="fromFilePath">用于复制的文件名。</param>
            <param name="toFolderPath">复制的目标文件夹。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回复制得到的文件位置。如果复制失败，返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CreateFolder(System.String,Py.Core.OverwriteType)">
            <summary>
            创建文件夹。
            </summary>
            <param name="folderPath">文件夹名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回创建的文件夹。如果文件夹已存在，返回原文件夹位置，创建失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CreateFolder(System.String)">
            <summary>
            创建一个文件夹。如果文件夹存在则不创建。
            </summary>
            <param name="folderPath">创建的文件夹名字。</param>
            <returns>返回创建的文件夹。如果文件夹已存在，返回原文件夹位置，创建失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.CreateFile(System.String,Py.Core.OverwriteType)">
            <summary>
            创建文件
            </summary>
            <param name="filePath">创建的文件的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>返回创建的文件位置。如果文件已存在，返回已存在的文件。失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFile(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            移动文件
            </summary>
            <param name="fromFilePath">从的文件名</param>
            <param name="toFilePath">到的文件名</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            移动文件，并命名为指定名字。
            </summary>
            <param name="fromFilePath">移动源文件的名字。</param>
            <param name="toFilePath">移动后的新文件的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFile(System.String,System.String)">
            <summary>
            移动文件。 覆盖存在的文件。
            </summary>
            <param name="fromFilePath">移动源文件的名字。</param>
            <param name="toFilePath">移动后的新文件的名字。</param>
            <returns>新文件的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFileTo(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            移动文件到指定文件夹。
            </summary>
            <param name="fromFilePath">移动源文件的名字。</param>
            <param name="toFolderPath">移动后的新文件的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFileTo(System.String,System.String)">
            <summary>
            移动文件到指定文件夹。
            </summary>
            <param name="fromFilePath">移动源文件的名字。</param>
            <param name="toFolderPath">移动后的新文件的名字。</param>
            <returns>新文件的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFileTo(System.String,System.String,System.Boolean)">
            <summary>
            移动文件到指定文件夹。
            </summary>
            <param name="fromFilePath">移动源文件的名字。</param>
            <param name="toFolderPath">移动后的新文件的名字。</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFolder(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            移动文件夹，并命名为指定名字。
            </summary>
            <param name="fromFolderPath">移动源文件夹的名字。</param>
            <param name="toFolderPath">移动后的新文件夹的名字</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件夹的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFolder(System.String,System.String,System.Boolean)">
            <summary>
            移动文件夹，并命名为指定名字。
            </summary>
            <param name="fromFolderPath">移动源文件夹的名字。</param>
            <param name="toFolderPath">移动后的新文件夹的名字</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件夹的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFolder(System.String,System.String)">
            <summary>
            移动文件夹，并命名为指定名字。
            </summary>
            <param name="fromFolderPath">移动源文件夹的名字。</param>
            <param name="toFolderPath">移动后的新文件夹的名字</param>
            <returns>新文件夹的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFolderTo(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            移动文件夹到指定文件夹。
            </summary>
            <param name="fromFolderPath">移动源文件夹的名字。</param>
            <param name="toFolderPath">移动到的文件夹的名字</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件夹的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.MoveFolderTo(System.String,System.String,System.Boolean)">
            <summary>
            移动文件夹到指定文件夹。
            </summary>
            <param name="fromFolderPath">移动源文件夹的名字。</param>
            <param name="toFolderPath">移动到的文件夹的名字</param>
            <param name="overwrite">覆盖的方式。</param>
            <returns>新文件夹的位置，移动失败返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Replace(System.String,System.String,System.String)">
            <summary>
            用其他文件的内容替换指定文件的内容，删除原始文件，并创建被替换文件的备份。
            </summary>
            <param name="fromFilePath">从的文件名</param>
            <param name="toFilePath">到的文件名</param>
            <param name="bakFileName">备份的文件名</param>
            <exception cref="T:System.ArgumentException">destinationFileName 参数描述的路径不是合法的格式。- 或 -destinationBackupFileName 参数描述的路径不是合法的格式。</exception>
        </member>
        <member name="M:Py.Core.FileHelper.AddAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            添加指定文件的属性。
            </summary>
            <param name="path">文件或文件夹位置。</param>
            <param name="attrs">文件属性。</param>
        </member>
        <member name="M:Py.Core.FileHelper.RemoveAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            删除指定文件的属性。
            </summary>
            <param name="path">文件或文件夹位置。</param>
            <param name="attrs">文件属性。</param>
        </member>
        <member name="M:Py.Core.FileHelper.SetNormal(System.String)">
            <summary>
            恢复指定文件的属性。
            </summary>
            <param name="path">文件或文件夹位置。</param>
        </member>
        <member name="M:Py.Core.FileHelper.GetEncoding(System.String)">
            <summary>
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetEncoding(System.IO.FileStream)">
            <summary>
            通过给定的文件流，判断文件的编码类型
            </summary>
            <param name="fs">文件流</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetTmpFile">
            <summary>
            返回一个缓存文件位置。
            </summary>
            <returns>文件位置。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetTmpFile(System.String)">
            <summary>
            返回一个缓存文件位置。
            </summary>
            <returns>文件位置。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetTmpFile(System.String@,System.String)">
            <summary>
            返回一个缓存文件流。
            </summary>
            <param name="filePath">文件路径。</param>
            <param name="ext">扩展名。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetTmpFile(System.String,System.String@)">
            <summary>
            返回一个缓存文件流。
            </summary>
            <param name="folder">父文件夹。</param>
            <param name="filePath">文件路径。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetTmpFile(System.String,Py.Core.Func{System.String},System.String@)">
            <summary>
            返回一个缓存文件流。
            </summary>
            <param name="folder">父文件夹。</param>
            <param name="tmpNameSeed">生成缓存文件名的委托。</param>
            <param name="filePath">文件路径。</param>
            <returns>文件流。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Write(System.String,System.Object,Py.Core.OverwriteType)">
            <summary>
            写入数据到指定文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="content">内容。</param>
            <param name="overwrite">文件覆盖方式。</param>
            <returns>如果写入成功返回 true。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Write(System.String,System.Object,System.Text.Encoding,Py.Core.OverwriteType)">
            <summary>
            写入文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="content">要写入的文件的内容。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="encoding">文件使用的编码。</param>
            <returns>如果写入成功返回 true。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.WriteX(System.String,System.Object)">
            <summary>
            写入文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="content">要写入的文件的内容。</param>
            <returns>如果写入成功返回 true。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Write(System.String,System.IO.Stream,Py.Core.OverwriteType,System.Int32)">
            <summary>
            写入文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="s">写入的流。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="ioBuffer">每次读取的流大小。</param>
            <returns>如果写入成功返回 true。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Append(System.String,System.String)">
            <summary>
            追加数据到一个文件。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="value">内容。</param>
        </member>
        <member name="M:Py.Core.FileHelper.ChangeEncoding(System.String,System.Text.Encoding)">
            <summary>
            改变文件的编码。
            </summary>
            <param name="filePath">文件名。/</param>
            <param name="encoding">编码。</param>
        </member>
        <member name="M:Py.Core.FileHelper.ChangeEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            改变文件的编码。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="encoding1">原编码。</param>
            <param name="encoding2">现在编码。</param>
        </member>
        <member name="M:Py.Core.FileHelper.GetFileInfo(System.String)">
            <summary>
            获取文件信息。
            </summary>
            <param name="filePath">文件名</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetDirectoryInfo(System.String)">
            <summary>
            获取文件夹信息。
            </summary>
            <param name="folderPath">文件夹名</param>
            <returns>一个 DirectoryInfo 的实例，如果文件位置错误返回null。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.OpenWrite(System.String)">
            <summary>
            返回一个输出的文件流。
            </summary>
            <param name="filePath">文件名。</param>
            <returns>返回文件流。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Read(System.String)">
            <summary>
            读取字符串的文件。
            </summary>
            <param name="filePath">文件名</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Py.Core.FileHelper.Read(System.String,System.Text.Encoding)">
            <summary>
            读取字符串的文件。
            </summary>
            <param name="filePath">文件名</param>
            <param name="encoding">编码。</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Py.Core.FileHelper.ReadX(System.String)">
            <summary>
            读取字符串的文件。
            </summary>
            <param name="filePath">文件名</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Py.Core.FileHelper.OpenRead(System.String)">
            <summary>
            获得文件流。
            </summary>
            <param name="filePath">文件名</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.WriteTmp(System.Object)">
            <summary>
            写入一个临时文件。
            </summary>
            <param name="value">内容。</param>
            <returns>缓存文件名。</returns>
        </member>
        <member name="M:Py.Core.FileHelper.GetMIME(System.String)">
            <summary>
            根据扩展名返回所对应的MIME类型字符串。
            </summary>
            <param name="fileExtension">文件扩展名。含点。</param>
        </member>
        <member name="P:Py.Core.FileHelper.RootPath">
            <summary>
            获取或设置当前的跟位置。
            </summary>
        </member>
        <member name="T:Py.Core.Str">
            <summary>
            处理字符串工具。
            </summary>
            <remarks>提供字符串常用的工具处理。这个类会忽视null字符串。</remarks>
            <seealso cref="T:System.String"/>
        </member>
        <member name="F:Py.Core.Str.DefaultLine">
            <summary>
            默认的分割符。
            </summary>
        </member>
        <member name="M:Py.Core.Str.ToUpper(System.Char)">
            <summary>
            将输入字符变大写。
            </summary>
            <param name="input">要处理的字符。</param>
            <returns>处理完的字符。</returns>
        </member>
        <member name="M:Py.Core.Str.ToLower(System.Char)">
            <summary>
            将输入字符变小写。
            </summary>
            <param name="input">要处理的字符。</param>
            <returns>处理完的字符。</returns>
        </member>
        <member name="M:Py.Core.Str.ToOtherCase(System.Char@)">
            <summary>
            将参数ch转换为另外大小写状态。
            </summary>
            <param name="ch">操作的字符。</param>
            <returns>如果字符已转换，返回true，否则返回false。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveBefore(System.String,System.Char)">
             <summary>
             删除特定字符以前的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.StartFrom(a,',');
                     Console.Write(input);  // 输出   my,child
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.RemoveBefore(System.String,System.String)">
             <summary>
             删除特定字符以前的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.StartFrom(a,',');
                     Console.Write(input);  // 输出   my,child
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.RemoveAfter(System.String,System.Char)">
             <summary>
             删除特定字符以后的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.EndFrom(a,',');
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.RemoveAfter(System.String,System.String)">
             <summary>
             删除特定字符以后的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.EndFrom(a,',');
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.RemoveStart(System.String,System.Int32)">
            <summary>
            删除特定字符前指定位数的内容。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="count">删除个数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveEmptys(System.String)">
            <summary>
            删除字符串的空白。 包括 ' '、'\t'、'\r'、'\n'等都被移除。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveUnvisible(System.String)">
            <summary>
            删除不可见字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveEnd(System.String,System.Int32)">
             <summary>
             去除字符串最后指定数字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="count">删除个数。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,";
                     string input = Str.TrimEnd(a);
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.RemoveEnd(System.String,System.String)">
            <summary>
            如果字符串以指定内容结尾，删除之。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">判断的内容。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveStart(System.String,System.String)">
            <summary>
            如果字符串以指定内容开始，删除之。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">判断的内容。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Remove(System.String,System.Int32)">
            <summary>
            删除字符串中从指定位置到最后位置的所有字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Remove(System.String,System.Int32,System.Int32)">
            <summary>
            从指定字符串的指定位置开始删除指定数目的字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">要删除的字符数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveIgnoreCase(System.String,System.String)">
            <summary>
            删除字符串中指定的子字符串。忽略比较时的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">子字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Remove(System.String,System.String)">
            <summary>
            删除字符串中指定的子字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">子字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Remove(System.String,System.Collections.Generic.IList{System.Char})">
            <summary>
            删除字符串中所有出现过的字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="values">字符集合。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.RemoveIgnoreCase(System.String,System.Collections.Generic.IList{System.Char})">
            <summary>
            删除字符串中所有出现过的字符。忽略比较时的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="values">字符集合。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.TrimToLength(System.String,System.Int32,System.String)">
             <summary>
             截取字符串,多余部分给第三个参数替代。
             </summary>
             <param name="input">所要截取的字符串。</param>
             <param name="length">截取字符串的长度。</param>
             <param name="appendText">截取字符串后省略部分的字符串。</param>
             <returns>字符串</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hellomychild";
                     string input = Text.GetSubString(a,5," (更多)");
                     Console.Write(input);  // 输出   hello (更多)
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.TrimToLength(System.String,System.Int32)">
            <summary>
            截取字符串,多余部分给第三个参数替代。
            </summary>
            <param name="input">所要截取的字符串。</param>
            <param name="length">截取字符串的长度。</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Py.Core.Str.Substring(System.String,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <param name="length">长度。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Substr(System.String,System.Int32,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <param name="endIndex">结束位置。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Trim(System.String)">
            <summary>
            移除所有前导空白字符和尾部空白字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.TrimStart(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有前导匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Trim(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.TrimEnd(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有尾部匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Plain(System.String)">
            <summary>
            删除所有回车。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Capitalize(System.String)">
            <summary>
            将字符串首字母大写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnCapitalize(System.String)">
            <summary>
            将字符串首字母小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToPascal(System.String,System.Char)">
            <summary>
            将字符串转为 Pascal 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToCamel(System.String,System.Char)">
            <summary>
            将字符串转为 Camel 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
            <example>
            "back-color" /   backColor
            </example>
        </member>
        <member name="M:Py.Core.Str.Hyphenate(System.String,System.Char)">
            <summary>
            将字符串转为 Hyphenate 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
            <example>
            "BackColor" /   back-color
            </example>
        </member>
        <member name="M:Py.Core.Str.ToLength(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            将字符串转为一定长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">长度。</param>
            <param name="ch">如果长度不够，用于补充的字符。</param>
            <param name="left">如果为 true，则保留左字符串不变，否则保留右字符串固定。 </param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToCLength(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            将字符串转为一定长度。中文算2个长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">长度。</param>
            <param name="ch">如果长度不够，用于补充的字符。</param>
            <param name="left">如果为 true，则保留左字符串不变，否则保留右字符串固定。 </param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToUpper(System.String)">
            <summary>
            将字符串转为大写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToLower(System.String)">
            <summary>
            将字符串转为小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Replace(System.String,System.Char,System.Char)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Replace(System.String,System.String,System.String)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。忽视所有大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Replace(System.String,System.Object,System.Object)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Replace(System.String,System.Int32,System.Char)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="position">位置。</param>
            <param name="c">更新的值。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Replace(System.String,System.String[],System.String[])">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValues">原值。</param>
            <param name="newValues">更新的值。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Reverse(System.String,System.Int32,System.Int32)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Reverse(System.String,System.Int32)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Reverse(System.String)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Left(System.String,System.Int32)">
            <summary>
            获取字符串左边 <paramref name="length"/> 个字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">获取的字符串的长度。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Right(System.String,System.Int32)">
            <summary>
            获取字符串右边 <paramref name="length"/> 个字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">获取的字符串的长度。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.PadLeft(System.String,System.Int32,System.Char)">
            <summary>
            右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">Unicode 填充字符。</param>
            <returns>
            等效于此实例的一个新 System.String，但它是右对齐的，并在左边用达到总长度长度所需数目的空格进行填充。如果总长度小于此实例的长度，则为与此实例相同的新 System.String。
            </returns>
        </member>
        <member name="M:Py.Core.Str.PadRight(System.String,System.Int32,System.Char)">
            <summary>
            左对齐此字符串中的字符，在右边用空格填充以达到指定的总长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">Unicode 填充字符。</param>
            <returns>
            等效于此实例的一个新 System.String，但它是右对齐的，并在左边用达到总长度长度所需数目的空格进行填充。如果总长度小于此实例的长度，则为与此实例相同的新 System.String。
            </returns>
        </member>
        <member name="M:Py.Core.Str.Insert(System.String,System.Int32,System.String)">
            <summary>
            在字符串指定索引位置插入一个指定的字符串对象。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="position">此插入的索引位置。</param>
            <param name="value">要插入的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.IsMatch(System.String,System.String)">
            <summary>
            指示正则表达式使用 pattern 参数中指定的正则表达式和 options 参数中提供的匹配选项是否在输入字符串中找到匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="pattern">匹配的模式字符串。</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Contains(System.String,System.Char)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Contains(System.String,System.String)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。忽略全部大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Contains(System.String,System.String,System.Int32)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.ContainsIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Length(System.String)">
            <summary>
            返回指定字符串的长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>如果字符串为空， 返回 0，否则返回字符串长度。</returns>
        </member>
        <member name="M:Py.Core.Str.CLength(System.String)">
            <summary>
            检测含中文字符串实际长度。
            </summary>
            <param name="input">待检测的字符串。</param>
            <returns>正整数。</returns>
        </member>
        <member name="M:Py.Core.Str.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.StartsWithIgnoreCase(System.String,System.Char)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.StartsWith(System.String,System.String)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.EndsWith(System.String,System.String)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.EndsWith(System.String,System.Char)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.EndsWithIgnoreCase(System.String,System.Char)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。忽略全部大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.Count(System.String,System.Char)">
            <summary>
            求一个字符在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:Py.Core.Str.Count(System.String,System.String)">
            <summary>
            求一个字符串在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:Py.Core.Str.Count(System.String,System.Char,System.Int32)">
            <summary>
            求一个字符串在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <param name="startIndex">开始位置。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:Py.Core.Str.Count(System.String,System.String,System.Int32)">
            <summary>
            求一个字符串在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <param name="startIndex">开始位置。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:Py.Core.Str.Count(System.String,System.Char[])">
            <summary>
            求指定的字符在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:Py.Core.Str.ForEachCharIn(System.String,System.Char[],Py.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中出现的指定字符。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:Py.Core.Str.ForEachCharInIgnoreCase(System.String,System.Char[],Py.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中出现的指定字符。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:Py.Core.Str.ForEachCharNotIn(System.String,System.Char[],Py.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中未出现的指定字符。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:Py.Core.Str.ForEachCharNotInIgnoreCase(System.String,System.Char[],Py.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中未出现的指定字符。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:Py.Core.Str.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            比较2个字符串是否相同，忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Str.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较2个字符串是否相同，忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Equals(System.String,System.String,System.Int32)">
            <summary>
            字符串a中指定位置开始为b。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Str.EqualsIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            字符串a中指定位置开始为b。 忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Str.Surround(System.String,System.Char,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="l">左括号。</param>
            <param name="r">右括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Unsurround(System.String,System.Char,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="l">左括号。</param>
            <param name="r">右括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Unsurround(System.String,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="c">括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.InnerString(System.String)">
            <summary>
            删除字符串首尾1长度的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.InnerString(System.String,System.Int32)">
            <summary>
            删除字符串首尾同样长度的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">长度。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="startIndex">要使用的集合中的第一个数组元素。</param>
            <param name="count">要使用的集合的元素数。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Char)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join``1(System.Collections.Generic.IList{``0},System.String,Py.Core.Func{``0,System.String})">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <param name="f">返回根据项得到字符串的函数。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input1">字符串集合。</param>
            <param name="input2">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Join(System.Collections.IList,System.String,System.String)">
             <summary>
             在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
             </summary>
             <param name="input">字符串集合。</param>
             <param name="format">格式化的字符串。</param>
             <param name="separator">分隔符。</param>
             <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a[] = new string[]{ "a","b","c","d" };
                     string input = Text.Join(a,"{0}", "");
                     Console.Write(input);  // 输出   a,b,c,d
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.Split(System.String,System.String)">
             <summary>
             返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定是否返回空数组元素。
             </summary>
             <param name="input">字符串内容。</param>
             <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
             <returns>返回分割后的数组。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Text.Split(a,",")[0];
                     Console.Write(input);  // 输出   hello
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.SplitNewLine(System.String)">
            <summary>
            将多行字符串分割。
            </summary>
            <param name="input">字符串内容。</param>
        </member>
        <member name="M:Py.Core.Str.SplitNewLineAndTrim(System.String)">
            <summary>
            将多行字符串分割并删除空格。
            </summary>
            <param name="input">字符串内容。</param>
        </member>
        <member name="M:Py.Core.Str.SplitAndTrim(System.String,System.Char)">
            <summary>
            分割字符串并对分隔的每部分字符串进行 Trim()   。
            </summary>
            <param name="input">字符串内容。</param>
            <param name="separator">分隔字符。</param>
        </member>
        <member name="M:Py.Core.Str.SplitAndTrim(System.String,System.String)">
            <summary>
            分割字符串并对分隔的每部分字符串进行 Trim()   。
            </summary>
            <param name="input">字符串内容。</param>
            <param name="separator">分隔字符。</param>
        </member>
        <member name="M:Py.Core.Str.Trigger(System.String,System.String,System.String)">
            <summary>
            将字符串在a，b切换。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="a">切换的字符串。</param>
            <param name="b">第二个字符串。</param>
            <returns>如果输入字符串和后2个字符串一个相等，则为另一个。</returns>
        </member>
        <member name="M:Py.Core.Str.TriggerIgnoreCase(System.String,System.String,System.String)">
            <summary>
            将字符串在a，b切换。 忽略所有的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="a">切换的字符串。</param>
            <param name="b">第二个字符串。</param>
            <returns>如果输入字符串和后2个字符串一个相等，则为另一个。</returns>
        </member>
        <member name="M:Py.Core.Str.ToHexString(System.Byte[])">
            <summary>
            将一个字节数组转为十六进制字符串。
            </summary>
            <param name="bytes">字节数组。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Indent(System.String,System.Int32,System.String)">
            <summary>
            缩进一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="level">缩进数。</param>
            <param name="indentChars">用来缩进的字符串。</param>
            <returns>缩进后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.MaxSubString(System.String,System.String)">
            <summary>
            计算 2 个字符串的最长公共子字符串。
            </summary>
            <param name="value1">要比较的字符串 1 。</param>
            <param name="value2">要比较的字符串 2 。</param>
            <returns>公共子字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.DistanceCompare(System.String,System.String)">
            <summary>
            比较 2 个字符串的相似度。
            </summary>
            <param name="s1">要比较的字符串。</param>
            <param name="s2">要比较的字符串。</param>
            <returns>相似度， 如果值为 0， 表示相等， 值越小， 越相似。</returns>
        </member>
        <member name="M:Py.Core.Str.IsFileNameMatch(System.String,System.String,Py.Core.MatchOptions)">
            <summary>
            判断一个字符串是否符合文件名模式。空字符串永远不满足。
            </summary>
            <param name="name">要判断的字符串。</param>
            <param name="pattern">匹配的模式字符串。</param>
            <param name="options">操作选项。</param>
            <returns>匹配返回 true， 否则 false 。</returns>
        </member>
        <member name="M:Py.Core.Str.Format(System.String,System.Object[])">
            <summary>
            实现字符串格式化操作。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.FormatException">无法格式化字符串。</exception>
        </member>
        <member name="M:Py.Core.Str.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            实现字符串格式化操作。
            </summary>
            <param name="provider">格式化提供者。</param>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.FormatException">无法格式化字符串。</exception>
        </member>
        <member name="M:Py.Core.Str.Format(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            实现字符串快速格式化操作。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.IndexOutOfRangeException">格式化错误。</exception>
            <exception cref="T:System.NullReferenceException">参数为空。</exception>
        </member>
        <member name="M:Py.Core.Str.FormatX(System.String,System.Object[])">
            <summary>
            实现字符串快速格式化操作。适合快读格式化。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.IndexOutOfRangeException">格式化错误。</exception>
            <exception cref="T:System.NullReferenceException">参数为空。</exception>
        </member>
        <member name="M:Py.Core.Str.HtmlTrim(System.String)">
             <summary>
             去掉首尾p与br。
             </summary>
             <param name="input">要做处理的字符串</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "&lt;p&gt;hellos&lt;/p&gt;";
                     string value = Str.HtmlTrim(a);
                     Console.Write(value);  // 输出   hellos
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.HtmlEncode(System.String)">
            <summary>
             将字符串转换为 HTML 编码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.HtmlDecode(System.String)">
            <summary>
            将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UrlEncode(System.String)">
            <summary>
            对 URL 字符串的路径部分进行编码，以进行从 Web 服务器到客户端的可靠的 HTTP 传输。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UrlEncodeComponent(System.String)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UrlEncodeComponent(System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UrlDecode(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnicodeEncode(System.Char)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnicodeEncode(System.String)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnicodeEncode(System.String,System.String)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="px">前缀表达式。 如 %u  \u  $#</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnicodeDecode(System.String)">
            <summary>
            从十六进制表达式转化为同样效果的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UnicodeDecode(System.String,System.String)">
            <summary>
            从十六进制表达式转化为同样效果的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="px">前缀字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Escape(System.String)">
            <summary>
            将字符串转换为 Unicode 字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Unescape(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.JSEncode(System.String)">
            <summary>
            js编码
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.JSDecode(System.String)">
            <summary>
            js解码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.Enquote(System.String,System.Char)">
            <summary>
            生成一个指定引号字符串。
            </summary>
            <param name="value">值。</param>
            <param name="quote">括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.HtmlToString(System.String)">
            <summary>
            HTML代码转换成TXT格式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.StringToHtml(System.String)">
            <summary>
            把TXT格式转换成HTML代码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.HtmlNoTags(System.String)">
            <summary>
            清除 Html 的标签。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.HtmlNoScript(System.String)">
            <summary>
            过滤特殊字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
            <remarks>有效防止脚本出现。</remarks>
        </member>
        <member name="M:Py.Core.Str.Create(System.String,System.Int32)">
            <summary>
            创建某个字符串重复次数的字符串。
            </summary>
            <param name="value">字符串。</param>
            <param name="count">次数。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.GetPY(System.String)">
             <summary> 
             汉字转拼音缩写  。
             </summary> 
             <param name="input">要转换的汉字字符串。</param> 
             <returns>返回一个汉字所对的拼音首字母。</returns> 
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Str.GetPY("平");
                     Console.Write(value);  // 输出   P
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Str.GetPY(System.Char)">
             <summary> 
             取单个字符的拼音声母 。
             </summary> 
             <param name="input">要转换的单个汉字。</param> 
             <returns>拼音声母。</returns> 
             <example><code>
             using System;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Text.CText.GetPYChar("平");
                  Console.Write(value);  // 输出   P
                 }
             
             }
             </code></example> 
        </member>
        <member name="M:Py.Core.Str.GetPinYin(System.String)">
            <summary>
            把汉字转换成拼音(全拼) 。
            </summary>
            <param name="input">汉字字符串。</param>
            <returns>转换后的拼音(全拼)字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToSbc(System.String)">
            <summary>
            转全角的函数(SBC case)。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToDbc(System.String)">
            <summary>
            转半角的函数(DBC case) 。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.UBBToHTML(System.String)">
            <summary>
            UBB字符转换成HTML字符。
            </summary>
            <param name="input">源字符串。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Str.ToTimeString(System.DateTime,System.String)">
            <summary>
            时间转换成多少分钟前。
            </summary>
            <param name="dateTime">时间。</param>
            <param name="foramt">格式。</param>
            <returns>转换后的时间</returns>
        </member>
        <member name="T:Py.Core.RegExp">
            <summary>
            提供正则有关的工具和常用正则。
            </summary> 
        </member>
        <member name="F:Py.Core.RegExp.Number">
            <summary>
            正则常量。匹配零和非零开头的数字。
            </summary> 
        </member>
        <member name="F:Py.Core.RegExp.Decimal">
            <summary>
            正则常量。匹配十进制数字。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Integer">
            <summary>
            正则常量。匹配整数。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Hex">
            <summary>
            正则常量。匹配十六进制数字。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Letter">
            <summary>
            正则常量。匹配字母。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Int">
            <summary>
            正则常量。匹配正整数或零
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.UserName">
            <summary>
            正则常量。匹配英文用户名。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Password6">
            <summary>
            正则常量。匹配密码。  长度在6~18之间  以字母开头，只能包含字符、数字和下划线。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Value">
            <summary>
            正则常量。匹配含有^%&apos;,;=?$\"等字符。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Email">
            <summary>
            正则常量。匹配正确的Email地址。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.URL">
            <summary>
            正则常量。匹配网络地址。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Month">
            <summary>
            正则常量。匹配一年的12个月   正确格式为："01"～"09"和"1"～"12"。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Base64String">
            <summary>
            base64字符串。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.HtmlNode">
            <summary>
            匹配HTML标记的正则表达式。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Trim">
            <summary>
            匹配首尾空白字符的正则表达式。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.IP">
            <summary>
            正则常量。匹配IP。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Date">
            <summary>
            正则常量。匹配一个月的31天   正确格式为："01"～"09"和"1"～"31"。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Any">
            <summary>
            正则常量。匹配所有表达式。
            </summary>
        </member>
        <member name="M:Py.Core.RegExp.Test(System.String,System.String)">
            <summary>
            指示正则表达式使用模式中指定的正则表达式是否在输入字符串中找到匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">正则表达式语法分析错误。</exception>
        </member>
        <member name="M:Py.Core.RegExp.Match(System.String,System.String,System.Int32)">
            <summary>
            在指定的输入字符串中搜索模式中提供的正则表达式的匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="group">要查找的结果组。</param>
            <returns>匹配的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">正则表达式语法分析错误。</exception>
        </member>
        <member name="T:Py.Core.RegExp.Chinese">
            <summary>
            和中文相关的特定正则表达式。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.IsChinese">
            <summary>
            正则常量。匹配全汉字。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.ID">
            <summary>
            正则常量。匹配身份证号(15位或18位数字)。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.NoChinese">
            <summary>
            正则常量。匹配不含汉字。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.TelePhone">
            <summary>
            正则常量。匹配电话号码， 正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX" 。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.Zipcode">
            <summary>
            匹配邮政编码。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.Mobile">
            <summary>
            匹配手机号。
            </summary>
        </member>
        <member name="F:Py.Core.RegExp.Chinese.QQ">
            <summary>
            匹配QQ。
            </summary>
        </member>
        <member name="T:Py.Json.JsonObject">
            <summary>
            表示一个Json对象。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2">
            <summary>
            为所有键/值的集合提供基类。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._buckets">
            <summary>
            保存所有键/值信息的数组。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._comparer">
            <summary>
            表示键比较的比较工具。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._count">
            <summary>
            表示集合中值的个数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._entries">
            <summary>
            所有值的集合。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._freeCount">
            <summary>
            表示当前空闲的个数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._freeList">
            <summary>
            表示当前空闲的索引。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._keys">
            <summary>
            所有键的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._siInfo">
            <summary>
            序列号信息的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._values">
            <summary>
            所有值的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2._version">
            <summary>
            表示当前修改的版本。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="comparer">比较器。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Int32)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="capacity">容器大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <param name="comparer">比较器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="capacity">初始化容器的大小。</param>
            <param name="comparer">键比较的比较工具。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Initialize(System.Int32)">
            <summary>
            初始化集合为指定大小。
            </summary>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnAddExistKey(`0)">
            <summary>
            当添加已存在的一个键时触发。
            </summary>
            <param name="key">键名。</param>
            <returns>如果更新当前值，返回 true;   如果保留原值，返回 false。</returns>
            <exception cref="T:System.ArgumentException">键已存在。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Insert(`0,`1,System.Boolean)">
            <summary>
            在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <param name="add">如果为 <c>true</c> 则增加，否则出现同样键出现错误。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnAddEntry(`0,`1)">
            <summary>
            向当前字典增加单元。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>增加则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Clear">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Remove(`0)">
            <summary>
            从 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns>
            如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中没有找到 <paramref name="key"/>，该方法也会返回 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnRemoveEntry(`0,`1)">
            <summary>
            将单元移除。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnRemoveAll">
            <summary>
            移除所有单元。
            </summary>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:System.Collections.Generic.IDictionary`2"/> 是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.Generic.IDictionary`2"/> 包含带有该键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ContainsValue(`1)">
            <summary>
            确定 <see cref="T:System.Collections.Generic.IDictionary`2"/> 是否包含具有指定值的元素。
            </summary>
            <param name="value">The value.</param>
            <returns>
            如果 <see cref="T:System.Collections.Generic.IDictionary`2"/> 包含带有该值的元素，则为 true；否则，为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.IsCompatibleKey(System.Object)">
            <summary>
            判断当前键是否可用。
            </summary>
            <param name="key">键。</param>
            <returns>
            可用则true。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            拷贝到一个新的键/值集合。
            </summary>
            <param name="array">数组。</param>
            <param name="index">开始数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.FindEntry(`0)">
            <summary>
            查找指定键的值。
            </summary>
            <param name="key">键。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Resize">
            <summary>
            重置大小。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value"/> 参数的类型的默认值。该参数未经初始化即被传递。</param>
            <returns>
            如果实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。当前未实现该参数的功能。</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">缺少匹配的集合。 - 或 - 键为空。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.GetEnumerator">
            <summary>
            返回一个 enumerator 。
            </summary>
            <returns>遍历器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </summary>
            <returns>
            一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            增加指定键到集合。
            </summary>
            <param name="keyValuePair">键/值集合。</param>
            <exception cref="T:System.ArgumentNullException">
            	键为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定集合是否包含特定值。
            </summary>
            <param name="keyValuePair">要在集合中定位的对象。</param>
            <returns>
            如果在集合中找到 item，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从特定的 System.Array 索引开始，将集合的元素复制到一个 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index"> array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="keyValuePair">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException">
            	key 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            在 <see cref="T:System.Collections.IDictionary"/> 对象中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的 <see cref="T:System.Object"/>。</param>
            <param name="value">用作要添加的元素的值的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.IDictionary"/> 对象中已存在具有相同键的元素。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 为只读。- 或 - <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IDictionary"/> 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 对象中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 包含带有该键的元素，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IDictionary"/> 对象中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 对象为只读。- 或 -<see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.OnKeyNotFound(`0)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Count">
            <summary>
            获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Comparer">
            <summary>
            获取当前的比较器。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 对象具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.System#Collections#IDictionary#Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Entries">
            <summary>
            获取当前的单元集合。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Version">
            <summary>
            获取当前的字典版本。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.Entry">
            <summary>
            表示字典单元。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Entry.HashCode">
            <summary>
            哈希值。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Entry.Next">
            <summary>
            下一个哈希值。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Entry.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Entry.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.Enumerator">
            <summary>
            当前集合的枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Enumerator._dictionary">
            <summary>
            对应的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Enumerator._version">
            <summary>
            初始化的修改记录。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Enumerator._current">
            <summary>
            表示当前值。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.Enumerator._getEnumeratorDictEntry">
            <summary>
            返回的枚举类型。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Enumerator.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1},System.Boolean)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.Enumerator 的新实例。
            </summary>
            <param name="dictionary">字典。</param>
            <param name="getEnumeratorRetType">枚举的相对方式。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            获取键值集合。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.Key">
            <summary>
            获取当前键。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.Value">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            获取当前键。
            </summary>
            <value>键。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            获取当前值。
            </summary>
            <value>值。</value>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.KeyCollection">
            <summary>
            表示一个键的集合。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.KeyCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.KeyCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator._currentKey">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.ValueCollection">
            <summary>
            表示一个值的集合。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.ValueCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TValue, TValue&gt;.ValueCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator._currentValue">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:Py.Collections.ObjectModel.Dictionary`2.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Dictionary`2.DebugView._dictionary">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Dictionary`2.DebugView.#ctor(Py.Collections.ObjectModel.Dictionary{`0,`1})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.Dictionary`2.DebugView"/> 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="P:Py.Collections.ObjectModel.Dictionary`2.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="T:Py.Json.IJsonObject">
            <summary>
            所有Json对象满足的接口。
            </summary>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonArray(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonObject(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonValue(System.Int32)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonArray(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonObject(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.IJsonObject.GetJsonValue(System.String)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="P:Py.Json.IJsonObject.Value">
            <summary>
            获取当前对象的值。
            </summary>
        </member>
        <member name="P:Py.Json.IJsonObject.Json">
            <summary>
            返回当前表达式对应的Json字符串。
            </summary>
        </member>
        <member name="P:Py.Json.IJsonObject.Item(System.Int32)">
            <summary>
            获取或设置指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>IJsonObject。</returns>
        </member>
        <member name="P:Py.Json.IJsonObject.Item(System.String)">
            <summary>
            获取或设置指定名字的值。
            </summary>
            <param name="name">名。</param>
            <returns>IJsonObject。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.#ctor">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonObject.#ctor(Py.Json.JsonParser)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="x">操作符。</param>
        </member>
        <member name="M:Py.Json.JsonObject.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="json">Json表达式。</param>
        </member>
        <member name="M:Py.Json.JsonObject.#ctor(System.Collections.IDictionary)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="map">键/值集合。</param>
        </member>
        <member name="M:Py.Json.JsonObject.OnAddExistKey(System.String)">
            <summary>
            忽视键存在时产生的错误。
            </summary>
            <param name="key">键名。</param>
        </member>
        <member name="M:Py.Json.JsonObject.AddRange(System.Collections.ICollection)">
            <summary>
            增加多个项。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.AddRange(System.Collections.IDictionary)">
            <summary>
            增加多个项。
            </summary>
            <param name="value">键值集合。</param>
        </member>
        <member name="M:Py.Json.JsonObject.AddRange(Py.Json.JsonObject)">
            <summary>
            增加多个项。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.Object)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.String)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.String,System.Char)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <param name="quote">引号。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.Int32)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.Double)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String,System.Boolean)">
            <summary>
            增加一个项。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonObject.Add(System.String)">
            <summary>
            增加一个 Null 项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonArray(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonObject(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonValue(System.Int32)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonArray(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonObject(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.GetJsonValue(System.String)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.op_Explicit(Py.Json.JsonObject)~Py.Json.JsonExpression">
            <summary>
            实现从 <see cref="T:Py.Json.JsonObject"/> 到 <see cref="T:Py.Json.JsonExpression"/>的显性转换。
            </summary>
            <param name="j">对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.op_Explicit(Py.Json.JsonObject)~Py.Json.JsonArray">
            <summary>
            转换当前对象至等效的Json数组。
            </summary>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonObject.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Py.Json.JsonObject.Item(System.Int32)">
            <summary>
            返回指定位置的值。(不推荐使用)
            </summary>
        </member>
        <member name="P:Py.Json.JsonObject.Item(System.String)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonObject.Json">
            <summary>
            获取或设置当前表达式对应的Json字符串。重写此函数支持更多格式。
            </summary>
        </member>
        <member name="P:Py.Json.JsonObject.Value">
            <summary>
            获取当前对象的值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.Logging.Logger">
             <summary>
             提供一组帮助您记录日志的方法和属性。
             </summary>
             <remarks>
             <para>
             <code>
             Logger.Write("hello ");
             </code>
             如果你运行完上面的代码，将发现这和 Console.Write("hello "); 没有一点区别。是的，没有区别，但下面的代码可以见到区别:
            
             <code>
             Logger.Write(new string[]{"hell","o"});   //  hello
             Console.Write(new string[]{"hell","o"});  //  显示数组类型
             </code>
            
             Logger还有类似 Trace 的方法。
            
             Logger.Warm("{0}肯能有问题", v);
            
             </para>
             
             <para>
             Logger只是辅助类，真正实现日志输出功能的类是 LogListener。
            
             LogListener是抽象基类，由子类分别实现各种记录方式。
            
             Logger.Listener 是当前正使用的 LogListener 实例，默认下， Logger在 WinForm 输出到控制台， WebForm 为 Response 实例。
            
             下面代码说明如何创建LogListener然后使用。
            
             <code>
             LogListener log = new ConsoleLogListener();
             log.Write("hello");
             </code>
            
             <list type="bullet">
                 <listheader>系统自带的 LogListener 有:</listheader>
                 <item>ConsoleLogListener    控制台</item>
                 <item>DatabaseLogListener   数据库</item>
                 <item>FileLogListener       文件 (如 .log)  </item>
                 <item>FilterLogListener     用于对日志过滤，然后处理。</item>
                 <item>MultiLogListener      用于对一个日志输出到多个日志输出</item>
                 <item>StreamLogListener     流</item>
                 <item>ResponseLogListener   网际响应</item>
             </list>
             
             </para>
             
             <para>
            
            您可以扩展 LogListener ，以实现不同的目标。
            
            LogListener 类有一个 LoggingStringConverter 的成员。
            
             <list type="number">
                 <listheader> LogListener 接受一个日志请求后做下面这些内容: </listheader>
                 <item>接受用户提交</item>
                 <item>如果用户提交的不是字符， 用 LoggingStringConverter 转为字符串。</item>
                 <item>生成一个 LogEntry 的实例，封装一个日志的内容。</item>
                 <item>使用 Log(LogEntry entry) 写日志，这个函数由子类完成。</item>
             </list>
            
             <list type="number">
                 <listheader>对于需要将日志转为文本再输出(如文件) 时， TextLogListener 提供了基类。 </listheader>
                 <item>TextLogListener 处理 Log(LogEntry entry) 。</item>
                 <item>调用 ConvertLogEntryString(LogEntry entry)。转为字符串。 这个函数默认调用 LoggingStringConverter.ToString() 实现。</item>
                 <item>调用 OnLog(string message) 写日志，这个函数由子类完成。</item>
             </list>
             </para>
             
             
             </remarks>
             <example>
             下面的例子演示如何制作自己的 LogListener ，在日志前添加编号。
             
             最后效果:
            
             <code>
             Logger.Write("a");  // ->  1 a
             Logger.Write("vxx");  // ->  2 vxx
             </code>
            
             方法1:
             
             <code>
             class MyLogListener : ConsoleLogListener{
            
                int _seed = 0;
            
                protected override OnLog(string message){
                    base.OnLog((_seed++).ToString() + message);
                }
            
             }
             
            
                 //下面在程序使用
             Logger.Listener = new MyLogListener();
             Logger.Write("f") ;
             </code>
            
             方法2:
            
             <code>
             class MyLogStringConverter:LoggingStringConverter{
            
                int _seed = 0;
            
                public override string ToString(LogEntry entry){
                    return (_seed++).ToString() + base.ToString(entry);
                }
            
             }
            
            
            
               //下面在程序使用
             Logger.Listener.LoggingStringConverter = new MyLogStringConverter();
             Logger.Write("f") ;
             </code>
             
             </example>
        </member>
        <member name="M:Py.Logging.Logger.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.Logger"/> 的新实例。本构造方法只面向子类。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Indent">
            <summary>
            增加一个缩进。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.UnIndent">
            <summary>
            减小一个缩进。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Close">
            <summary>
            关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Clear(System.DateTime)">
            <summary>
            清除指定时间之前的全部日志。
            </summary>
            <param name="dt">时间。</param>
        </member>
        <member name="M:Py.Logging.Logger.Start">
            <summary>
            记录一个开始信息。不标记。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.Start(System.String)">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.Logger.Start(System.String,System.String[])">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Stop(System.String)">
            <summary>
            记录一个结束信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.Logger.Warn(System.String)">
            <summary>
            记录一个警告。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.WarnIf(System.Boolean,System.String,System.Object[])">
            <summary>
            如果<paramref name="condition"/>等于 true， 记录一个警告。
            </summary>
            <param name="condition">记录的条件。</param>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Warn(System.String,System.Object[])">
            <summary>
            记录一个警告。
            </summary>
            <param name="message">需要记录的内容。</param>\
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Warn(System.Object)">
            <summary>
            记录一个警告。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Error(System.String)">
            <summary>
            记录一个错误。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
            记录一个错误。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Error(System.Object)">
            <summary>
            记录一个错误。
            </summary>
            <param name="value">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Fatal(System.String)">
            <summary>
            记录一个失败记录。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Fatal(System.String,System.Object[])">
            <summary>
            记录一个失败记录。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Info(System.String)">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Debug(System.String)">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Debug(System.Object[])">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Debug(System.Object)">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="value">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Success(System.String)">
            <summary>
            记录一个成功的信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Success(System.String,System.Object[])">
            <summary>
            记录一个成功的信息。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.End">
            <summary>
            记录一个开始信息。不标记。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.End(System.String)">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.Logger.End(System.Object)">
            <summary>
            记录一个结束信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.Logger.Dir(System.Object)">
            <summary>
            遍历一个对象。
            </summary>
            <param name="obj">对象。</param>
        </member>
        <member name="M:Py.Logging.Logger.Write(System.String)">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Write(System.String,System.Object[])">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Write(System.Object)">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Write">
            <summary>
            记录一个回车。
            </summary>
        </member>
        <member name="M:Py.Logging.Logger.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            如果<paramref name="condition"/>等于 true，记录一个文本。
            </summary>
            <param name="condition">输入的条件。</param>
            <param name="message">描述的信息。</param>
            <param name="args">数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(System.String,Py.Logging.LogLevel)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="level">日志的级别。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(System.String,Py.Logging.LogLevel,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="level">日志的级别。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(System.String,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(System.String)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，实现保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(Py.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            记录一个日志。
            </summary>
            <param name="level">日志等级。</param>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.Logger.Log(System.Object,Py.Logging.LogLevel,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="value">需要记录的内容。</param>
            <param name="level">日志的级别。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="P:Py.Logging.Logger.AutoFlush">
            <summary>
            获取或设置是否在每次写入后都在 Py.Logging.Logger.Listener 上调用 Py.Logging.Logger.Flush()。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IndentLevel">
            <summary>
            获取或设置缩进级别。
            </summary>
            <value>缩进级别。默认值为零。</value>
        </member>
        <member name="P:Py.Logging.Logger.IndentSize">
            <summary>
            获取或设置缩进的空格数。
            </summary>
            <value>缩进的空格数。默认值为四。</value>
        </member>
        <member name="P:Py.Logging.Logger.Listerner">
            <summary>
            获取或设置正在使用的侦听器集合。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.UseGlobalLock">
            <summary>
            获取或设置一个值，该值指示是否应当使用全局锁。
            </summary>
            <value>如果要使用全局锁，则为 true；否则为 false。默认为 true。</value>
        </member>
        <member name="P:Py.Logging.Logger.IsErrorEnabled">
            <summary>
            获取或设置是否启用错误记录。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsFatalEnabled">
            <summary>
            获取或设置是否启用失败日志。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsInfoEnabled">
            <summary>
            获取或设置是否启用信息日志。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsWarnEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsSuccessEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsDefaultLogLevelEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.Logger.IsVerboseEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlProcessingInstruction">
            <summary>
            表示一条处理指令，XML 定义该处理指令以将处理器特定的信息保存在文档的文本中。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlCharacterData">
            <summary>
            提供多个类使用的文本操作方法。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlLinkedNode">
            <summary>
            获取紧靠该节点（之前或之后）的节点。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlNode">
            <summary>
            表示 HTML 文档中的单个节点。
            </summary>
        </member>
        <member name="T:Py.Collections.ITreeNode`1">
            <summary>
            表示一个树节点。
            </summary>
            <typeparam name="T">树所带值。</typeparam>
        </member>
        <member name="T:Py.Collections.IEntry">
            <summary>
            表示一个单元。
            </summary>
        </member>
        <member name="P:Py.Collections.IEntry.Name">
            <summary>
            获取单元的名字。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.NodeValue">
            <summary>
            获取或设置当前节点值。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.ParentNode">
            <summary>
            获取当前树父节点。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.NextSibling">
            <summary>
            获取下一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.PreviousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.Depth">
            <summary>
            获取当前节点的深度。
            </summary>
        </member>
        <member name="P:Py.Collections.ITreeNode`1.ChildNodes">
            <summary>
            获取当前节点的子节点。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNode._parentNode">
            <summary>
            当前节点父节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNode.AppendChild(Py.Html.HtmlNode)">
            <summary>
            将指定的节点添加到该节点的子节点列表的末尾。
            </summary>
            <param name="newChild">要添加的节点。将要添加的节点的全部内容移动到指定位置。</param>
            <returns>添加的节点。</returns>
            <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild"/> 节点类型的子节点。<paramref name="newChild"/> 是此节点的上级节点。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newChild"/> 是从不同于创建此节点的文档创建的。该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.InsertAfter(Py.Html.HtmlNode,Py.Html.HtmlNode)">
            <summary>
            将指定的节点紧接着插入指定的引用节点之后。
            </summary>
            <param name="newChild">要插入的 HtmlNode。</param>
            <param name="refChild">HtmlNode，它是引用节点。<paramref name="newChild"/> 放置在 <paramref name="refChild"/> 之后。</param>
            <returns>插入的节点。</returns>
            <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild"/> 节点类型的子节点。<paramref name="newChild"/> 是此节点的上级节点。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newChild"/> 是从不同于创建此节点的文档创建的。<paramref name="refChild"/> 不是此节点的子级。该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.InsertBefore(Py.Html.HtmlNode,Py.Html.HtmlNode)">
            <summary>
            将指定的节点紧接着插入指定的引用节点之前。
            </summary>
            <param name="newChild">要插入的 HtmlNode。</param>
            <param name="refChild">HtmlNode，它是引用节点。<paramref name="newChild"/> 放置在该节点之前。</param>
            <returns>插入的节点。</returns>
            <exception cref="T:System.InvalidOperationException">当前节点的类型不允许 <paramref name="newChild"/> 节点类型的子节点。<paramref name="newChild"/> 是此节点的上级节点。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newChild"/> 是从不同于创建此节点的文档创建的。<paramref name="refChild"/> 不是此节点的子级。该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.PrependChild(Py.Html.HtmlNode)">
            <summary>
            将指定的节点添加到该节点的子节点列表的开头。
            </summary>
            <param name="newChild">要添加的节点。将要添加的节点的全部内容移动到指定位置。</param>
            <returns>添加的节点。</returns>
            <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild"/> 节点类型的子节点。<paramref name="newChild"/> 是此节点的上级节点。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newChild"/> 是从不同于创建此节点的文档创建的。该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.RemoveAll">
            <summary>
            移除当前节点的所有子节点和/或属性。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNode.RemoveChild(Py.Html.HtmlNode)">
            <summary>
            移除指定的子节点。
            </summary>
            <param name="oldChild">正在被移除的节点。</param>
            <returns>已移除的节点。</returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="oldChild"/> 不是此节点的子级。或者此节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.ReplaceChild(Py.Html.HtmlNode,Py.Html.HtmlNode)">
            <summary>
            用 <paramref name="newChild"/> 节点替换子节点 <paramref name="oldChild"/>。
            </summary>
            <param name="newChild">要放入子列表的新节点。</param>
            <param name="oldChild">列表中正在被替换的节点。</param>
            <returns>被替换的节点。</returns>
            <exception cref="T:System.InvalidOperationException">此节点的类型不允许 <paramref name="newChild"/> 节点类型的子节点。<paramref name="newChild"/> 是此节点的上级节点。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newChild"/> 是从不同于创建此节点的文档创建的。该节点是只读的。<paramref name="oldChild"/> 不是此节点的子级。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.Clone">
            <summary>
            创建此节点的一个副本。
            </summary>
            <returns>克隆的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlNode.CloneNode">
            <summary>
            当在派生类中被重写时，创建该节点的副本。
            </summary>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.CloneNode(System.Boolean)">
            <summary>
            当在派生类中被重写时，创建该节点的副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlNode.GetNamespaceOfPrefix(System.String)">
            <summary>
            查找当前节点范围内离给定的前缀最近的 xmlns 声明，并返回声明中的命名空间 URI。
            </summary>
            <param name="prefix">前缀（要查找它的命名空间 URI）。</param>
            <returns>指定前缀的命名空间 URI。</returns>
        </member>
        <member name="M:Py.Html.HtmlNode.isSupported">
            <summary>
            获取一个值，指示当前节点是否被支持。
            </summary>
            <returns>目标版本的 Py.Html 对全部节点返回 true 。</returns>
        </member>
        <member name="M:Py.Html.HtmlNode.GetPrefixOfNamespace(System.String)">
            <summary>
            查找当前节点范围内离给定的命名空间 URI 最近的 xmlns 声明，并返回声明中定义的前缀。
            </summary>
            <returns>指定命名空间 URI 的前缀。</returns>
            <param name="namespaceURI">要查找其前缀的命名空间 URI。</param>
        </member>
        <member name="M:Py.Html.HtmlNode.LookupNamespaceURI">
            <summary>
            查找当前节点范围内离此节点命名空间 URI 最近的 xmlns 声明，并返回声明中定义的前缀。
            </summary>
            <returns>指定命名空间 URI 的前缀。</returns>
        </member>
        <member name="M:Py.Html.HtmlNode.LookupPrefix">
            <summary>
            查找当前节点范围内离此节点命名空间 URI 最近的 xmlns 声明，并返回声明中定义的前缀。
            </summary>
            <returns>指定命名空间 URI 的前缀。</returns>
        </member>
        <member name="M:Py.Html.HtmlNode.GetEnumerator">
            <summary>
            提供对 HtmlNode 中节点上“for each”样式迭代的支持。
            </summary>
            <returns>
            一个 <see cref="T:System.Collections.IEnumerator"/>。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            有关此成员的说明，请参见 <see cref="M:Py.Html.HtmlNode.GetEnumerator" />。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNode.System#ICloneable#Clone">
            <summary>有关此成员的说明，请参见 <see cref="M:Py.Html.HtmlNode.Clone" />。</summary>
        </member>
        <member name="M:Py.Html.HtmlNode.Normalize">
            <summary>
            将此 HtmlNode 下子树完全深度中的所有 HtmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 HtmlText 节点，也就是说，没有相邻的 HtmlText 节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNode.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>当在派生类中被重写时，该节点的所有子节点会保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。</summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlNode.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>当在派生类中被重写时，将当前节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。</summary>
            <param name="w">要保存到的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlNode.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlNode.Attributes">
            <summary>
            获取一个 <see cref="T:Py.Html.HtmlAttributeCollection" />，它包含该节点的属性。
            </summary>
            <returns>一个 HtmlAttributeCollection，它包含该节点的属性。如果节点为 HtmlNodeType.Element 类型，则返回该节点的属性。否则，该属性将返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.BaseURI">
            <summary>
            获取当前节点的基 URI。
            </summary>
            <returns>从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.ChildNodes">
            <summary>
            获取节点的所有子节点。
            </summary>
            <returns>一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含节点的所有子节点。如果没有子节点，该属性返回空 <see cref="T:Py.Html.HtmlNodeList" />。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.FirstChild">
            <summary>
            获取节点的第一个子级。
            </summary>
            <returns>节点的第一个子级。如果没有这样的节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.HasChildNodes">
            <summary>
            获取一个值，该值指示节点是否有任何子节点。
            </summary>
            <returns>
            如果节点具有子节点，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.InnerText">
            <summary>
            获取或设置节点及其所有子节点的串联值。
            </summary>
            <returns>节点及其所有子节点的串联值。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.InnerHtml">
            <summary>
            获取或设置仅代表该节点的子节点的标记。
            </summary>
            <returns>该节点的子节点的标记。说明：InnerHtml 不返回默认属性。</returns>
            <exception cref="T:System.InvalidOperationException">在不能具有子节点的节点上设置该属性。</exception>
            <exception cref="T:Py.Html.HtmlException">设置此属性时指定的 HTML 的格式不合式。</exception>
        </member>
        <member name="P:Py.Html.HtmlNode.IsReadOnly">
            <summary>
            获取一个值，该值指示节点是否是只读的。
            </summary>
            <returns>如果节点是只读的，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.Value">
            <summary>
            获取或设置当前节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.Item(System.String)">
            <summary>
            获取具有指定 <see cref="P:Py.Html.HtmlNode.Name" /> 的第一个子元素。
            </summary>
            <returns>与指定名称匹配的第一个 <see cref="T:Py.Html.HtmlElement" />。</returns>
            <param name="name">要检索的元素的限定名。</param>
        </member>
        <member name="P:Py.Html.HtmlNode.Item(System.String,System.String)">
            <summary>
            获取具有指定 <see cref="P:Py.Html.HtmlNode.LocalName" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的第一个子元素。
            </summary>
            <returns>具有匹配的 <paramref name="localname" /> 和 <paramref name="ns" /> 的第一个 <see cref="T:Py.Html.HtmlElement" />。</returns>
            <param name="localname">元素的本地名称。</param>
            <param name="ns">元素的命名空间 URI。</param>
        </member>
        <member name="P:Py.Html.HtmlNode.LastChild">
            <summary>
            获取节点的最后一个子级。
            </summary>
            <returns>节点的最后一个子级。如果没有这样的节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.LastNode">
            <summary>
            获取节点的最后一个子级。
            </summary>
            <returns>节点的最后一个子级。如果没有这样的节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.LocalName">
            <summary>
            当在派生类中被重写时，获取节点的本地名称。
            </summary>
            <returns>移除了前缀的节点的名称。例如，对于元素 &lt;bk:book&gt;，LocalName 是 book。返回的名称取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType" />： 类型 名称 属性 属性的本地名称。CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType 文档类型名称。Element 元素的本地名称。Entity 实体的名称。EntityReference 引用的实体的名称。Notation 表示法名称。ProcessingInstruction 处理指令的目标。Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
        </member>
        <member name="P:Py.Html.HtmlNode.NodeName">
            <summary>
            当在派生类中被重写时，获取节点的限定名。
            </summary>
            <returns>节点的限定名。返回的名称取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType" />： 类型 名称 属性 属性的限定名。CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType 文档类型名称。Element 元素的限定名。Entity 实体的名称。EntityReference 引用的实体的名称。Notation 表示法名称。ProcessingInstruction 处理指令的目标。Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
        </member>
        <member name="P:Py.Html.HtmlNode.Py#Collections#IEntry#Name">
            <summary>
            获取单元的名字。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.NamespaceURI">
            <summary>
            获取该节点的命名空间 URI。
            </summary>
            <returns>该节点的命名空间 URI。如果没有命名空间 URI，则此属性返回 String.Empty。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.NextSibling">
            <summary>
            获取紧接在该节点之后的节点。
            </summary>
            <returns>下一个 HtmlNode。如果没有下一个节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.NodeType">
            <summary>
            当在派生类中被重写时，获取当前节点的类型。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeType" /> 值之一。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.OuterHtml">
            <summary>
            获取表示此节点及其所有子节点的标记。
            </summary>
            <returns>包含此节点及其所有子节点的标记。说明：OuterHtml 不返回默认属性。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.OwnerDocument">
            <summary>
            获取该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。如果该节点是一个 <see cref="T:Py.Html.HtmlDocument" />（NodeType 等于 HtmlNodeType.Document），则此属性返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.ParentNode">
            <summary>
            获取该节点（对于可以具有父级的节点）的父级。
            </summary>
            <returns>为当前节点父级的 HtmlNode。如果节点刚刚创建还未添加到树中，或如果已从树中移除了节点，则父级为 null。对于所有其他节点，返回的值取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType" />。下表描述 ParentNode 属性可能的返回值。NodeType ParentNode 的返回值 Attribute、Document、DocumentFragment、Entity、Notation 返回 null；这些节点不具有父级。CDATA 返回包含 CDATA 节的元素或实体引用。Comment 返回包含注释的元素、实体引用、文档类型或文档。DocumentType 返回文档节点。Element 返回该元素的父节点。如果该元素是树中的根节点，则父级是文档节点。EntityReference 返回包含该实体引用的元素、属性或实体引用。ProcessingInstruction 返回包含该处理指令的文档、元素、文档类型或实体引用。Text 返回包含该文本节点的父元素、属性或实体引用。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.Prefix">
            <summary>
            获取或设置该节点的命名空间前缀。
            </summary>
            <returns>该节点的命名空间前缀。例如，对于元素 &lt;bk:book&gt;，Prefix 是 bk。如果没有前缀，则该属性返回 null。</returns>
            <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
            <exception cref="T:Py.Html.HtmlException">指定的前缀包含无效字符。</exception>
        </member>
        <member name="P:Py.Html.HtmlNode.PreviousSibling">
            <summary>
            获取紧接在该节点之前的节点。
            </summary>
            <returns>前一个 HtmlNode。如果前面没有节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNode.NodeValue">
            <summary>
            获取或设置节点的值。
            </summary>
            <returns>返回的值取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType" />。类型 值 属性 属性值。CDATASection CDATA 节的内容。Comment 注释的内容。Document null. DocumentFragment null. DocumentType null. Element null。可使用 <see cref="P:Py.Html.HtmlElement.InnerText" /> 或 <see cref="P:Py.Html.HtmlElement.InnerHtml" /> 属性访问元素节点的值。Entity null. EntityReference null. Notation null. ProcessingInstruction 全部内容（不包括指令目标）。Text 文本节点的内容。SignificantWhitespace 空白字符。空白可由一个或多个空格字符、回车符、换行符或制表符组成。Whitespace 空白字符。空白可由一个或多个空格字符、回车符、换行符或制表符组成。 XmlDeclaration 声明的内容（即在 &lt;?xml 和 ?&gt; 之间的所有内容）。</returns>
            <exception cref="T:System.ArgumentException">设置只读节点的值。</exception>
            <exception cref="T:System.InvalidOperationException">设置不允许具有值的节点（例如 Element 节点）的值。</exception>
        </member>
        <member name="P:Py.Html.HtmlNode.Py#Collections#ITreeNode{System#String}#ParentNode">
            <summary>
            获取当前树父节点。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.Depth">
            <summary>
            获取当前节点的深度。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.Py#Collections#ITreeNode{System#String}#ChildNodes">
            <summary>
            获取当前节点的子节点。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.Py#Collections#ITreeNode{System#String}#NextSibling">
            <summary>
            获取下一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNode.Py#Collections#ITreeNode{System#String}#PreviousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlLinkedNode._next">
            <summary>
            下一个节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlLinkedNode.#ctor">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlLinkedNode"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlLinkedNode.#ctor(Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlLinkedNode"/> 的新实例。
            </summary>
            <param name="doc">文档。</param>
        </member>
        <member name="P:Py.Html.HtmlLinkedNode.NextSibling">
            <summary>
            获取紧接在该节点之后的节点。
            </summary>
            <returns>紧随该节点之后的 <see cref="T:Py.Html.HtmlNode" />，或者如果不存在，则为 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlLinkedNode.PreviousSibling">
            <summary>
            获取紧接在该节点之前的节点。
            </summary>
            <returns>前面的 <see cref="T:Py.Html.HtmlNode" />，如果不存在，则为 null。</returns>
        </member>
        <member name="F:Py.Html.HtmlCharacterData._data">
            <summary>
            文本。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.#ctor(System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlCharacterData"/> 类的新实例。
            </summary>
            <param name="data">要操作的字符串。</param>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.AppendData(System.String)">
            <summary>
            将指定的字符串追加到节点的字符数据的结尾。
            </summary>
            <param name="strData">要插入现有字符串的字符串。</param>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.DeleteData(System.Int32,System.Int32)">
            <summary>
            从节点移除一组字符。
            </summary>
            <param name="offset">字符串中开始进行删除的位置。 </param>
            <param name="count">要删除的字符数。 </param>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.InsertData(System.Int32,System.String)">
            <summary>
            从指定的字符偏移量开始插入指定的字符串。
            </summary>
            <param name="offset">字符串中插入所提供字符串数据的位置。 </param>
            <param name="strData">要插入现有字符串的字符串数据。 </param>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
            <summary>
            从指定的偏移量开始用指定的字符串替换指定数目的字符。
            </summary>
            <param name="offset">字符串中要开始替换的位置。</param>
            <param name="count">要替换的字符数。</param>
            <param name="strData">替换旧字符串数据的新数据。</param>
        </member>
        <member name="M:Py.Html.HtmlCharacterData.Substring(System.Int32,System.Int32)">
            <summary>
            在指定的范围内检索完整字符串的子字符串。
            </summary>
            <param name="offset">字符串中开始检索的位置。偏移量为零指示起始点在数据的开始处。</param>
            <param name="count">要检索的字符数。</param>
            <returns>对应于指定范围的子字符串。</returns>
        </member>
        <member name="P:Py.Html.HtmlCharacterData.Data">
            <summary>
            包含节点的数据。
            </summary>
            <returns>节点的数据。</returns>
        </member>
        <member name="P:Py.Html.HtmlCharacterData.InnerText">
            <summary>获取或设置节点及该节点所有子级的串联值。</summary>
            <returns>节点及该节点所有子级的串联值。</returns>
        </member>
        <member name="P:Py.Html.HtmlCharacterData.Length">
            <summary>获取数据的长度（以字符为单位）。</summary>
            <returns>
            <see cref="P:Py.Html.HtmlCharacterData.Data" /> 属性中字符串的长度（以字符为单位）。长度可能为零；也就是说 CharacterData 节点可能是空的。</returns>
        </member>
        <member name="P:Py.Html.HtmlCharacterData.NodeValue">
            <summary>获取或设置节点的值。</summary>
            <returns>节点的值。</returns>
            <exception cref="T:System.ArgumentException">节点是只读的。 </exception>
        </member>
        <member name="F:Py.Html.HtmlProcessingInstruction._name">
            <summary>
            名字。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlProcessingInstruction.CloneNode(System.Boolean)">
            <summary>
            当在派生类中被重写时，创建该节点的副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlProcessingInstruction.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            当在派生类中被重写时，该节点的所有子节点会保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlProcessingInstruction.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            当在派生类中被重写时，将当前节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlProcessingInstruction.LocalName">
            <summary>
            当在派生类中被重写时，获取节点的本地名称。
            </summary>
            <value></value>
            <returns>移除了前缀的节点的名称。例如，对于元素 &lt;bk:book&gt;，LocalName 是 book。返回的名称取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType"/>： 类型 名称 属性 属性的本地名称。CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType 文档类型名称。Element 元素的本地名称。Entity 实体的名称。EntityReference 引用的实体的名称。Notation 表示法名称。ProcessingInstruction 处理指令的目标。Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
        </member>
        <member name="P:Py.Html.HtmlProcessingInstruction.NodeName">
            <summary>
            当在派生类中被重写时，获取节点的限定名。
            </summary>
            <value></value>
            <returns>节点的限定名。返回的名称取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType"/>： 类型 名称 属性 属性的限定名。CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType 文档类型名称。Element 元素的限定名。Entity 实体的名称。EntityReference 引用的实体的名称。Notation 表示法名称。ProcessingInstruction 处理指令的目标。Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
        </member>
        <member name="P:Py.Html.HtmlProcessingInstruction.NodeType">
            <summary>
            当在派生类中被重写时，获取当前节点的类型。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeType"/> 值之一。</returns>
        </member>
        <member name="T:Py.Core.TimeHelper">
            <summary>
            对 DateTime 和 TimeSpan 类提供函数。
            </summary>
        </member>
        <member name="M:Py.Core.TimeHelper.IsMidnightExactly(System.TimeSpan)">
            <summary>
            判断时间是否在午夜。
            </summary>
            <param name="t">时间。</param>
            <returns>
            	如果是午夜，返回<c>true</c>，否则，返回 <c>false</c>.
            </returns>
        </member>
        <member name="M:Py.Core.TimeHelper.ToMilitaryString(System.TimeSpan)">
            <summary>
            转为字符串。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Core.TimeHelper.ToMilitaryInt(System.TimeSpan)">
            <summary>
            转整数。
            </summary>
            <param name="t">时间。</param>
            <returns>整数。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.OwnedDictionary`3">
            <summary>
            为所有键/值的集合提供基类。
            </summary>
            <typeparam name="TOwner">所有者。</typeparam>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0)">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IDictionary{`1,`2})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IDictionary{`1,`2},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="dictionary">集合。</param>
            <param name="comparer">键比较的比较工具。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">初始化容器的大小。</param>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedDictionary`3.#ctor(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="P:Py.Collections.ObjectModel.OwnedDictionary`3.Owner">
            <summary>
            获取或设置当前的所有者。
            </summary>
        </member>
        <member name="T:Py.Algorithm.Sorter">
            <summary>
            包含对集合的排序算法。
            </summary>
            <remarks>
            <para>
            提供的排序标准参数  IList list,  int start,  int  end,   Comparion cmp。<br />
            其中 list 为要排序的列表， start为开始排序的位置， end为结束的位置， cmp是用于比较的方法。
            </para>
            
            <para>
            <list type="bullet">
                <listheader>注意:</listheader>
                <item>列表不一定是 System.Collection 中的结构，所有实现 IList 的类都可使用本类完成排序。由于数组实现了IList， 因此数组可以直接作为参数，不用任何转换。</item>
                <item>start 是闭区间，  end为开区间。 即在 [strat, end) 应用排序。  如对一个数组 a 排序。  start = 0,  end = a.Length // 不需要减 1 。</item>
                <item>cmp 如果为 null 。将抛出异常， 如果需要默认排序，请留空。</item>
            </list>
            </para>
            </remarks>
            <example>
            以下代码演示了使用冒泡排序进行对数组元素的排序。
            <code>
            using Py.Algorithm;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    int[] array = new int[]{2,4,2,1,3,3};
                    Sorter.BubbleSort(array);   //  array = [1,2,2,3,3,4]
                    Logger.Write(array);
                }
                
            }
            </code>
            </example>
        </member>
        <member name="M:Py.Algorithm.Sorter.DefaultCompare(System.Int32,System.Int32)">
            <summary>
            定义比较。
            </summary>
            <param name="x">要比较的第一个对象。</param>
            <param name="y">要比较的第二个对象。</param>
            <returns>小于 0，x 小于 y。0，x 等于 y。大于0，x 大于 y。</returns>
        </member>
        <member name="M:Py.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SelectSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            选择排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SelectSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            选择排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SelectSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            选择排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SelectSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            选择排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SelectSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            选择排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.InsertSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            插入排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.InsertSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            插入排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.InsertSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            插入排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.InsertSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            插入排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.InsertSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            插入排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.QuickSortInternal``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
        </member>
        <member name="M:Py.Algorithm.Sorter.CountSort(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            计数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.CountSort(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            计数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.CountSort(System.Collections.Generic.IList{System.Int32})">
            <summary>
            计数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.CountSort(System.Collections.Generic.IList{System.Int32},System.Comparison{System.Int32})">
            <summary>
            计数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.CountSort(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Comparison{System.Int32})">
            <summary>
            计数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.ShellSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            希尔排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.ShellSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            希尔排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.ShellSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            希尔排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.ShellSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            希尔排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.ShellSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            希尔排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.HeapSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            堆排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.HeapSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            堆排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.HeapSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            堆排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.HeapSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            堆排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.HeapSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            堆排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.MergeSortInternal``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            归并排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
        </member>
        <member name="M:Py.Algorithm.Sorter.BucketSort(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            基数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BucketSort(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            基数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BucketSort(System.Collections.Generic.IList{System.Int32})">
            <summary>
            基数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.BucketSort(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32,System.Comparison{System.Int32})">
            <summary>
            基数排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0},Py.Algorithm.Sorter.Algorithm{``0})">
            <summary>
            排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <param name="sorter">排序算法。如果不需排序，留空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0},Py.Algorithm.Sorter.Algorithm{``0})">
            <summary>
            排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <param name="sorter">排序算法。如果不需排序，留空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},Py.Algorithm.Sorter.Algorithm{``0})">
            <summary>
            排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="sorter">排序算法。如果不需排序，留空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,Py.Algorithm.Sorter.Algorithm{``0})">
            <summary>
            排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="sorter">排序算法。如果不需排序，留空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},Py.Algorithm.Sorter.Algorithm{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="sorter">排序的算法。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},Py.Algorithm.Sorter.Algorithm{``0},System.Comparison{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <param name="sorter">排序的算法。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="T:Py.Algorithm.Sorter.Algorithm`1">
            <summary>
            代表一个排序方法。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="T:Py.Zip.ZipEntry">
            <summary>
            表示Zip文件中的一文件单元。
            </summary>
            <summary>
            表示Zip文件中的一文件单元。
            </summary>
        </member>
        <member name="T:Py.Zip.ZippedEntry">
            <summary>
            为所有的压缩单元提供抽象基类。
            </summary>
        </member>
        <member name="F:Py.Zip.ZippedEntry.Pname">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:Py.Zip.ZippedEntry._isDirectory">
            <summary>
            是否文件夹。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Extract">
            <summary>
            解压当前文件。
            </summary>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Extract(Py.Core.OverwriteType)">
            <summary>
            解压当前单元。
            </summary>
            <param name="overwrite">覆盖方式。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Extract(System.IO.Stream)">
            <summary>
            解压当前单元。
            </summary>
            <param name="stream">流。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Extract(System.String)">
             <summary>
             解压当前单元。
             </summary>
            
             <param name="baseDirectory">跟文件夹。</param>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files,
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Extract(System.String,Py.Core.OverwriteType)">
             <summary>
             解压文件。
             </summary>
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
            
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">父文件夹。</param>
             <param name="overwrite">覆盖方式。</param>
             <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractWithPassword(System.String)">
            <summary>
            解压文件。
            </summary>
            <example>
            <code>
            using (var zip = ZipFile.Read(FilePath))
            {
                foreach (ZipEntry e in zip)
                {
                    if (e.UsesEncryption)
                        e.ExtractWithPassword("Secret!");
                    else
                        e.Extract();
                }
            }
            </code>
            <code lang="VB">
            Using zip As ZipFile = ZipFile.Read(FilePath)
                Dim e As ZipEntry
                For Each e In zip
                    If (e.UsesEncryption)
                      e.ExtractWithPassword("Secret!")
                    Else
                      e.Extract
                    End If
                Next
            End Using
            </code>
            </example>
            <param name="password">密码。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractWithPassword(System.String,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="baseDirectory">父文件夹。</param>
            <param name="password">密码。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractWithPassword(Py.Core.OverwriteType,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="password">密码。</param>
            <param name="overwrite">文件的覆盖方式。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractWithPassword(System.String,Py.Core.OverwriteType,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="baseDirectory">父文件夹。</param>
            <param name="overwrite">文件的覆盖方式。</param>
            <param name="password">密码。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractWithPassword(System.IO.Stream,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="stream">文件流。</param>
            <param name="password">密码。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ExtractInternal(System.String,System.IO.Stream,Py.Core.OverwriteType,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="baseDir">解压目标的文件夹。</param>
            <param name="output">输出流。</param>
            <param name="overwrite">文件覆盖方式。</param>
            <param name="password">密码。可以空。</param>
            <returns>解压后生成的文件位置。</returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Write(System.IO.Stream)">
            <summary>
            将当前单元写入流。
            </summary>
            <param name="s">要写的流。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedEntry.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Zip.ZippedEntry.Equals(Py.Zip.ZippedEntry)">
            <summary>
            比较当前实例是否和另一个实例名字相同 。
            </summary>
            <param name="other">另一个实例。</param>
            <returns>相同则 true ， 否则 false。</returns>
        </member>
        <member name="P:Py.Zip.ZippedEntry.ExternalFileAttrs">
            <summary>
            寄存器的文件属性。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.IsDirectory">
            <summary>
            获取当前单元是否是文件夹。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.Name">
            <summary>
            获取或设置保存的文件名(包括路径)。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.Password">
            <summary>
            设置单元密码。
            </summary>
            <seealso cref="P:Py.Zip.ZipEntry.Encryption"/>
            <seealso cref="P:Py.Zip.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:Py.Zip.ZippedEntry.Attributes">
            <summary>
            获取或设置当前单元的文件属性。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.Encoding">
            <summary>
            获取或设置可选编码。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.Platform">
            <summary>
            获取或设置当前单元的平台。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.UncompressedSize">
            <summary>
            获取压缩后的大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.CompressedSize">
            <summary>
            获取压缩的大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedEntry.CompressionRatio">
            <summary>
            获取压缩率。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry.PackedToRemovableMedia">
            <summary>
            无媒体。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.ReadHeader">
            <summary>
            读取 ZIP 块的头部。
            </summary>
            <returns>读取完成返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.ReadWeakEncryptionHeader(System.IO.Stream,System.Byte[])">
            <summary>
            读取加密的文件头。不处理数据。
            </summary>
            <param name="s"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.ReadEntry(Py.Zip.ZipFile,System.Int32)">
            <summary>
            从zip文件读取指定的单元，并返回这个单元。
            </summary>
            <param name="zf">读取的文件。</param>
            <param name="i">读取的个数。</param>
            <returns> <c>ZipEntry</c> 类。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.CopyThroughOneEntry(System.IO.Stream)">
            <summary>
            拷贝一个 ZIP 文件的一个单元数据到一个流。
            </summary>
            <param name="outstream"></param>
            <remarks>
            近简单的拷贝，如果文件头修改了，则必须重新生成文件头并放入流。
            </remarks>
        </member>
        <member name="M:Py.Zip.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16,System.Int32)">
            <summary>
            处理扩展头。
            </summary>
            <param name="s">流。</param>
            <param name="extraFieldLength">扩展长度。</param>
            <param name="readExtraDepth">读取扩展头的深度。</param>
            <returns>处理的字节大小。</returns>
        </member>
        <member name="F:Py.Zip.ZipEntry._lastModified">
            <summary>
            最后修改时间。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._mTime">
            <summary>
            修改时间。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._aTime">
            <summary>
            最后读取时间。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._cTime">
            <summary>
            创建时间。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._versionNeeded">
            <summary>
            最小的版本。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._compressionMethodFromZipFile">
            <summary>
            从文件取的压缩方式。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._compressionLevel">
            <summary>
            压缩的等级。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._comment">
            <summary>
            评论内容。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._crc32">
            <summary>
            循环码。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._metadataChanged">
            <summary>
            元数据是否修改。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._skippedDuringSave">
            <summary>
            是否在保存时被忽略。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._diskNumber">
            <summary>
            磁盘大小。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._fileDataPosition">
            <summary>
            文件数据位置。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._lengthOfHeader">
            <summary>
            文件头长度。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._encryption">
            <summary>
            加密算法。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._encryptionFromZipFile">
            <summary>
            Zip文件的加密算法。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._archiveStream">
            <summary>
            存档流。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._usesZip64">
            <summary>
            是否需要Zip64。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._timestamp">
            <summary>
            时间戳。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._unixEpoch">
            <summary>
            Unix的计时。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._win32Epoch">
            <summary>
            win32的计时。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._zeroHour">
            <summary>
            零时间。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._method">
            <summary>
            压缩方式。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntry._versionMadeBy">
            <summary>
            制作版本。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.#ctor(Py.Zip.ZipFile,System.String)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。本构造函数内部使用。
            </summary>
            <param name="name">名字。</param>
            <param name="file">所有者。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
             设置NTFS文件修改创建读取时间。
             </summary>
             <param name="created">创建时间。</param>
             <param name="accessed">最后读取时间。</param>
             <param name="modified">最后修改时间。</param>
            
             <seealso cref="P:Py.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:Py.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:Py.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="M:Py.Zip.ZipEntry.SetFdpLoh">
            <summary>
            设置文件信息长度。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.GetKeyStrengthInBits(Py.Zip.ZipEntryEncryptionAlgorithm)">
            <summary>
            读取指定算法的键长。
            </summary>
            <param name="a">算法。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.GetLengthOfCryptoHeaderBytes(Py.Zip.ZipEntryEncryptionAlgorithm)">
            <summary>
            返回加密算法的加密首长度。
            </summary>
            <param name="a">算法。</param>
            <returns>长度。</returns>
            <exception cref="T:Py.Zip.ZipException">内部错误。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.OpenReader">
            <summary>
            打开一个文件流用于读取。
            </summary>
            <example>
            <code>
            using (ZipFile zip = new ZipFile(ZipFileToRead))
            {
              ZipEntry e1= zip["Elevation.mp3"];
              using (Py.Zip.Zlib.CrcCalculatorStream s = e1.OpenReader())
              {
                byte[] buffer = new byte[4096];
                int n, totalBytesRead= 0;
                do {
                  n = s.Read(buffer,0, buffer.Length);
                  totalBytesRead+=n;
                } while (n&gt;0);
                 if (s.Crc32 != e1.Crc32)
                  throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                 if (totalBytesRead != e1.UncompressedSize)
                  throw new Exception(string.Format("We read an Unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
              }
            }
            </code>
            <code lang="VB">
              Using zip As New ZipFile(ZipFileToRead)
                  Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                  Using s As Py.Zip.Zlib.CrcCalculatorStream = e1.OpenReader
                      Dim n As Integer
                      Dim buffer As Byte() = New Byte(4096) {}
                      Dim totalBytesRead As Integer = 0
                      Do
                          n = s.Read(buffer, 0, buffer.Length)
                          totalBytesRead = (totalBytesRead + n)
                      Loop While (n &gt; 0)
                      If (s.Crc32 &lt;&gt; e1.Crc32) Then
                          Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                      End If
                      If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                          Throw New Exception(String.Format("We read an Unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                      End If
                  End Using
              End Using
            </code>
            </example>
            <returns>用于读取的流。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.OpenReader(System.String)">
            <summary>
            打开一个文件流用于读取。
            </summary>
            <param name="password">密码。</param>
            <returns>用于读取的流。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.OnExtract(System.IO.Stream,System.String)">
            <summary>
            解压。
            </summary>
            <param name="output">目标流。</param>
            <param name="password">解压密码。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.ExtractInternal(System.String,System.IO.Stream,Py.Core.OverwriteType,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="baseDir">源文件夹。</param>
            <param name="output">输出流。</param>
            <param name="overwrite">覆盖方式。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.SetFileAccessTime(System.String)">
            <summary>
            设置文件的时间。
            </summary>
            <param name="targetFile">文件路径。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.GetExtractDecompressor(System.IO.Stream)">
            <summary>
            获取用于解压流的 Py.Zip.Zlib.DeflateStream 实例。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.SetDirectoryTime(System.String)">
            <summary>
            设置文件夹的时间。
            </summary>
            <param name="folder">文件夹位置。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.ValidateCompression">
            <summary>
            检查压缩。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.ValidateOutput(System.String,Py.Core.OverwriteType,System.String@)">
            <summary>
            检查参数。
            </summary>
            <remarks>
             {baseDir, outStream} 可以为非null。
            如果 baseDir 为 非null, 输出文件会被创建。
            </remarks>
        </member>
        <member name="M:Py.Zip.ZipEntry.ReadDirEntry(Py.Zip.ZipFile)">
            <summary>
            读取一个 文件夹 单元。
            </summary>
            <param name="zf">
            The zipfile for which a directory entry will be read.  From this param, the
            method gets the ReadStream and the expected text encoding
            (ProvisionalAlternateEncoding) which is used if the entry is not marked
            UTF-8.
            </param>
            <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.ConstructExtraField(System.Boolean,System.Boolean)">
            <summary>
            生成文件头。
            </summary>
            <param name="forCentralDirectory">是否在中心文件夹。</param>
            <param name="presumeZip64">是否允许使用 zip64 。</param>
            <returns>文件头。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.FigureCompressionMethodForWriting(System.Int32)">
            <summary>
            设置压缩方法。
            </summary>
            <param name="cycle">循环。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.WriteHeader(System.IO.Stream,System.Int32)">
            <summary>
            写入头。
            </summary>
            <param name="s">流。</param>
            <param name="cycle">循环位数。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.WriteHeader(System.IO.Stream,System.Int32,System.Byte[]@,System.Int32@)">
            <summary>
            写入文件单元文件头。
            </summary>
            <param name="s">流。</param>
            <param name="cycle">循环位数。</param>
            <param name="bytes">文件头字节。</param>
            <param name="i">字节的长度。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.ReadWithRetry(System.IO.Stream,System.Byte[])">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them.
            </remarks>
        </member>
        <member name="M:Py.Zip.ZipEntry.Write(System.IO.Stream)">
            <summary>
            将当前单元写入流。
            </summary>
            <param name="s">要写的流。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.CloseWrite(System.IO.Stream)">
            <summary>
            关闭写入流。
            </summary>
            <param name="input">流。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.WriteInternal(System.IO.Stream,Py.Algorithm.Crc32.CrcCalculatorStream,System.Int64)">
            <summary>
            写入当前内容到流。
            </summary>
            <param name="input">输入流。</param>
            <param name="output">输出流。</param>
            <param name="fileLength">文件大小。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
            设置并返回输入流和长度。
            </summary>
            <param name="input">输入的流。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.FigureCrc32">
            <summary>
            设置当前的 CRC32 。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.WantReadAgain">
            <summary>
            返回是否需要重新读单元。
            </summary>
            <returns>布尔。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.StoreRelativeOffset">
            <summary>
            存储偏移。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.NtfsTimesAreSet">
            <summary>
            获取或设置是否设NTFS虚拟目录。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.CompressionMethodFromZipFile">
            <summary>
            获取或设置压缩方式。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.CompressedFileDataSize">
            <summary>
            压缩后文件的大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.TimeBlob">
            <summary>
            时间点。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.RestreamRequiredOnSave">
            <summary>
            保存时是否需要原流。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipFile">
            <summary>
            获取包含当前单元的文件。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.RelativeOffsetOfLocalHeader">
            <summary>
            本地偏移。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.TotalEntrySize">
            <summary>
            总大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.LengthOfTrailer">
            <summary>
            获取或设置跟踪者长度。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.InputUsesZip64">
            <summary>
            是否使用Zip64输入。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.EncryptionFromZipFile">
            <summary>
            获取来自 Zip 文件的加密算法。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WeakEncryptionHeader">
            <summary>
            加密算法头。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.UsesZip64">
            <summary>
            获取或设置是否需要使用 Zip64。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.LastModifiedTime">
            <summary>
            获取或设置最后修改的时间。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.ModifiedTime">
            <summary>
            获取或设置修改时间。
            </summary>
            <seealso cref="P:Py.Zip.ZipEntry.AccessedTime"/>
            <seealso cref="P:Py.Zip.ZipEntry.CreationTime"/>
            <seealso cref="M:Py.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Py.Zip.ZipEntry.AccessedTime">
            <summary>
            获取或设置最后读取时间。
            </summary>
            <seealso cref="P:Py.Zip.ZipEntry.ModifiedTime"/>
            <seealso cref="P:Py.Zip.ZipEntry.CreationTime"/>
            <seealso cref="M:Py.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Py.Zip.ZipEntry.CreationTime">
             <summary>
             获取或设置创建时间。
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:Py.Zip.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:Py.Zip.ZipEntry.ModifiedTime"/>
             <seealso cref="P:Py.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="M:Py.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:Py.Zip.ZipEntry.Timestamp">
            <summary>
            获得时间戳的类型。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.Attributes">
            <summary>
            获取指定信息的文件属性。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.Name">
            <summary>
            获取或设置保存的文件名(包括路径)。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.VersionNeeded">
             <summary>
             获取当前文件版本。
             </summary>
            
             <remarks>
            
             <list type="table">
             <listheader>
             <term>值</term>
             <description>特征</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>基本
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>ZIP64
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description>BZIP2</description>
             </item>
            
             <item>
             <term>50</term>
             <description>PkWare's DES, 3DES</description>
             </item>
            
             <item>
             <term>51</term>
             <description>PKWare's AES, RC2</description>
             </item>
            
             <item>
             <term>52</term>
             <description>RC2-64</description>
             </item>
            
             <item>
             <term>61</term>
             <description>non-OAEP</description>
             </item>
            
             <item>
             <term>63</term>
             <description>LZMA, PPMd+, Blowfish 或 Twofish</description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="P:Py.Zip.ZipEntry.Comment">
            <summary>
            当前文件单元的注释。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.BitField">
            <summary>
            获取位段。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.CompressionMethod">
             <summary>
             获取压缩方式。
             </summary>
             <seealso cref="P:Py.Zip.ZipEntry.CompressionMethod"/>
             <example>
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = CompressionMethod.None;
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = CompressionMethod.None
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:Py.Zip.ZipEntry.CompressionLevel">
            <summary>
            获取或设置压缩等级。
            </summary>
            <seealso cref="P:Py.Zip.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:Py.Zip.ZipEntry.Crc32">
            <summary>
            获取循环码。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.Encryption">
             <summary>
             获取或设置加密算法。
             </summary>
             <example>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <exception cref="T:System.InvalidOperationException">
             未知算法。
             </exception>
             <seealso cref="P:Py.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:Py.Zip.ZipEntry.Password">
            <summary>
            设置单元密码。
            </summary>
            <seealso cref="P:Py.Zip.ZipEntry.Encryption"/>
        </member>
        <member name="P:Py.Zip.ZipEntry.IsChanged">
            <summary>
            获取当前单元是否被改变。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.IncludedInMostRecentSave">
            <summary>
            获取是否当前文件在最后一次保存时记录。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.IsText">
             <summary>
             获取和获取当前单元是否是文本文档。
             </summary>
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.txt", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.txt", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="P:Py.Zip.ZipEntry.ArchiveStream">
            <summary>
            获取或设置当前单元使用的流。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.FileDataPosition">
            <summary>
            获取文件数据位置。
            </summary>
            <value>文件数据位置。</value>
        </member>
        <member name="P:Py.Zip.ZipEntry.LengthOfHeader">
            <summary>
            获取文件头长度。
            </summary>
        </member>
        <member name="T:Py.Zip.ZipEntry.ZipCrypto">
            <summary> 
            加密方式。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCrypto.#ctor">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipEntry.ZipCrypto"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
            <summary>
            解密。
            </summary>
            <param name="cipherText">文本。</param>
            <param name="length">文本长度。</param>
            <returns>解密的文本。</returns>
            <example>
            	<code>
            var cipher = new ZipCrypto();
            cipher.InitCipher(Password);
            // Decrypt the header.  This has a side effect of "further initializing the
            // encryption keys" in the traditional zip encryption.
            byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
            </code>
            </example>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
            <summary>
            加密。
            </summary>
            <param name="plaintext">文本。</param>
            <param name="length">文本长度。</param>
            <returns>处理文本。</returns>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCrypto.InitCipher(System.String)">
            <summary>
            使用指定内容解密。
            </summary>
            <param name="passphrase">参数。
            </param>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCrypto.MagicByte">
            <summary> 
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>          
        </member>
        <member name="T:Py.Zip.ZipEntry.ZipCipherStream">
            <summary>
            用于加密的流。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.#ctor(System.IO.Stream,Py.Zip.ZipEntry.ZipCrypto,Py.Zip.ZipEntry.CryptoMode)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipEntry.ZipCipherStream"/> 的新实例。
            </summary>
            <param name="s">加密的流。</param>
            <param name="cipher">加密类。</param>
            <param name="mode">加密模式。</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.Flush">
            <summary>
            当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            当在派生类中重写时，设置当前流中的位置。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipEntry.ZipCipherStream.SetLength(System.Int64)">
            <summary>
            当在派生类中重写时，设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCipherStream.CanRead">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持读取的值。
            </summary>
            <value></value>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCipherStream.CanSeek">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持查找功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCipherStream.CanWrite">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持写入功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCipherStream.Length">
            <summary>
            当在派生类中重写时，获取用字节表示的流长度。
            </summary>
            <value></value>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Zip.ZipEntry.ZipCipherStream.Position">
            <summary>
            当在派生类中重写时，获取或设置当前流中的位置。
            </summary>
            <value></value>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="T:Py.Zip.ZipEntry.WinZipAesCrypto">
            <summary> 
            This is a helper class supporting WinZip AES encryption.  
            This class is intended for use only by the DotNetZip library.
            </summary>
            <remarks>
            Most uses of the DotNetZip library will not involve direct calls into the
            WinZipAesCrypto class.  Instead, the WinZipAesCrypto class is instantiated and
            used by the ZipEntry() class when WinZip AES encryption or decryption on an
            entry is employed.
            </remarks>
        </member>
        <member name="T:Py.Zip.ZipEntry.WinZipAesCipherStream">
            <summary>
            A stream that encrypts as it writes, or decrypts as it reads.  The Crypto is AES in 
            CTR (counter) mode, which is 
            compatible with the AES encryption employed by WinZip 12.0.
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.WinZipAesCipherStream.#ctor(System.IO.Stream,Py.Zip.ZipEntry.WinZipAesCrypto,System.Int64,Py.Zip.ZipEntry.CryptoMode)">
            <summary>
            The constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cryptoParams">The pre-initialized WinZipAesCrypto object.</param>
            <param name="length">The maximum number of bytes to read from the stream.</param>
        </member>
        <member name="M:Py.Zip.ZipEntry.WinZipAesCipherStream.Close">
            <summary>
              Close the stream.
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.WinZipAesCipherStream.Flush">
            <summary>
            Flush the content in the stream.
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.WinZipAesCipherStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Py.Zip.ZipEntry.WinZipAesCipherStream.SetLength(System.Int64)">
            <summary>
            This method throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.FinalAuthentication">
            <summary>
            Returns the final HMAC-SHA1-80 for the data that was encrypted.
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.CanRead">
            <summary>
            Returns true if the stream can be read.
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.CanSeek">
            <summary>
            Always returns false. 
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.CanWrite">
            <summary>
            Returns true if the CryptoMode is Encrypt.
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.Length">
            <summary>
            Getting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Py.Zip.ZipEntry.WinZipAesCipherStream.Position">
            <summary>
            Getting or Setting this property throws a NotImplementedException.
            </summary>
        </member>
        <member name="T:Py.Zip.ZipEntryTimestamp">
            <summary>
            Zip 单元中表示时间戳的类型枚举。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryTimestamp.None">
            <summary>
            默认值。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryTimestamp.DOS">
            <summary>
            DOS 2进制格式。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryTimestamp.Windows">
            <summary>
            Widnows格式。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryTimestamp.Unix">
            <summary>
            Unix格式。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryTimestamp.InfoZip1">
            <summary>
            Unix 一位格式。已过时。
            </summary>
        </member>
        <member name="T:Py.Zip.CompressionMethod">
            <summary>
            对单独单元有效的压缩方式。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.None">
            <summary>
            无压缩。等于 0 。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Deflate">
            <summary>
            真空。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Shrinking">
            <summary>
            收缩。LZW的微小调整的一个异体。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Reducin">
            <summary>
            缩小。先压缩重复字节串行的组合，然后应用一个基于概率的编码得到结果。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Imploding">
            <summary>
            爆聚。使用一个滑动窗口压缩重复字节串行，然后使用多重Shannon-Fano树压缩得到结果。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Tokenizing">
            <summary>
            令牌化。PKWARE规约没有为其定义一个算法。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Deflate9">
            <summary>
            真空。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Imploding10">
            <summary>
            PKWARE数据压缩库爆聚。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Reducing3">
            <summary>
            缩小。先压缩重复字节串行的组合，然后应用一个基于概率的编码得到结果。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Reducing4">
            <summary>
            缩小。先压缩重复字节串行的组合，然后应用一个基于概率的编码得到结果。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Reducing5">
            <summary>
            缩小。先压缩重复字节串行的组合，然后应用一个基于概率的编码得到结果。
            </summary>
        </member>
        <member name="F:Py.Zip.CompressionMethod.Bzip2">
            <summary>
            bzip2 。 在 windows 平台不支持。
            </summary>
        </member>
        <member name="T:Py.Zip.SharedUtilities">
            <summary>
            内部综合类。
            </summary>
        </member>
        <member name="M:Py.Zip.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            规范化路径。
            </summary>
            <param name="pathName">源位置。</param>
            <returns>转换的位置。</returns>
        </member>
        <member name="M:Py.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            查找 Zip 文件的流。
            </summary>
            <param name="stream">查找的流。</param>
            <param name="SignatureToFind">查找标识。</param>
            <returns>读取的长度。</returns>
        </member>
        <member name="T:Py.Core.PagerInfo">
            <summary>
            表示一组分页信息的集合。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo.DefaultPageSize">
            <summary>
            默认分页的大小。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo._pageSize">
            <summary>
            分页大小。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo._currentOffset">
            <summary>
            当前记录索引。索引从 1 开始。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo._pageCount">
            <summary>
            所有页数。没有记录时为1 。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo._currentPage">
            <summary>
            当前页数。 从 1 开始。
            </summary>
        </member>
        <member name="F:Py.Core.PagerInfo._totalCount">
            <summary>
            当前的总记录数。
            </summary>
        </member>
        <member name="M:Py.Core.PagerInfo.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Core.PagerInfo.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。</exception>
        </member>
        <member name="M:Py.Core.PagerInfo.#ctor">
            <summary>
            初始化 Py.Core.PagerInfo 的新实例。
            </summary>
        </member>
        <member name="M:Py.Core.PagerInfo.#ctor(System.Int32)">
            <summary>
            初始化 Py.Core.PagerInfo 的新实例。
            </summary>
            <param name="pageSize">分页大小。</param>
        </member>
        <member name="M:Py.Core.PagerInfo.#ctor(System.Int32,System.Int64)">
            <summary>
            初始化 Py.Core.PagerInfo 的新实例。
            </summary>
            <param name="pageSize">分页大小。</param>
            <param name="totalCount">记录数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">设置的页大小不是正整数。</exception>
        </member>
        <member name="M:Py.Core.PagerInfo.#ctor(System.Int32,System.Int64,System.Int32)">
            <summary>
            初始化 Py.Core.PagerInfo 的新实例。
            </summary>
            <param name="pageSize">分页大小。</param>
            <param name="totalCount">记录数。</param>
            <param name="currentPage">当前页位置。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">设置的页大小不是正整数。</exception>
        </member>
        <member name="M:Py.Core.PagerInfo.op_LeftShift(Py.Core.PagerInfo,System.Int32)">
            <summary>
            实现操作符 operator &lt;&lt;。表示向左翻页。
            </summary>
            <param name="p">用于计算的值1。</param>
            <param name="page">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_RightShift(Py.Core.PagerInfo,System.Int32)">
            <summary>
            实现操作符 operator &gt;&gt;。表示向右翻页。
            </summary>
            <param name="p">用于计算的值1。</param>
            <param name="page">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_Addition(Py.Core.PagerInfo,System.Int32)">
            <summary>
            实现操作符 operator +。表示向下更新位置。
            </summary>
            <param name="p">用于计算的值1。</param>
            <param name="i">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_Subtraction(Py.Core.PagerInfo,System.Int32)">
            <summary>
            实现操作符 operator -。表示向上更新位置。
            </summary>
            <param name="p">用于计算的值1。</param>
            <param name="i">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_GreaterThan(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator &gt;。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_LessThan(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator &lt;。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_GreaterThanOrEqual(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator &gt;=。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_LessThanOrEqual(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator &lt;=。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_Equality(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator ==。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.op_Inequality(Py.Core.PagerInfo,Py.Core.PagerInfo)">
            <summary>
            实现操作符 operator !=。
            </summary>
            <param name="p1">用于计算的值1。</param>
            <param name="p2">用于计算的值2。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.CompareTo(Py.Core.PagerInfo)">
            <summary>
            比较当前对象和同一类型的另一对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            一个 32 位有符号整数，指示要比较的对象的相对顺序。返回值的含义如下： 值 含义 小于零 此对象小于 <paramref name="other"/> 参数。零 此对象等于 <paramref name="other"/>。 大于零 此对象大于 <paramref name="other"/>。
            </returns>
        </member>
        <member name="M:Py.Core.PagerInfo.Equals(Py.Core.PagerInfo)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Core.PagerInfo.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.NextPage">
            <summary>
            切换下一页。
            </summary>
            <returns>如果可以接着翻页 ，返回true。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.PresiousPage">
            <summary>
            切换上一页。
            </summary>
            <returns>如果可以接着翻页 ，返回true。</returns>
        </member>
        <member name="M:Py.Core.PagerInfo.FisrtPage">
            <summary>
            切换第一页。
            </summary>
        </member>
        <member name="M:Py.Core.PagerInfo.LastPage">
            <summary>
            切换最后一页。
            </summary>
        </member>
        <member name="M:Py.Core.PagerInfo.ChangePage(System.Int32)">
            <summary>
            改变页数。
            </summary>
            <param name="offset">改变的页数号，如往下翻一页则为 1 。 往上翻 5 页，  则为 -5 。</param>
        </member>
        <member name="M:Py.Core.PagerInfo.ChangeIndex(System.Int32)">
            <summary>
            改变页数。
            </summary>
            <param name="offset">改变的索引。</param>
        </member>
        <member name="P:Py.Core.PagerInfo.PageSize">
            <summary>
            获取或设置分页大小。默认 20。
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">设置的页大小不是正整数。</exception>
        </member>
        <member name="P:Py.Core.PagerInfo.CurrentIndex">
            <summary>
            获取或设置当前记录在所有页的索引。默认 1。设置此值会引起页面的切换。
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">设置的大小不是正整数。</exception>
        </member>
        <member name="P:Py.Core.PagerInfo.CurrentOffset">
            <summary>
            获取或设置当前记录在当前页的位置，第一个是 1 。 如果设置的值过大，会导致翻页。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.TotalCount">
            <summary>
            获取或设置所有记录数。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.PageCount">
            <summary>
            获取页数。如果没有记录返回 1 页。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.CurrentPage">
            <summary>
            获取或设置当前页数。如果没有记录返回  1 。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.HasNextPage">
            <summary>
            获取一个值，该值指示是当前分页否存在下一页的内容。同时指示是否最后一页。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.HasPresiousPage">
            <summary>
            获取一个值，该值指示是当前分页否存在上一页的内容。同时指示是否为第一页。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.IsFirstPage">
            <summary>
            检查现在是否为第一页。
            </summary>
        </member>
        <member name="P:Py.Core.PagerInfo.IsLastPage">
            <summary>
            检查现在是否为最后页。
            </summary>
        </member>
        <member name="E:Py.Core.PagerInfo.PageChanged">
            <summary>
            翻页事件。
            </summary>
        </member>
        <member name="T:Py.Core.Check">
            <summary>
            对数据的检查操作类。
            </summary>
        </member>
        <member name="M:Py.Core.Check.IsBlank(System.Object)">
             <summary>
             确定是否是null或空字符串或数组。
             </summary>
             <param name="input">要做判断的变量。</param>
             <returns>如果空返回 true;否则返回 false。</returns>
             <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
            			Console.Write(Check.IsBlank(new String[]{}));  // 输出   true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Check.IsBlank(System.String)">
            <summary>
            确定是否是null或空字符串或数组。
            </summary>
            <param name="value">要做判断的变量。</param>
            <returns>如果空返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsInteger(System.String)">
             <summary>
             检测数据是非负整数。
             </summary>
             <param name="value">待检查数据</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger("4");
                     Console.Write(d);  // 输出  true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Check.IsInt(System.String)">
            <summary>
            检测数据是否整数。
            </summary>
            <param name="value">待检查数据</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsInt(System.String,System.Boolean)">
             <summary>
             检测是否是整数。
             </summary>
             <param name="value">待检查数据。</param>
             <param name="positive">如果true，则负数将判为 false。</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger("-4",true);
                     Console.Write(d);  // 输出  false
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Check.IsDateTime(System.String)">
             <summary>
             判断输入是否为日期类型
             </summary>
             <param name="value">待检查数据</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsDate("2009-01-01");
                     Console.Write(d);  // 输出  true
                     bool d = Text.IsDate("2009-00-02");
                     Console.Write(d);  // 输出  false
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Check.IsNumber(System.String)">
            <summary>
            验证是否为纯数字的字符串。不论字符串长度，只要每一位都是数字则返回 true 。
            </summary>
            <param name="value">要操作的字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsGuid(System.String)">
            <summary>
            判断变量是否为标准的 Guid 。
            </summary>
            <param name="value">要操作的字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.CheckRequestString(System.String)">
            <summary>
            检查一个字符串是否含注入语句。
            </summary>  
            <param name="param">字符串。</param>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
        </member>
        <member name="M:Py.Core.Check.CheckRequestString(System.String,System.String)">
            <summary>
            检查一个字符串是否含注入语句。
            </summary>
            <param name="param">要操作的字符串。</param>
            <param name="pattern">检测的字符串，多个字符串用|分。</param>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pattern"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Check.CheckRequests">
            <summary>
            综合判段一个请求是否含不安全的内容。
            </summary>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
            <exception cref="T:System.InvalidOperationException"> 不允许运行本函数。</exception>
        </member>
        <member name="M:Py.Core.Check.CheckAndFilter(System.String)">
            <summary>
            检测不合法的提交参数字符串，如果存在则过滤。
            </summary>
            <param name="input">待处理的字符串。</param>
            <returns>返回的字符串。</returns>
        </member>
        <member name="M:Py.Core.Check.CheckPasswordLevel(System.String)">
            <summary>
            检查一个密码的复杂度。
            </summary>
            <param name="psd">密码。</param>
            <returns>数字越大，复杂度越高。 这个数字在 0 - 5 变化。</returns>
        </member>
        <member name="M:Py.Core.Check.IsChinese(System.String)">
            <summary>
            判断一个字符串是否含中文。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果是中文，则为true。</returns>
        </member>
        <member name="M:Py.Core.Check.IsId(System.String)">
            <summary>
            检查一个身份证是否为合法。
            </summary>
            <param name="id">身份卡号。</param>
            <returns>如果为合法身份卡返回 true 。</returns>
        </member>
        <member name="M:Py.Core.Check.IsId(System.String,System.String@,System.DateTime@,System.Boolean@)">
            <summary>
            检查一个身份证是否为合法。
            </summary>
            <param name="id">身份卡号。</param>
            <param name="city">获取的城市。</param>
            <param name="birthday">生日。</param>
            <param name="sex">性别。</param>
            <returns>如果为合法身份卡返回 true 。</returns>
        </member>
        <member name="M:Py.Core.Check.IsURL(System.String)">
             <summary>
             判断字符串是否为网址 。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "http://www.baidu.com";
                     bool value = Text.IsURL(a);
                  Console.Write(value);  // 输出   true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.Check.IsIP(System.String)">
            <summary>
            检测输入字符串是否为IP。
            </summary>
            <param name="input">输入字符串。</param>
            <returns>如果是ip，返回true。</returns>
        </member>
        <member name="M:Py.Core.Check.IsFileName(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="name">文件或文件夹名。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsFilePath(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsEmail(System.String)">
            <summary>
            检查是否为电子邮件地址。
            </summary>
            <param name="input">字符串。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsDouble(System.String)">
            <summary>
            检查字符串是否为double 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsFloat(System.String)">
            <summary>
            检查字符串是否为float 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsUInt(System.String)">
            <summary>
            检查字符串是否为uint 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsInstanceOf(System.Object,System.Object)">
            <summary>
            判断 2 个变量类型是否为继承或相等 。
            </summary>
            <param name="child">肯能是子类的变量。</param>
            <param name="parent">肯能是基类的变量。</param>
            <returns>如果为继承返回 true;否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="child"/> 或 <paramref name="parent"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Check.IsLong(System.String)">
            <summary>
            检查字符串是否为long 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsShort(System.String)">
            <summary>
            检查字符串是否为short 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsByte(System.String)">
            <summary>
            检查字符串是否为byte 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsBool(System.String)">
            <summary>
            检查字符串是否为bool 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:Py.Core.Check.IsVarNamer(System.String)">
            <summary>
            检查字符串是否为变量名。
            </summary>
            <param name="str">字符串。 </param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="T:Py.Html.HtmlReaderSettings">
            <summary>
            指定在 <see cref="T:Py.Html.HtmlReader.Create(Stream stream, HtmlReaderSettings settings)" /> 方法创建的 <see cref="T:System.Html.HtmlReader" /> 对象上支持的一组功能。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._closeInput">
            <summary>
            指示当读取器关闭时，是否应关闭基础流或 <see cref="T:System.IO.TextReader" />。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._ignoreComments">
            <summary>
            指示是否忽略注释。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._ignorePIs">
            <summary>
            该值指示是否忽略处理指令。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._ignoreWhitespace">
            <summary>
            指示是否忽略无关紧要的空白。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._isReadOnly">
            <summary>
            指示当前的设置是否为只读。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlReaderSettings._nameTable">
            <summary>
            用于原子化字符串比较的 <see cref="T:System.Html.HtmlNameTable" />。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReaderSettings.#ctor">
            <summary>
            初始化 <see cref="T:System.Html.HtmlReaderSettings" /> 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReaderSettings.Clone">
            <summary>
            创建 <see cref="T:System.Html.HtmlReaderSettings" /> 实例的副本。
            </summary>
            <returns>
            克隆的 <see cref="T:System.Html.HtmlReaderSettings" /> 对象。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlReaderSettings.Reset">
            <summary>
            将设置类的成员重置为各自的默认值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlReaderSettings.CloseInput">
            <summary>
            获取或设置一个值，该值指示当读取器关闭时，是否应关闭基础流或 <see cref="T:System.IO.TextReader" />。
            </summary>
            <returns>
            如果当读取器关闭时基础流或 <see cref="T:System.IO.TextReader" /> 也应关闭，则为 true；否则为 false。默认为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReaderSettings.IgnoreComments">
            <summary>
            获取或设置一个值，该值指示是否忽略注释。
            </summary>
            <returns>
            如果忽略注释，则为 true；否则为 false。默认为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReaderSettings.IgnoreProcessingInstructions">
            <summary>
            获取或设置一个值，该值指示是否忽略处理指令。
            </summary>
            <returns>
            如果忽略处理指令，则为 true；否则为 false。默认值为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReaderSettings.IgnoreWhitespace">
            <summary>
            获取或设置一个值，该值指示是否忽略无关紧要的空白。
            </summary>
            <returns>
            如果忽略空白，则为 true；否则为 false。默认为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReaderSettings.NameTable">
            <summary>
            获取或设置用于原子化字符串比较的 <see cref="T:System.Html.HtmlNameTable" />。
            </summary>
            <returns>
            <see cref="T:System.Html.HtmlNameTable" />，它存储使用此 <see cref="T:System.Html.HtmlReaderSettings" /> 对象创建的所有 <see cref="T:System.Html.HtmlReader" /> 实例使用的所有原子化字符串。
            
            默认为null。如果该值为null，创建的 <see cref="T:System.Html.HtmlReader" /> 实例将使用新的空 <see cref="T:System.Html.NameTable" />。
            </returns>
        </member>
        <member name="T:Py.Html.HtmlNodeList">
            <summary>
            表示排序的节点集合。
            </summary>
        </member>
        <member name="T:Py.Collections.ITreeNodeList`1">
            <summary>
            表示所有子节点。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Py.Collections.ITreeNodeList`1.Item(System.Int32)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="i">位置。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:Py.Collections.ITreeNodeList`1.Item(System.String)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="name">节点名。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:Py.Collections.ITreeNodeList`1.Count">
            <summary>
            获取子节点数目。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNodeList.#ctor">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlNodeList" /> 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNodeList.GetEnumerator">
            <summary>
            在 HtmlNodeList 中节点集合上提供一个简单的“foreach”样式迭代。
            </summary>
            <returns>
            一个 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlNodeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlNodeList.Item(System.Int32)">
            <summary>
            检索给定索引处的节点。
            </summary>
            <returns>
            集合中的 <see cref="T:Py.Html.HtmlNode" />。如果 index 大于或等于列表中的节点数，则这返回 null。
            </returns>
            <param name="i">
            节点列表中从零开始的索引。
            </param>
        </member>
        <member name="P:Py.Html.HtmlNodeList.Count">
            <summary>
            获取 HtmlNodeList 中的节点数。
            </summary>
            <returns>
            节点数。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlNodeList.Length">
            <summary>
            获取 HtmlNodeList 中的节点数。
            </summary>
            <returns>
            节点数。
            </returns>
        </member>
        <member name="T:Py.Algorithm.Enumerator">
            <summary>
            提供遍历的所有常用算法。
            </summary>
            <remarks>
            集合的遍历包括对集合求并集，交集，差集等，此外还有统计，求均等常见需要遍历集合的一些操作。
            对于 .net 3.5 来说，此类的部分功能已在 System 提供。
            </remarks>
            <example>
            以下示例演示了如何使用 Enumerator 类实现求2个列表的并集 。
            <code>
            using System;
            using System.Collections.Generic;
            using Py.Algorithm;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    List&lt;string&gt; x = new List&lt;string&gt;{"a", "b", "c"};
                    string[] y = new string[]{"a", "d", "e"};
                    Enumerator.Union(x, y); // 将 y 并到 x 。
                    Logger.Write(x);
                }
                
            }
            </code>
            
            以下示例演示了如何使用 Enumerator 类实现过滤列表中的奇数 。
            <code>
            using Py.Algorithm;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    List&lt;int&gt; list = new List&lt;int&gt;{1, 3, 6};
                    Enumerator.Where(list, x => (x &amp; 1) == 1);
                    Logger.Write(x);
                }
                
            }
            </code>
            </example>
        </member>
        <member name="M:Py.Algorithm.Enumerator.NextPermutation``1(System.Collections.Generic.IList{``0})">
            <summary>
            全排列一个集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>已经全都排列则返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.NextPermutation``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            全排列一个集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>已经全都排列则返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回序列中的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <returns>一个数字，表示序列中所有元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Count``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            返回序列中的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            返回序列中和指定值相同的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="value">查找的值。</param>
            <returns>一个数字，表示序列中和指定值相同的元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Count``1(System.Collections.Generic.IEnumerable{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            返回序列中和指定值相同的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="value">查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>一个数字，表示序列中和指定值相同的元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            返回指定的序列中元素的平均值 。
            </summary>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>平均值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            返回指定的序列中元素的平均值 。
            </summary>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>平均值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            统计指定的序列的和 。
            </summary>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>和。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            统计指定的序列的和 。
            </summary>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>和。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>
             跳过序列中指定数量的元素，然后返回剩余的元素。
             </summary>
             <typeparam name="T"><paramref name="source" /> 中的元素的类型。</typeparam>
             <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
             <param name="count">返回剩余元素前要跳过的元素数量。</param>
             <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中指定索引后出现的元素。</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> 为空。 </exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0})">
            <summary>
            跳过序列中指定数量的元素，然后返回剩余的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，用于从中返回元素。</param>
            <param name="action">操作。参数为元素自己。</param>
            <param name="count">个数。</param>
            <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，包含其它元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            从序列的开头返回指定数量的连续元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要从其返回元素的序列。</param>
            <param name="count">要返回的元素数量。</param>
            <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，包含输入序列开头的指定数量的元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0})">
            <summary>
            返回序列指定数量元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要从其返回元素的序列。</param>
            <param name="count">数量。</param>
            <param name="action">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，包含输入序列中出现在测试不再能够通过的元素之前的元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Max``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            调用泛型序列的每个元素上的转换函数并返回最大结果值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source"> 要确定其最大值的值序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>序列中的最大值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空 。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            调用泛型序列的每个元素上的转换函数并返回最大结果值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source"> 要确定其最大值的值序列。</param>
            <returns>序列中的最大值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空 。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Min``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            调用泛型序列的每个元素上的转换函数并返回最小结果值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source"> 要确定其最大值的值序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>序列中的最小值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空 。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            调用泛型序列的每个元素上的转换函数并返回最小结果值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source"> 要确定其最大值的值序列。</param>
            <returns>序列中的最小值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空 。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.All``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            确定序列中的所有元素是否满足条件。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要应用谓词的元素的 &gt;System.Collections.Generic.IEnumerable&lt;T&gt; 。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            确定序列中的是否存在元素满足条件。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要应用谓词的元素的 &gt;System.Collections.Generic.IEnumerable&lt;T&gt; 。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>如果源序列中的任何元素有至少一个通过指定谓词中的测试，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            确定集合是否包含需要的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="value">搜索的项。</param>
            <returns>如果集合包含一个或多个与指定谓词所定义的条件相匹配的元素，则为 true；否则为 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            确定集合是否包含需要的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="value">搜索的项。</param>
            <param name="match">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素应满足的条件。</param>
            <returns>
            如果集合包含一个或多个与指定谓词所定义的条件相匹配的元素，则为 true；否则为 false 。
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">拷贝的目标。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Add``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            增加列表项至指定的集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">目标集合。</param>
            <returns>增加的数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.NotSupportedException">集合不允许添加元素。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标的列表位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">拷贝的目标位置。</param>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IList{``0},``0[],System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标列表的开始位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="sourceIndex">开始复制的索引。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标列表的开始位置。</param>
            <param name="count">需复制的个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> ， 小于 0  - 或者 -<paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="destIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="sourceIndex">开始复制的索引。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标列表的开始位置。</param>
            <param name="count">需复制的个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> ， 小于 0  - 或者 -<paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="destIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 System.Collections.Generic.ICollection&lt;T&gt; 的元素复制到一个System.Array 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">拷贝的源。</param>
            <param name="sourceIndex">序列里开始复制的位置。</param>
            <param name="dest">拷贝的目标。</param>
            <param name="destIndex">目标的位置。</param>
            <param name="count">拷贝的个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dest"/><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0 或 <paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"> <paramref name="destIndex"/> + <paramref name="count"/> 大于等于集合长度。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Equals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Equals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32,Py.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="count">比较的个数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Conatins``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合x 是否包含集合 y 。  (x ⊇ y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">第二个集合。</param>
            <returns>如果包含，则返回 true， 否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Conatins``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            判断集合x 是否包含集合 y 。  (x ⊇ y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">第一个集合。</param>
            <param name="y">第二个集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果包含，则返回 true， 否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Concatenate``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            将众多集合合成一个集合。
            </summary>
            <typeparam name="T"> source 元素的类型。</typeparam>
            <param name="sources">合并的集合。</param>
            <returns>合并得到的集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Concatenate``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            将参数的集合取并。
            </summary>
            <typeparam name="T"><paramref name="lists"/> 中的元素的类型。</typeparam>
            <param name="lists">合并的集合。</param>
            <returns>合并得到的集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lists"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Select``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            获得满足断言的元素的集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>子集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.SubCollection``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            获得满足断言的元素的集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>子集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.SubCollection``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            获得满足断言的元素的集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>子集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0 或 <paramref name="count"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"> <paramref name="startIndex"/> + <paramref name="count"/> 大于等于集合长度。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Split``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            把集合分成多个部分。根据 <paramref name="item"/> 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="item">用于作为分隔符的元素。</param>
            <returns>分隔后的子集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Split``1(System.Collections.Generic.IList{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            把集合分成多个部分。根据 <paramref name="item"/> 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="item">用于作为分隔符的元素。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>分隔后的子集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Union``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            将第二个集合并至第一个集合 。 且去掉重复的元素。  (x ∪ y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Concat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            将第二个集合和第一个集合并 。 (x + y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Intersect``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            将参数的集合相交，返回结果。即保留重复的元素。 (x ∩ y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <returns>获取的交集。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Except``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            使第一个集合减去第二个集合。 (x - y)
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            将集合转换为等效的数组。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>转换的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合转换为等效的数组。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>转换的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合转换为等效的列表。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>转换的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},Py.Core.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
            将集合转换为等效的字典。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <typeparam name="TKey">键所用的类型。</typeparam>
            <typeparam name="TValue">值所用的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">获得键值对的委托。</param>
            <returns>字典。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Mismatch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获得2个迭代器首先出现不同的位置。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">第一个集合。</param>
            <param name="b">第二个集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Mismatch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            获得2个迭代器首先出现不同的位置。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">第一个集合。</param>
            <param name="b">第二个集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>出现不同的位置。若集合一致，返回 小于 0 的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.IsUnique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断一个枚举的值是否唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>如果唯一，则返回 true， 否则 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Unique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>元素唯一的集合的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Unique``1(System.Collections.Generic.IList{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>元素唯一的集合的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Unique``1(System.Collections.Generic.IList{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Repeat``1(``0,System.Int32)">
            <summary>
            返回重复指定的值指定次的序列 。
            </summary>
            <typeparam name="T"><paramref name="value"/> 类型。</typeparam>
            <param name="value">值。</param>
            <param name="repeatTime">次数。</param>
            <returns>序列。</returns>
        </member>
        <member name="M:Py.Algorithm.Enumerator.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            如果集合有元素返回第一个元素，否则返回默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.DefaultIfEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            如果集合有元素返回第一个元素，否则返回默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            如果没有超过索引返回第 <paramref name="index"/> 个元素，否则返回默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="index">索引。</param>
            <returns>返回的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            如果没有超过索引返回第 <paramref name="index"/> 个元素，否则返回默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="index">索引。</param>
            <returns>返回的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ElementAtOrDefault``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            如果没有超过索引返回第 <paramref name="index"/> 个元素，否则返回默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="index">索引。</param>
            <returns>返回的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回第一个元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.FirstOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            返回第一个元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回第一个元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            返回第一个元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回最后的元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            返回最后的元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回最后的元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.LastOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            返回最后的元素或默认值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>返回元素。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.GroupBy``1(System.Collections.Generic.IList{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            将列表的元素按指定的比较规则归组。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="comp">比较函数。</param>
            <returns>包含各分组的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IEnumerator{``0},Py.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IEnumerable{``0},Py.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="count">个数。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IList{``0},Py.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IList{``0},System.Int32,Py.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="action">操作。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ForEach``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,Py.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="count">个数。</param>
            <param name="f">操作。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="f"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="startPosition"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个数字，表示删除的个数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个数字，表示删除的个数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Remove``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的第一个位置元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>如果元素找到且删除，返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的第一个位置元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>如果元素找到且删除，返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.UniqueAndRemove``1(System.Collections.Generic.IList{``0},System.Predicate{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            删除集合中满足条件的元素的集合，不含重复项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果元素找到且删除，返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 或 <paramref name="comp"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            删除了列表了内指定个数元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="index">开始删除的索引。</param>
            <param name="count">需删除的元素个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 超过索引。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <param name="compare">用于比较的函数。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},Py.Core.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="action">用于获取替换内容的方法，用原值做为参数，得到新值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IList{``0},``0,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <param name="compare">用于比较的函数。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},Py.Core.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="action">用于获取替换内容的方法，用原值做为参数，得到新值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Replace``1(System.Collections.Generic.IList{``0},Py.Core.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="action">操作，返回被替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Where``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            遍历序列中满足指定条件的项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="predicate">条件。</param>
            <returns>满足条件的元素的序列。</returns>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Swap``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            交换两个列表中指定位置开始指定数目的元素。
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="startIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Reverse``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            翻转列表中元素 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="start">开始位置。</param>
            <param name="end">结束位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">start 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="end"/> 小于 <paramref name="start"/> 或 <paramref name="end"/> 超过列表长度。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            翻转列表中元素 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将集合元素随机重排。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 超过索引。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            将迭代器中的元素转换为另一种类型，并返回包含转换后的元素的迭代器。
            </summary>
            <typeparam name="TSource">来源元素的类型。</typeparam>
            <typeparam name="TOutput">目标数组元素的类型。</typeparam>
            <param name="source">要转换的集合。</param>
            <param name="converter">将每个元素从一种类型转换为另一种类型的 System.Converter&lt;TInput,TOutput&gt; 委托。</param>
            <returns>目标类型的迭代器，其中包含转换后的元素。</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source"/> 或 <paramref name="converter"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.ConvertAll``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1})">
            <summary>
            将迭代器中的元素转换为另一种类型，并返回包含转换后的元素的迭代器。
            </summary>
            <typeparam name="T">来源元素的类型。</typeparam>
            <typeparam name="TResult">目标数组元素的类型。</typeparam>
            <param name="source">要转换的集合。</param>
            <param name="converter">将每个元素从一种类型转换为另一种类型的 System.Converter&lt;TInput,TOutput&gt; 委托。</param>
            <returns>目标类型的迭代器，其中包含转换后的元素。</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source"/> 或 <paramref name="converter"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Enumerator.Select``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            对集合每个内容执行f(value)，将返回值放入新集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="f">操作。</param>
            <returns>集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="f"/> 为空。</exception>
        </member>
        <member name="T:Py.Zip.ZipFile">
            <summary>
            代表一个Zip文件。
            </summary>
            <remarks>
            以下代码演示如何使用 ZipFile 压缩解压文件。
            <code>
            using System;
            using Py.Zip;
            
            class Sample{
            
                public static void Main(){
                    using(ZipFile zip = new ZipFile())
                        zip.AddFile("H:\\d.dat");
                        zip.SaveAs("H:\\sav.zip"); //  zip.Extract();
                    }
                }
                
            }
            </code>
            </remarks>
        </member>
        <member name="T:Py.Zip.ZippedFile`1">
            <summary>
            为所有 zip单元 提供基类。
            </summary>
            <typeparam name="TZippedEntry">文件。</typeparam>
            <summary>
            表示一个压缩的文件。
            </summary>
            <summary>
            表示一个压缩的文件。
            </summary>
        </member>
        <member name="T:Py.Core.Base.StreamFileBase">
            <summary>
            为所有以流方式支持单一文件操作的类提供抽象基类。
            </summary>
        </member>
        <member name="T:Py.Core.Base.FileBase">
            <summary>
            为所有支持单一文件操作的类提供抽象基类。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.#ctor">
            <summary>
            初始化当前文件新实例。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.#ctor(System.String)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.Create(System.String)">
            <summary>
            创建一个新文件。
            </summary>
            <param name="savePath">保存的文件名。</param>
        </member>
        <member name="M:Py.Core.Base.FileBase.Create(System.String,Py.Core.OverwriteType)">
            <summary>
            创建一个新文件。
            </summary>
            <param name="savePath">保存的文件名。</param>
            <param name="overwrite">覆盖方式 。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.Init">
            <summary>
            当被子类重写时，实现初始化当前类的实例。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.Create">
            <summary>
            当被子类重写时，实现创建一个新的文件。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.Finalize">
            <summary>
            释放 <see cref="T:Py.Core.Base.FileBase"/> 所占用的资源。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.Open">
            <summary>
            打开当前文件。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.Open(System.String)">
            <summary>
            载入指定的文件。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.GetTmpFileName(System.String)">
            <summary>
            根据保存的文件获取缓存文件名。
            </summary>
            <param name="filePath">文件名。</param>
            <returns>随机文件名。</returns>
        </member>
        <member name="M:Py.Core.Base.FileBase.OnFileNotFound(System.String)">
            <summary>
            触发文件未找到的事件。
            </summary>
            <param name="path">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">触发 System.IO.FileNotFoundException 异常。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.OnFileExists(System.String)">
            <summary>
            触发文件已存在的事件。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">触发 System.IO.FileNotFoundException 异常。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.Close">
            <summary>
            关闭当前文件。释放所有占用的句柄。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.Save">
            <summary>
            保存当前操作的文件。如果需要保存时指定路径，使用 <see cref="M:Py.Core.Base.FileBase.SaveAs(System.String)"/> 将当前文件另存为指定路径。
            </summary>
            <exception cref="T:System.InvalidOperationException">没有设置保存的文件路径。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.SaveAs(System.String)">
            <summary>
            另存当前操作的文件到指定位置。自动覆盖已经存在的文件。
            </summary>
            <param name="fileName">文件名。</param>
            <returns>新文件的文件名。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.SaveAs(System.String,Py.Core.OverwriteType)">
            <summary>
            另存当前操作的文件到指定位置。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="overwrite">指定文件覆盖的方式。</param>
            <returns>新文件的文件名。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Core.Base.FileBase.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Core.Base.FileBase.Save(System.String)">
            <summary>
            保存文件到相应位置。
            </summary>
            <param name="filePath">文件路径。</param>
            <seealso cref="M:Py.Core.Base.FileBase.SaveAs(System.String)"/>
        </member>
        <member name="M:Py.Core.Base.FileBase.SaveTo(System.String,Py.Core.OverwriteType)">
            <summary>
            保存当前文件到指定文件夹，使用当前名字。
            </summary>
            <param name="folderPath">文件名。</param>
            <param name="overwrite">覆盖方式。</param>
            <returns>新文件的文件名。</returns>
        </member>
        <member name="M:Py.Core.Base.FileBase.SaveTo(System.String)">
            <summary>
            保存当前文件到指定文件夹，使用当前名字。
            </summary>
            <param name="folderPath">文件名。</param>
            <returns>新文件的文件名。</returns>
        </member>
        <member name="M:Py.Core.Base.FileBase.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Core.Base.FileBase.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:Py.Core.Base.FileBase.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="P:Py.Core.Base.FileBase.FilePath">
            <summary>
            获取操作的文件路径。
            </summary>
        </member>
        <member name="P:Py.Core.Base.FileBase.FileName">
            <summary>
            获取操作的文件名字。
            </summary>
        </member>
        <member name="P:Py.Core.Base.FileBase.Extension">
            <summary>
            获取当前类支持的文件扩展名类型，包括点的小写形式，多个扩展名以|分开。
            </summary>
        </member>
        <member name="P:Py.Core.Base.FileBase.FileExists">
            <summary>
            检查文件是否存在。
            </summary>
        </member>
        <member name="P:Py.Core.Base.FileBase.FileInfo">
            <summary>
            返回当前文件的文件信息。
            </summary>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.#ctor">
            <summary>
            初始化当前文件新实例。
            </summary>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.#ctor(System.String)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Close">
            <summary>
            关闭当前文件。释放所有占用的句柄。
            </summary>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Dispose(System.Boolean)">
            <summary>
            释放占用的所有资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Open">
            <summary>
            完成文件加载的任务。
            </summary>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Open(System.IO.Stream)">
            <summary>
            当被子类重写时，完成打开一个流。
            </summary>
            <param name="s">流。</param>
            <exception cref="T:System.ArgumentNullException">流为空。</exception>
            <exception cref="T:System.NotSupportedException">流不可读。</exception>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Save(System.String)">
            <summary>
            保存当前操作的文件。
            </summary>
            <param name="filePath">文件位置。</param>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.Save(System.IO.Stream)">
            <summary>
            将信息保存到流。
            </summary>
            <param name="writeStream">流。</param>
        </member>
        <member name="M:Py.Core.Base.StreamFileBase.SaveTo(System.IO.Stream)">
            <summary>
            另存为文件到流。
            </summary>
            <param name="outputStream"> 输出流。 </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="outputStream"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">输出流不支持写。</exception>
        </member>
        <member name="P:Py.Core.Base.StreamFileBase.InnerStream">
            <summary>
            获取或设置当前操作的基础流。
            </summary>
        </member>
        <member name="P:Py.Core.Base.StreamFileBase.BaseStream">
            <summary>
            获取当前文件的读取流。
            </summary>
        </member>
        <member name="F:Py.Zip.ZippedFile`1._tempFileFolder">
            <summary>
            缓存文件夹。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.#ctor">
            <summary>
            初始化 <see cref="T:Py.Zip.ZippedFile`1"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.#ctor(System.String)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.#cctor">
            <summary>
            初始化 <see cref="T:Py.Zip.ZippedFile`1"/> 的静态成员。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.Finalize">
            <summary>
            析构函数。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.GetTmpFileName(System.String)">
            <summary>
            根据保存的文件获取缓存文件名。
            </summary>
            <param name="filePath">文件名。</param>
            <returns>随机文件名。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.NameInArchive(System.String,System.String)">
            <summary>
            获取指定文件夹中的名字。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="directoryPathInArchive">文件夹位置/</param>
            <returns>名字。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddFile(System.String)">
             <summary>
             向压缩文件增加一个单元。
             </summary>
             <example>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
            
             <code lang="VB">
              Try
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
            
             <param name="filePath">添加的文件名。</param>
             <returns>被添加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddFile(System.String,System.String)">
             <summary>
             向压缩文件增加一个单元。
             </summary>
             <example>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <seealso cref="M:Py.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <param name="filePath">文件名或路径。</param>
             <param name="directoryPathInArchive">
             文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
             </param>
             <returns>增加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddFileX(System.String)">
            <summary>
            向 Zip 文件增加一个单元。  文件保存位置将为相对于当前 Zip 文件的位置。 重复的文件将不会添加。
            </summary>
            <param name="filePath">文件名或路径。</param>
            <returns>增加的单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddFileX(System.String,System.String)">
             <summary>
             向压缩文件增加一个单元。  同时指明文件在压缩文件内部的文件名与位置。 重复的文件将不会添加。
             </summary>
             <example>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <param name="filePath">文件名或路径。</param>
             <param name="fileNameInArchive">
             文件在Zip文件的文件名，不允许使用空字符串，字符串将作为文件名处理。
             </param>
             <returns>增加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 或 <paramref name="fileNameInArchive"/>为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddEntry(`0)">
            <summary>
            内部处理增加文件。
            </summary>
            <param name="ze">文件。</param>
            <returns>文件自己。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
             增加文件。
             </summary>
             <param name="filePaths">
             文件名。
             </param>
            
             <param name="directoryPathInArchive">
             文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
             </param>
            
             <param name="preserveDirHierarchy">
             是否反射文件目录。
             </param>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePaths"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.CreateDirectory(System.String)">
            <summary>
            在内部创建文件夹。
            </summary>
            <param name="name">文件夹名。</param>
            <returns>创建的单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddDirectory(System.String)">
             <summary>
             增加单元。
             </summary>
             <seealso cref="M:Py.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <overloads>这个函数有 2 个重载。</overloads>
            
             <param name="directoryPath">文件名。</param>
             <returns>增加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.AddDirectory(System.String,System.String)">
            <summary>
            增加单元。
            </summary>
            <param name="directoryPath">文件名。</param>
            <param name="directoryPathInArchive">在文件内的路径。</param>
            <returns>增加的单元。</returns>
            <seealso cref="M:Py.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            <overloads>这个函数有 2 个重载。</overloads>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            更新文件。
            </summary>
            <param name="filePaths">
             文件名的集合。
            </param>
            <param name="directoryPathInArchive">
            文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePaths"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.UpdateFile(System.String,System.String)">
            <summary>
            更新文件。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="directoryPathInArchive">文件内位置。</param>
            <returns>添加的单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.UpdateDirectory(System.String,System.String)">
            <summary>
            更新文件夹。
            </summary>
            <param name="directoryPath">文件夹名。</param>
            <param name="directoryPathInArchive">文件内位置。</param>
            <returns>添加的单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnLoadEntry(`0,System.Int32)">
            <summary>
            触发保存一个单元事件。
            </summary>
            <param name="entry">当前单元。</param>
            <param name="index">序号。</param>
            <returns>是否取消事件。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnLoadStarted">
            <summary>
            触发开始保存Zip文件事件。
            </summary>
            <returns>是否取消事件。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnLoadCompleted">
            <summary>
            触发结束保存Zip文件事件。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveBlock(`0,System.Int64,System.Int64)">
            <summary>
            触发单元保存事件。
            </summary>
            <param name="entry">单元。</param>
            <param name="bytesWritten">已处理的字节。</param>
            <param name="totalBytesToWrite">所有需要处理的字节。</param>
            <returns>是否取消事件。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveEntry(`0,System.Int32)">
            <summary>
            触发保存一个单元事件。
            </summary>
            <param name="entry">当前单元。</param>
            <param name="index">单元的序号。</param>
            <returns>是否取消事件。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveStarted(System.String)">
            <summary>
            触发开始保存Zip文件事件。
            </summary>
            <returns>是否取消事件。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveCompleted(System.String)">
            <summary>
            触发结束保存Zip文件事件。
            </summary>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractBlock(`0,System.Int64,System.Int64)">
            <summary>
            触发解压单元事件。
            </summary>
            <param name="entry">单元。</param>
            <param name="bytesWritten">写入的字节数。</param>
            <param name="totalBytesToWrite">总的需要写的字节数。</param>
            <returns>已取消事件返回 true。 </returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractEntry(`0,System.Int32)">
            <summary>
            触发单元解压事件。
            </summary>
            <param name="entry">单元。</param>
            <param name="index">次号。</param>
            <returns>已取消事件返回 true。 </returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractCompleted(System.String)">
            <summary>
            触发解压完成事件。
            </summary>
            <param name="path">位置。</param>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractStarted(System.String)">
            <summary>
            触发完准备解压事件。
            </summary>
            <param name="path">位置。</param>
            <returns>已取消事件返回 true。 </returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractEntryExisted(`0,System.String,Py.Core.OverwriteType)">
            <summary>
            解压时文件出现文件时调用。
            </summary>
            <param name="entry">发生事件的单元。</param>
            <param name="filePath">要操作的字符串。</param>
            <param name="overwrite">覆盖方式。</param>
            <returns>返回覆盖方式。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractEntrySkiped(`0)">
            <summary>
            触发一个解压单元被忽视事件。
            </summary>
            <param name="entry">单元。</param>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveEntrySkiped(`0,System.Exception)">
            <summary>
            触发一个保存单元被忽视事件。
            </summary>
            <param name="entry">单元。</param>
            <param name="e">产生错误的异常。</param>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnExtractError(`0,System.Exception)">
            <summary>
            触发解压失败的事件。
            </summary>
            <param name="entry">发送异常的单元。</param>
            <param name="e">异常。</param>
            <returns>失败的动作。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.OnSaveError(`0,System.Exception)">
            <summary>
            保存时出现错误的异常。
            </summary>
            <param name="entry">出现事件的单元。</param>
            <param name="e">出现的异常。</param>
            <returns>事件是否被取消。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.Extract(System.String,Py.Core.OverwriteType)">
            <summary>
            解压全部文件到指定文件夹。
            </summary>
            <param name="path">位置。</param>
            <param name="overwrite">文件覆盖方式。</param>
            <example>
            	<code>
            String TargetDirectory= "unpack";
            using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
            {
            zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
            zip.ExtractAll(TargetDirectory);
            }
            </code>
            	<code lang="VB">
            Dim TargetDirectory As String = "unpack"
            Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
            zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
            zip.ExtractAll(TargetDirectory)
            End Using
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.Extract">
            <summary>
            解压当前文件到同名文件夹。
            </summary>
            <exception cref="T:System.InvalidOperationException">当前文件名为，不能生成文件名。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.Extract(System.Collections.Generic.IEnumerable{`0},System.String,Py.Core.OverwriteType)">
            <summary>
            解压指名的单元。
            </summary>
            <param name="entries"></param>
            <param name="path">解压的文件夹。</param>
            <param name="overwrite">覆盖方式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/> 或 <paramref name="path"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.RemoveFile(System.String)">
            <summary>
            删除指定名字的文件单元。
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.TempFileFolder">
            <summary>
            获取或设置缓存文件夹。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            设置的文件夹不存在。
            </exception>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.HandleReparsePointsOnAddDirectory">
            <summary>
            获取或设置是否在 <c>AddDirectory()</c> 时检查该文件夹是否是 NTFS 虚拟目录。默认 true。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.TrimVolumeFromFullyQualifiedPaths">
            <summary>
            获取或设置是否处理位置时去除盘符。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.FlattenFoldersOnExtract">
            <summary>
             获取或设置是否在解压时保留文件在Zip内部的位置。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.Platform">
            <summary>
            获取或设置当前的平台。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.PEntries">
            <summary>
            返回只读形式的单元集合。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.Entries">
            <summary>
            获取当前的全部单元的集合。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.Password">
            <summary>
            设置 Zip 文件的密码。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.DefaultIOBufferSize">
            <summary>
            默认缓存大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZippedFile`1.BufferSize">
            <summary>
            获取或设置解压时的缓存大小。单位字节。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.LoadProgressChanged">
             <summary>
             保存进展改变事件。
             </summary>
             <example>
            
                This example uses an anonymous method to handle the
                SaveProgress event, by updating a progress bar.
            
             <code lang="C#">
             progressBar1.Value = 0;
             progressBar1.Max = listbox1.Items.Count;
             using (ZipFile zip = new ZipFile())
             {
                // listbox1 contains a list of filenames
                zip.AddFiles(listbox1.Items);
            
                // do the progress bar:
                zip.SaveProgress += (sender, e) => {
                   if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry) {
                      progressBar1.PerformStep();
                   }
                };
            
                zip.Save(fs);
             }
             </code>
             </example>
            
             <example>
               This example uses a named method as the
               <c>SaveProgress</c> event handler, to update the user, in a
               console-based application.
            
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
            
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false;
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate)
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",
                                       e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                                   e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                     justHadByteUpdate= true;
                 }
             }
            
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress;
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
                 Using zip As ZipFile = New ZipFile
                     AddHandler zip.SaveProgress, AddressOf MySaveProgress
                     zip.AddDirectory(directory)
                     zip.Save(targetZip)
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
                     justHadByteUpdate = False
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesRead) Then
                     If justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, _
                                   e.TotalBytesToTransfer, _
                                   (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     justHadByteUpdate = True
                 End If
             End Sub
             </code>
             </example>
            
             <example>
             <code lang="C#">
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             public class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." +
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text),
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         PEntriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max > System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, PEntriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred >> _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred >= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
             </example>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.SaveProgressChanged">
            <summary>
            保存进展改变事件。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.SaveBlockWriten">
            <summary>
            保存单元块写入。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.ExtractProgressChanged">
            <summary>
            压缩进程改变时的事件委托。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.ExtractBlockWriten">
            <summary>
            解压块事件。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.ExtractEntryExisted">
            <summary>
            当解压时文件出现文件已存在后触发。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.SaveEntrySkiped">
            <summary>
            当保存时出现一个单元被忽视后触发。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.ExtractEntrySkiped">
            <summary>
            当解压时出现一个单元被忽视后触发。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.ExtractError">
            <summary>
            解压错误事件。
            </summary>
        </member>
        <member name="E:Py.Zip.ZippedFile`1.SaveError">
            <summary>
            保存时出现错误的事件。
            </summary>
        </member>
        <member name="T:Py.Zip.ZippedFile`1.ZippedEntryCollection">
            <summary>
            表示压缩单元的所有集合。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.EntryCollection`2">
            <summary>
            为泛型单元的集合提供基类。
            </summary>
            <typeparam name="TOwner">集合所有者类型。</typeparam>
            <typeparam name="T">集合中的元素类型。</typeparam>
        </member>
        <member name="T:Py.Collections.ObjectModel.Collection`1">
            <summary>
            为泛型集合提供基类。
            </summary>
            <typeparam name="T">集合中的元素类型。</typeparam>
            <seealso cref="T:System.Collections.ObjectModel.Collection`1"/>
            <remarks>
            <para>
            通过创建 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类的一个构造类型的实例，可以立即使用该类；您只需指定要包含在集合中的对象类型即可。此外，您可以从任意构造类型派生自己的集合类型，或者从 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类本身派生出泛型集合类型。
            </para>
            
            <para>
            <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类提供了受保护的方法，这些方法可用于在添加和移除项、清除集合或设置现有项的值时自定义该类的行为。
            </para>
            
            <para>
            大多数 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 对象都可以被修改。但是，不能修改使用只读 <see cref="T:Py.Collections.Generic.IList`1"></see> 对象初始化的 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 对象。有关此类的只读版本，请参见 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see>。
            </para>
            
            <para>可使用一个整数索引访问此集合中的元素。 此集合中的索引从零开始。</para>
            
            <para><see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 接受 null 引用（在 Visual Basic 中为 Nothing） 作为引用类型的有效值并且允许有重复的元素。
            </para>
            
            <para>
            给实现者的说明：
            
            提供此基类旨在使实施者更易于创建自定义集合。实现者最好扩展此基类，而不是创建自己的类。
            </para>
            
            </remarks>
        </member>
        <member name="F:Py.Collections.ObjectModel.Collection`1._items">
            <summary>
            存储项的列表。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.#ctor">
            <summary>
            初始化为空的 <see cref="T:Py.Collections.ObjectModel.Collection`1"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.#ctor(System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:Py.Collections.ObjectModel.Collection`1"/> 的新实例。
            </summary>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.Collection`1"/> 的新实例。并复制列表的项到集合。
            </summary>
            <param name="collection">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            将 <see cref="T:Py.Collections.ObjectModel.Collection`1"/>类的新实例初始化为指定列表的包装。
            </summary>
            <param name="list">由新的集合包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.Add(`0)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">要添加到集合结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将对象添加到集合。
            </summary>
            <param name="items">对象。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.Clear">
            <summary>
            从集合中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.OnRemoveAll">
            <summary>
            从集合中移除所有元素。
            </summary>
            <returns>全部移除返回 true，否则不移除。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在集合中找到 item，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个集合复制到兼容的一维 System.Array。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  等于或大于 <paramref name="array"/> 的长度。 - 或 - index 小于零。</exception>
            <exception cref="T:System.ArgumentException">源集合中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/>  末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>用于集合的集合。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 大于集合的元素的个数。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.OnAddItem(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <returns>继续添加返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.IsCompatibleObject(System.Object)">
            <summary>
            检查对象是否为当前 <typeparamref name="T"/> 型。
            </summary>
            <param name="value">值。</param>
            <returns>如果正确，则返回 true。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从集合中移除的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在原始集合中未找到 item，此方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.RemoveRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            从集合中删除指定的元素。
            </summary>
            <param name="items">要从集合中移除的元素。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 等于或大于集合的元素的个数。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.OnRemoveItem(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
            <returns>可以移除返回 true，否则不移除。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 等于或大于集合的元素的个数。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.ToArray">
            <summary>
            将当前集合的项复制到一个为等效的数组。
            </summary>
            <returns>转换的数组。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.ToArray(System.Int32,System.Int32)">
            <summary>
            将当前集合的项复制到一个为等效的数组。
            </summary>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>转换的数组。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            将某项添加到 <see cref="T:System.Collections.IList"/> 中。
            </summary>
            <param name="value">要添加到 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
            <returns>新元素的插入位置。</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 System.Collections.IList 是否包含特定值。
            </summary>
            <param name="value">要在 System.Collections.IList 中查找的 System.Object。</param>
            <returns> 如果在 System.Collections.IList 中找到 System.Object，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> 在 <see cref="T:System.Collections.IList"/> 中是 null 引用。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 System.Collections.IList 中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 System.Collections.IList 移除的 System.Object。</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.Count">
            <summary>
            获取集合中实际包含的元素数。
            </summary>
            <value>集合中实际包含的元素数。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.IsEmpty">
            <summary>
            获取或设置一个值，该值指示是否 is empty。
            </summary>
            <value>如果 is empty， 则 true; 否则, false。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是该集合的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且集合为只读。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.Items">
            <summary>
            获取集合周围的 <see cref="T:System.Collections.Generic.IList&lt;T&gt;"/> 包装。
            </summary>
            <value>集合周围的 <see cref="T:System.Collections.Generic.IList&lt;T&gt;"/> 包装。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IList 是否为只读。
            </summary>
            <value>如果 System.Collections.IList 为只读，则为 true；否则为 false。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取或设置指定位置的 <see cref="T:System.Object"/>。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是 System.Collections.IList 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且 System.Collections.IList 为只读。</exception>
        </member>
        <member name="T:Py.Collections.ObjectModel.Collection`1.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.Collection`1.DebugView._collection">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.Collection`1.DebugView.#ctor(Py.Collections.ObjectModel.Collection{`0})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.Collection`1.DebugView"/> 的新实例。
            </summary>
            <param name="collection">集合。</param>
        </member>
        <member name="P:Py.Collections.ObjectModel.Collection`1.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.#ctor(`0)">
            <summary>
            初始化空的 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.#ctor(`0,System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="collection">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            将 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/>初始化为类的新实例初始化为指定列表的包装。
            </summary>
            <param name="owner">拥有者。</param>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.RemoveRange(System.Collections.Generic.ICollection{System.String})">
            <summary>
            从集合中删除指定的元素。
            </summary>
            <param name="items">项。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.Remove(System.String)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="name">要从集合中移除的名字。对于引用类型，该值可以为 null。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在原始集合中未找到 item，此方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.Contains(System.String)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="name">要在集合中定位的名字。</param>
            <returns>如果在集合中找到 item，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.EntryCollection`2.IndexOf(System.String)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="name">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.EntryCollection`2.Owner">
            <summary>
            获取或设置集合的所有者。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.EntryCollection`2.Comparison">
            <summary>
            获取或设置名字比较函数。
            </summary>
            <remarks>
            如需要不区分名字大小写。可以设置 Comparison 为 StringComparison.OrdinalIgnoreCase
            
            </remarks>
        </member>
        <member name="P:Py.Collections.ObjectModel.EntryCollection`2.Item(System.String)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="name">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且集合为只读。</exception>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.ZippedEntryCollection.#ctor(Py.Zip.ZippedFile{`0})">
            <summary>
            初始化 <see cref="T:Py.Zip.ZippedFile`1.ZippedEntryCollection"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.ZippedEntryCollection.OnAddItem(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Zip.ZippedFile`1.ZippedEntryCollection.GetEnumerator``1">
            <summary>
            提供对特定的单元 foreach 的支持。
            </summary>
            <typeparam name="T">继承于 ZippedEntry 的单元。</typeparam>
            <returns>序列。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.Open(System.IO.Stream)">
            <summary>
            打开一个流。
            </summary>
            <param name="s">流。</param>
        </member>
        <member name="M:Py.Zip.ZipFile.OpenFile(System.String)">
            <summary>
            读取一个 Zip 文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <returns>ZipFile类实例。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.OpenFile(System.String,Py.Zip.ProgressChangedEventHandler)">
            <summary>
            读取一个 Zip 文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="loadProgress">处理读取状态委托。</param>
            <returns>ZipFile类实例。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.OpenFile(System.IO.Stream)">
             <summary>
             读取一个 Zip 文件。
             </summary>
             <example>
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
             <param name="zipStream">流。</param>
             <returns>ZipFile类实例。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.OpenFile(System.IO.Stream,Py.Zip.ProgressChangedEventHandler)">
            <summary>
            读取一个 Zip 文件。
            </summary>
            <param name="zipStream">流。</param>
            <param name="loadProgress">
            读取进展委托。
            </param>
            <returns>aZipFile类实例。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.LoadInternal(System.IO.Stream)">
            <summary>
            读取。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.Zip64SeekToCentralDirectory">
            <summary>
            Zip64 查找单元。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.ReadCentralDirectory(System.IO.Stream,System.Int64)">
            <summary>
            读取文件内容。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.LoadOrigInternal(System.IO.Stream)">
            <summary>
            建立所有的文件的索引。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.ReadCentralDirectoryFooter(System.IO.Stream)">
            <summary>
            读取文件夹尾。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.IsZipFile(System.String)">
            <summary>
            测试一个文件是否为 Zip 文件。
            </summary>
            <param name="fileName">文件名。</param>
            <returns>成功返回 true。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">
            <summary>
            测试一个文件是否为 Zip 文件。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="testExtract">是否测试解压。</param>
            <returns>成功返回 true。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
            <summary>
            检查一个流是否为合法Zip文件。
            </summary>
            <seealso cref="M:Py.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            <param name="stream">流。</param>
            <param name="testExtract">是否测试解压。</param>
            <returns>成功返回 true。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.CheckZip(System.String)">
             <summary>
             检查一个文件是否为正确的 zip文件。
             </summary>
             <param name="zipFileName">文件名。</param>
            
             <returns>如果正确，返回 true， 否则等于 false。</returns>
            
             <seealso cref="M:Py.Zip.ZipFile.FixZipDirectory(System.String)"/>
             <seealso cref="M:Py.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.Collections.ObjectModel.ReadOnlyCollection{System.String}@)"/>
        </member>
        <member name="M:Py.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.Collections.ObjectModel.ReadOnlyCollection{System.String}@)">
            <summary>
            检查一个文件，可选是否修复。
            </summary>
            <param name="zipFileName">文件名。</param>
            <param name="fixIfNecessary">是否在需要时修复。</param>
            <param name="messages">信息。</param>
            <returns>如果正确，返回 true， 否则等于 false。</returns>
            <seealso cref="M:Py.Zip.ZipFile.CheckZip(System.String)"/>
            <seealso cref="M:Py.Zip.ZipFile.FixZipDirectory(System.String)"/>
        </member>
        <member name="M:Py.Zip.ZipFile.FixZipDirectory(System.String)">
             <summary>
             重写一个文件内部文件夹。
             </summary>
             <param name="zipFileName">压缩文件。</param>
            
             <seealso cref="M:Py.Zip.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:Py.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.Collections.ObjectModel.ReadOnlyCollection{System.String}@)"/>
        </member>
        <member name="M:Py.Zip.ZipFile.AddFileX(System.String,System.String)">
             <summary>
             向 Zip 文件增加一个单元。  同时指明文件在 Zip 内部的文件名与位置。 重复的文件将不会添加。
             </summary>
             <example>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <param name="filePath">文件名或路径。</param>
             <param name="fileNameInArchive">
             文件在Zip文件的文件名，不允许使用空字符串，字符串将作为文件名处理。
             </param>
             <returns>增加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 或 <paramref name="fileNameInArchive"/>为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.AddFile(System.String,System.String)">
             <summary>
             向 Zip 文件增加一个单元。 同时指明文件在 Zip 内部的位置。
             </summary>
             <example>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <param name="filePath">文件名或路径。</param>
             <param name="directoryPathInArchive">
             文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
             </param>
             <returns>增加的单元。</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.AddEntry(Py.Zip.ZipEntry)">
            <summary>
            内部处理增加文件。
            </summary>
            <param name="ze">文件。</param>
            <returns>文件自己。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.CreateDirectory(System.String)">
            <summary>
            在ZipFile内部创建文件夹。
            </summary>
            <param name="name">
            文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
            </param>
            <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.AddOrUpdateDirectoryImpl(System.String,System.String,System.Boolean)">
            <summary>
            增加或更新目录。
            </summary>
            <param name="directoryPath">文件夹名。</param>
            <param name="rootDirectoryPathInArchive">位置。</param>
            <param name="addOnly">是否只增加。</param>
            <returns>增加的文件夹单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.UpdateDirectory(System.String,System.String)">
            <summary>
            更新文件夹。
            </summary>
            <param name="directoryPath">
            文件夹名。
            </param>
            <param name="directoryPathInArchive"> 文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。</param>
            <returns>
            添加的单元。
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.AddOrUpdateDirectoryImpl(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            更新文件夹。
            </summary>
            <param name="directoryPath">文件夹名。</param>
            <param name="rootDirectoryPathInArchive">根目录。</param>
            <param name="addOnly">知否只含增加。</param>
            <param name="recurse"></param>
            <param name="level">等级。</param>
            <returns>单元。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directoryPath"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.Save(System.IO.Stream)">
            <summary>
            内部保存文件到流。
            </summary>
            <param name="writeStream">流。</param>
        </member>
        <member name="M:Py.Zip.ZipFile.Save(System.String)">
            <summary>
            保存当前Zip到文件。
            </summary>
            <param name="filePath">文件位置。</param>
            <exception cref="T:Py.Zip.BadStateException">没有输出流。 - 或者 - 保存失败。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.SaveSegment(System.Int32)">
            <summary>
            将当前文件分成多个文件。
            </summary>
            <param name="maxOutputSegmentSize">每个片段大小。单位为 byte 。最小值为 65536  (64K)。</param>
            <returns>保存的文件数。</returns>
            <exception cref="T:Py.Zip.ZipException">最小的片段大小为 65536 。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.SaveSegment(System.String,System.Int32,Py.Core.OverwriteType)">
            <summary>
            将当前文件分成多个文件。
            </summary>
            <param name="filePath">保存的文件位置。</param>
            <param name="maxOutputSegmentSize">每个片段大小。单位为 byte 。最小值为 65536  (64K)。</param>
            <param name="overwrite">文件的覆盖方式。</param>
            <returns>保存的文件数。</returns>
            <exception cref="T:Py.Zip.ZipException">最小的片段大小为 65536 。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.GenCentralDirectoryFooter(System.Int64,System.Int64,System.Int32)">
            <summary>
            生成文件底部信息。
            </summary>
            <param name="left">位置。</param>
            <param name="right">位置。</param>
            <param name="entryCount">数。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.SaveTo(System.IO.Stream)">
             <summary>
             另存为文件到流。
             </summary>
             <example>
             <code lang="C#">
             using (var zip = new Ionic.Zip.ZipFile())
             {
                 zip.CompressionLevel= Py.Zip.Zlib.CompressionLevel.BestCompression;
                 zip.Password = "VerySecret.";
                 zip.Encryption = EncryptionAlgorithm.WinZipAes128;
                 zip.AddFile(sourceFileName);
                 MemoryStream output = new MemoryStream();
                 zip.Save(output);
            
                 byte[] zipbytes = output.ToArray();
             }
             </code>
             </example>
            
             <param name="outputStream">
             输出流。
             </param>
             <exception cref="T:System.ArgumentNullException"><paramref name="outputStream"/> 为空。</exception>
             <exception cref="T:System.ArgumentException">输出流不支持写。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.CreateFile(System.String)">
            <summary>
            快速的压缩一个文件夹，并返回生成的文件位置。覆盖已经存在的文件。
            </summary>
            <param name="directory">要压缩的文件夹。</param>
            <returns>压缩文件位置。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directory"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.CreateFile(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            快速的压缩一个文件夹，并返回生成的文件位置。
            </summary>
            <param name="directory">要压缩的文件夹。</param>
            <param name="filePath">保存位置。</param>
            <param name="overwrite">默认覆盖方式。</param>
            <returns>压缩文件位置。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="directory"/> 或 <paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="F:Py.Zip.ZipFile._diskNumberWithCd">
            <summary>
            分块数。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._numberOfSegmentsForMostRecentSave">
            <summary>
            最后一次保存的块的数目。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._strategy">
            <summary>
            文件压缩策略。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._encryption">
            <summary>
            加密的算法。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._nameEncoding">
            <summary>
            名字编码。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile.ParallelDeflater">
            <summary>
            分块流。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._parallelDeflateThreshold">
            <summary>
            分块流长度。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipFile._zip64">
            <summary>
            是否启用 Zip64 支持。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.StreamForDiskNumber(System.UInt32)">
            <summary>
            返回指定序号的流。
            </summary>
            <param name="diskNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Zip.ZipFile.#ctor(System.String)">
            <summary>
            使用指定名字初始化 <c>ZipFile</c> 的新实例。
            </summary>
            <param name="filePath">文件位置。</param>
            <exception cref="T:Py.Zip.ZipException">如果指定文件不是合法的Zip文件。</exception>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
            <example>
            This example shows how to create a zipfile, and add a few files into it.
            <code>
            String ZipFileToCreate = "archive1.zip";
            String DirectoryToZip  = "c:\\reports";
            using (ZipFile zip = new ZipFile())
            {
            // Store all files found in the top level directory, into the zip archive.
            String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
            zip.AddFiles(filenames, "files");
            zip.Save(ZipFileToCreate);
            }
            </code>
            	<code lang="VB">
            Dim ZipFileToCreate As String = "archive1.zip"
            Dim DirectoryToZip As String = "c:\reports"
            Using zip As ZipFile = New ZipFile()
            Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
            zip.AddFiles(filenames, "files")
            zip.Save(ZipFileToCreate)
            End Using
            </code>
            </example>
        </member>
        <member name="M:Py.Zip.ZipFile.#ctor">
             <summary>
             初始化 Py.Zip.ZipFile 的新实例。
             </summary>
             <remarks>
             初始化后可以使用Load(fileName)方法加载文件，才能正常使用文件。
             <example>
             <code>
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:Py.Zip.ZipFile.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.RemoveFile(System.String)">
             <summary>
             删除文件。
             </summary>
             <exception cref="T:System.InvalidOperationException">
             当前的 <c>ZipFile</c> 是只读文件。
             </exception>
            
             <exception cref="T:System.ArgumentException">
             当前 <c>ZipEntry</c> 未加载。
             </exception>
            
             <example>
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = ZipFile.Read(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
               {
                 zip.RemoveEntry(candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.",
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = ZipFile.Read(zipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       zip.RemoveEntry(candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
             <param name="fileName">
             文件名。如果是子文件名，使用/的相对路径。
             </param>
        </member>
        <member name="M:Py.Zip.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
              添加文件夹及内所有文件。
             </summary>
             <example>
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
            
             <seealso cref="M:Py.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Py.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <param name="directoryName">文件夹名。</param>
             <param name="directoryPathInArchive">
             文件在Zip文件的路径，不支持绝对路径和 ~。空字符表示根目录。
             </param>
             <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.Close">
            <summary>
            关闭当前文件。释放所有占用的句柄。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            释放占用的所有资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
            <example>
            	<code>
            using (ZipFile zip = ZipFile.Read(zipfile))
            {
            foreach (ZipEntry e in zip)
            {
            if (WantThisEntry(e.FileName))
            zip.Extract(e.FileName, Console.OpenStandardOutput());
            }
            } // Dispose() is called implicitly here.
            </code>
            	<code lang="VB">
            Using zip As ZipFile = ZipFile.Read(zipfile)
            Dim e As ZipEntry
            For Each e In zip
            If WantThisEntry(e.FileName) Then
            zip.Extract(e.FileName, Console.OpenStandardOutput())
            End If
            Next
            End Using ' Dispose is implicity called here
            </code>
            </example>
        </member>
        <member name="M:Py.Zip.ZipFile.Init">
            <summary>
            完成创建一个新文件的任务。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.Create">
            <summary>
            当被子类重写时，实现创建一个新的文件。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.ExtractFile(System.String)">
            <summary>
            解压文件到指定路径。
            </summary>
            <param name="filePath">文件位置。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.ExtractFile(System.String,System.String)">
            <summary>
            解压文件到指定路径。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="targetDirectory">目标文件夹。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetDirectory"/> 为空。</exception>
        </member>
        <member name="M:Py.Zip.ZipFile.ExtractFile(System.String,System.String,Py.Core.OverwriteType)">
            <summary>
            解压文件到指定路径。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="targetDirectory">目标文件夹。</param>
            <param name="overwrite">文件替换方式。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetDirectory"/> 为空。</exception>
        </member>
        <member name="F:Py.Zip.ZipFile._entries">
            <summary>
            单元集合。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.VersionMadeBy">
            <summary>
            获取当前文件生成软件的版本。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.VersionNeededToExtract">
            <summary>
            获取当前文件解压的最低版本。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.FullScan">
            <summary>
            获取或设置是否在读取文件时预读Zip。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.Strategy">
            <summary>
            获取或设置当前的压缩策略。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.CompressionLevel">
            <summary>
            获取或设置压缩等级。
            </summary>
            <remarks>
            等级越高，压缩率越高。
            </remarks>
        </member>
        <member name="P:Py.Zip.ZipFile.Comment">
            <summary>
            获取或设置Zip文件的注释。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.UseUnicodeAsNecessary">
            <summary>
             获取或设置是否使用  UTF-8 编码文件名。
            </summary>
            <seealso cref="P:Py.Zip.ZipFile.Encoding"/>
        </member>
        <member name="P:Py.Zip.ZipFile.UseZip64WhenSaving">
            <summary>
            获取或设置是否在保存的时候使用 ZIP64 扩展。
            </summary>
            <seealso cref="P:Py.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:Py.Zip.ZipFile.RequiresZip64">
            <summary>
            获取或设置是否是否需要 ZIP64 扩展。
            </summary>
            <seealso cref="P:Py.Zip.ZipFile.UseZip64WhenSaving"/>
        </member>
        <member name="P:Py.Zip.ZipFile.InputUsesZip64">
            <summary>
            获取或设置是否在最近一次 <c>Load()</c> 操作时使用了 ZIP64 扩展。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.Encoding">
            <summary>
             获取或设置可选编码。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.Password">
             <summary>
             设置压缩文件的密码。暂时不支持中文密码。
             </summary>
             
             <example>
             
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Password= "!Secret1";
                 zip.AddFile("MapToTheSite-7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFile("ReadMe.txt")
                 zip.Password = "123456!"
                 zip.AddFile("MapToTheSite-7440-N49th.png")
                 zip.Password= "!Secret1";
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
            
             </code>
            
             </example>
             <exception cref="T:System.NotSupportedException">不支持中文密码。</exception>
        </member>
        <member name="P:Py.Zip.ZipFile.Encryption">
             <summary>
             获取或设置增加单元的算法。
             </summary>
             <example>
             <para>
               设置压缩算法。
             </para>
            
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.AddFile("7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.AddFile("ReadMe.txt")
                 zip.AddFile("7440-N49th.png")
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <seealso cref="P:Py.Zip.ZipFile.Password">ZipFile.Password</seealso>
             <seealso cref="P:Py.Zip.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:Py.Zip.ZipFile.NumberOfSegmentsForMostRecentSave">
            <summary>
            返回最后一次 SaveSegment() 使用的片段大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.ParallelDeflateThreshold">
            <summary>
            获取或设置使用的大小。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.Files">
             <summary>
             获取所有文件单元的文件名的集合。
             </summary>
             <example>
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile.Read(ZipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
             字符串的集合。
             </returns>
        </member>
        <member name="P:Py.Zip.ZipFile.Extension">
            <summary>
            获取当前类支持的文件扩展名类型，包括点的小写形式，多个扩展名以|分开。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.Entries">
            <summary>
            获取当前的单元集合。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipFile.PEntries">
            <summary>
            获取当前的单元集合。
            </summary>
        </member>
        <member name="T:Py.Zip.ZipFile.ZipEntryCollection">
            <summary>
            表示 ZipEntry 集合。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipFile.ZipEntryCollection"/> 的新实例。
            </summary>
            <param name="zipFile">Zip文件。</param>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,Py.Zip.EntryDelegate)">
             <summary>
             将指定的单元增加到集合。
             </summary>
             <param name="name">单元的名字。</param>
             <param name="writer">写的委托。</param>
             <returns>已添加的单元。</returns>
            
             <example>
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <code lang="C#">
             var c1= new System.Data.SqlClient.SqlConnection(connstring1);
             var da = new System.Data.SqlClient.SqlDataAdapter()
                 {
                     SelectCommand=  new System.Data.SqlClient.SqlCommand(strSelect, c1)
                 };
            
             DataSet ds1 = new DataSet();
             da.Fill(ds1, "Invoices");
            
             using(ZipFile zip = new ZipFile())
             {
                 zip.AddEntry(zipEntryName, (name,stream) => ds1.WriteXml(stream) );
                 zip.Save(zipFileName);
             }
             </code>
             </example>
            
             <example>
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <c>AddFile()</c> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <c>WriteDelegate</c> to do it, in this way.
            
             <code lang="C#">
             using (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
             {
                 using(ZipFile zip = new ZipFile())
                 {
                     zip.AddEntry(zipEntryName, (name,output) =>
                         {
                             byte[] buffer = new byte[BufferSize];
                             int n;
                             while ((n = input.Read(buffer, 0, buffer.Length)) != 0)
                             {
                                 // could transform the data here...
                                 output.Write(buffer, 0, n);
                                 // could update a progress bar here
                             }
                         });
            
                     zip.Save(zipFileName);
                 }
             }
             </code>
             </example>
            
             <example>
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <c>AddFile()</c> method.  The key scenario for
             which the <c>WriteDelegate</c> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <c>WriteDelegate</c> would be appropriate for those cases as
             well.
            
             <code lang="VB">
             Private Sub WriteEntry (ByVal name As String, ByVal output As Stream)
                 Using input As FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                     Dim n As Integer = -1
                     Dim buffer As Byte() = New Byte(BufferSize){}
                     Do While n &lt;&gt; 0
                         n = input.Read(buffer, 0, buffer.Length)
                         output.Write(buffer, 0, n)
                     Loop
                 End Using
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,System.String,System.Text.Encoding)">
            <summary>
            增加文本形式的单元。
            </summary>
            <remarks>
            这个文件名是Zip内部的文件名。
            </remarks>
            <param name="content">
            文本内容。
            </param>
            <param name="name">
            单元名字。
            </param>
            <param name="encoding">
            文本编码。 
            </param>
            <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            增加文本形式的单元。
            </summary>
            <remarks>
            这个文件名是Zip内部的文件名。
            </remarks>
            <param name="content">
            文本内容。
            </param>
            <param name="name">
            单元名字。
            </param>
            <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,System.IO.Stream)">
             <summary>
             将指定流写入内容。
             </summary>
             <remarks>
             <example>
             <code lang="C#">
             String zipToCreate = "Content.zip";
             String fileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream streamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(fileNameInArchive, streamToRead);
                 zip.AddFile("Readme.txt");
                 zip.Save(zipToCreate);  // the stream is read implicitly here
               }
             }
             </code>
            
             <code lang="VB">
             Dim zipToCreate As String = "Content.zip"
             Dim fileNameInArchive As String = "Content-From-Stream.bin"
             Using streamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(fileNameInArchive, streamToRead)
                 zip.AddFile("Readme.txt")
                 zip.Save(zipToCreate)  '' the stream is read implicitly, here
               End Using
             End Using
             </code>
             </example>
             </remarks>
             <param name="name">
             文件单元名。
             </param>
             <param name="stream">输入流。</param>
             <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,Py.Zip.OpenDelegate,Py.Zip.EntryDelegate)">
             <summary>
             增加单元。
             </summary>
            
             <remarks>
             <example>
             <code lang="C#">
             using(ZipFile zip = new ZipFile())
             {
                 zip.AddEntry(zipEntryName,
                              (name) =>  File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ),
                              (name, stream) =>  stream.Close()
                              );
            
                 zip.Save(zipFileName);
             }
             </code>
            
             </example>
            
             <example>
            
               This example uses delegates in VB.NET to open and close the
               the source stream for the content for a zip entry.  VB 9.0 lacks
               support for "Sub" lambda expressions, and so the CloseDelegate must
               be an actual, named Sub.
            
             <code lang="VB">
            
             Function MyStreamOpener(ByVal entryName As String) As Stream
                 '' This simply opens a file.  You probably want to do somethinig
                 '' more involved here: open a stream to read from a database,
                 '' open a stream on an HTTP connection, and so on.
                 Return File.OpenRead(entryName)
             End Function
            
             Sub MyStreamCloser(entryName As String, stream As Stream)
                 stream.Close()
             End Sub
            
             Public Sub Run()
                 Dim dirToZip As String = "fodder"
                 Dim zipFileToCreate As String = "Archive.zip"
                 Dim opener As OpenDelegate = AddressOf MyStreamOpener
                 Dim closer As CloseDelegate = AddressOf MyStreamCloser
                 Dim numFilestoAdd As Int32 = 4
                 Using zip As ZipFile = New ZipFile
                     Dim i As Integer
                     For i = 0 To numFilesToAdd - 1
                         zip.AddEntry(String.Format("content-{0:000}.txt"), opener, closer)
                     Next i
                     zip.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
             </remarks>
             
             <param name="name">单元名。</param>
             <param name="opener">打开的委托。</param>
             <param name="closer">关掉的委托。</param>
             <returns>增加的单元。</returns>
        </member>
        <member name="M:Py.Zip.ZipFile.ZipEntryCollection.Add(System.String,System.Byte[])">
             <summary>
             增加单元。
             </summary>
            
             <param name="byteContent">字节的内容。</param>
            
             <param name="name">
             单元名字。
             </param>
            
             <returns>增加的单元。</returns>
        </member>
        <member name="T:Py.Windows.IconHelper">
            <summary>
            获取系统图标的小工具。
            </summary>
        </member>
        <member name="M:Py.Windows.IconHelper.GetFileIcon(System.String,System.Boolean)">
            <summary>
            获取文件图标 。
            </summary>
            <param name="path">要获取图标的文件位置。</param>
            <param name="large">说明获取图标的尺寸。</param>
            <returns>图标</returns>
        </member>
        <member name="M:Py.Windows.IconHelper.GetDirectoryIcon(System.Boolean)">
            <summary>
            获取文件夹图标。
            </summary>
            <param name="large">说明获取图标的尺寸。</param>
            <returns>图标</returns>
        </member>
        <member name="T:Py.Windows.CPUInfo">
            <summary>
            获取当前计算机的处理器信息。
            </summary>
        </member>
        <member name="M:Py.Windows.CPUInfo.Update">
            <summary>
            更新目前信息。
            </summary>
        </member>
        <member name="M:Py.Windows.CPUInfo.#ctor">
            <summary>
            初始化 <see cref="T:Py.Windows.CPUInfo"/> 的新实例。
            </summary>
        </member>
        <member name="P:Py.Windows.CPUInfo.ID">
            <summary>
            获取序列号。
            </summary>
        </member>
        <member name="P:Py.Windows.CPUInfo.Size">
            <summary>
            获取大小。
            </summary>
        </member>
        <member name="P:Py.Windows.CPUInfo.Level">
            <summary>
            获取等级。
            </summary>
        </member>
        <member name="P:Py.Windows.CPUInfo.Num">
            <summary>
            获取数目。
            </summary>
        </member>
        <member name="F:Py.Windows.CPUInfo.CPU.ID">
            <summary>
            当前的CPU大小。
            </summary>
        </member>
        <member name="F:Py.Windows.CPUInfo.CPU.Level">
            <summary>
            当前的CPU等级。
            </summary>
        </member>
        <member name="T:Py.Logging.LogLevel">
            <summary>
            代表一个日志或信息的类型的枚举。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Info">
            <summary>
            普通信息。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Verbose">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Success">
            <summary>
            成功。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Warning">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Failure">
            <summary>
            失败。
            </summary>
        </member>
        <member name="F:Py.Logging.LogLevel.Default">
            <summary>
            无。
            </summary>
        </member>
        <member name="T:Py.Logging.LogEventType">
            <summary>
            标识引起日志的事件的类型。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Unknown">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Error">
            <summary>
            由于异常引起。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.User">
            <summary>
            用户操作。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Critical">
            <summary>
            错误或应用程序崩溃。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Authentication">
            <summary>
            由于安全验证的错误。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Verbose">
            <summary>
            调试跟踪。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Start">
            <summary>
            逻辑操作的开始。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Warning">
            <summary>
            非关键性问题。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Information">
            <summary>
            信息性消息。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Abort">
            <summary>
            中断。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Cancel">
            <summary>
            取消。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Suspend">
            <summary>
            逻辑操作的挂起。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Resume">
            <summary>
            逻辑操作的恢复。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Transfer">
            <summary>
            相关标识的更改。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Success">
            <summary>
            逻辑操作的成功完成。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Hint">
            <summary>
            提示。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEventType.Stop">
            <summary>
            逻辑操作的停止。
            </summary>
        </member>
        <member name="T:Py.Logging.LogOptions">
            <summary>
            指定要写入日志中的数据选项。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.None">
            <summary>
            不写入任何元素。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.LogLevel">
            <summary>
            写入日志的等级。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.EventType">
            <summary>
            写入写日志的类型。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.DateTime">
            <summary>
            写入日期和时间。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.Timestamp">
            <summary>
            写入时间戳，该时间戳由 System.Diagnostics.Stopwatch.GetTimestamp() 方法的返回值表示。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.ProcessId">
            <summary>
            写入进程标识，该标识由 System.Diagnostics.Process.Id 属性的返回值表示。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.ThreadId">
            <summary>
            写入线程标识，该标识由当前线程的 System.Threading.Thread.ManagedThreadId 属性的返回值表示。
            </summary>
        </member>
        <member name="F:Py.Logging.LogOptions.Callstack">
            <summary>
            写入调用堆栈，该堆栈由 System.Environment.StackTrace 属性的返回值表示。
            </summary>
        </member>
        <member name="T:Py.Json.JsonException">
            <summary>
            在Json处理时出现的异常。
            </summary>
        </member>
        <member name="M:Py.Json.JsonException.#ctor">
            <summary>
            初始化 JsonException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化 JsonException 类的新实例
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化</param>
        </member>
        <member name="M:Py.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 JsonException 类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象</param>
            <param name="context">有关源或目标的上下文信息</param>
        </member>
        <member name="M:Py.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 JsonException 类的新实例
            </summary>
            <param name="message">解释异常原因的错误信息</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为null，则当前异常在处理内部异常的 catch 块中引发</param>
        </member>
        <member name="T:Py.Json.JsonSyntaxException">
            <summary>
            在Json处理时出现的语法错误异常。
            </summary>
        </member>
        <member name="F:Py.Json.JsonSyntaxException._type">
            <summary>
            表示错误类型。
            </summary>
        </member>
        <member name="F:Py.Json.JsonSyntaxException._position">
            <summary>
            表示发生错误的位置。
            </summary>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor">
            <summary>
            初始化 JsonSyntaxException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(Py.Core.SyntaxErrorType)">
            <summary>
            初始化 JsonSyntaxException 的新实例。
            </summary>
            <param name="type">错误类型。</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(Py.Core.SyntaxErrorType,System.Int32)">
            <summary>
            初始化 JsonSyntaxException 的新实例。
            </summary>
            <param name="type">错误类型。</param>
            <param name="position">发生错误的位置。</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化 JsonSyntaxException 类的新实例
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(Py.Core.SyntaxErrorType,System.String)">
            <summary>
            使用指定类型初始化 JsonSyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(Py.Core.SyntaxErrorType,System.String,System.Int32)">
            <summary>
            初始化 JsonSyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
            <param name="position">发生错误的位置。</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 JsonSyntaxException 类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象</param>
            <param name="context">有关源或目标的上下文信息</param>
        </member>
        <member name="M:Py.Json.JsonSyntaxException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 JsonSyntaxException 类的新实例
            </summary>
            <param name="message">解释异常原因的错误信息</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为null，则当前异常在处理内部异常的 catch 块中引发</param>
        </member>
        <member name="P:Py.Json.JsonSyntaxException.Type">
            <summary>
            获取错误类型。
            </summary>
        </member>
        <member name="P:Py.Json.JsonSyntaxException.Position">
            <summary>
            获取有错误的位置。
            </summary>
        </member>
        <member name="T:Py.Json.JsonSerializerException">
            <summary>
            在Json序列化出现的异常。
            </summary>
        </member>
        <member name="M:Py.Json.JsonSerializerException.#ctor">
            <summary>
            初始化 JsonSerializerException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonSerializerException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化 JsonSerializerException 类的新实例
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化</param>
        </member>
        <member name="M:Py.Json.JsonSerializerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 JsonSerializerException 类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象</param>
            <param name="context">有关源或目标的上下文信息</param>
        </member>
        <member name="M:Py.Json.JsonSerializerException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 JsonSerializerException 类的新实例
            </summary>
            <param name="message">解释异常原因的错误信息</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为null，则当前异常在处理内部异常的 catch 块中引发</param>
        </member>
        <member name="T:Py.Html.HtmlReader">
            <summary>
            表示提供对 HTML 数据进行快速、非缓存、只进访问的读取器。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReader.#ctor">
            <summary>
            初始化 HtmlReader 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(System.IO.Stream)">
            <summary>
            使用指定的流创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="input">包含 HTML 数据的流。
            <see cref="T:Py.Html.HtmlReader"/> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
            <returns>
            一个用于读取数据流中所含数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="input"/> 值为 null。
            </exception>
            <exception cref="T:System.Security.SecurityException">
            	<see cref="T:Py.Html.HtmlReader"/> 没有访问 HTML 数据位置所需的足够权限。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(Py.IO.TextBuffer)">
            <summary>
            使用指定的 <see cref="T:System.IO.TextReader"/> 创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="input">要从中读取 HTML 数据的 <see cref="T:System.IO.TextReader"/>。由于 <see cref="T:System.IO.TextReader"/> 返回的是 Unicode 字符流，因此，<see cref="T:Py.Html.HtmlReader"/> 未使用 HTML 声明中指定的编码对数据流进行解码。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="input"/> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(System.String)">
            <summary>
            使用指定的 URI 创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="inputUri">包含 HTML 数据的文件的 URI。<see cref="T:Py.Html.HtmlUrlResolver"/> 类用于将路径转换为规范化数据表示形式。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputUri"/> 值为 null。
            </exception>
            <exception cref="T:System.Security.SecurityException">
            	<see cref="T:Py.Html.HtmlReader"/> 没有访问 HTML 数据位置所需的足够权限。
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            由 URI 标识的文件不存在。
            </exception>
            <exception cref="T:System.UriFormatException">
            URI 格式不正确。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(System.Uri,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 URI 创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="inputUri">包含 HTML 数据的文件的 URI。<see cref="T:Py.Html.HtmlUrlResolver"/> 类用于将路径转换为规范化数据表示形式。</param>
            <param name="settings">用于配置新的 <see cref="T:Py.Html.HtmlReader" /> 实例的 <see cref="T:Py.Html.HtmlReaderSettings" /> 对象。该值可为 null。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputUri"/> 值为 null。
            </exception>
            <exception cref="T:System.Security.SecurityException">
            	<see cref="T:Py.Html.HtmlReader"/> 没有访问 HTML 数据位置所需的足够权限。
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            由 URI 标识的文件不存在。
            </exception>
            <exception cref="T:System.UriFormatException">
            URI 格式不正确。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(System.IO.Stream,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的流和 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="input">包含 HTML 数据的流。
            <see cref="T:Py.Html.HtmlReader"/> 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
            <param name="settings">用于配置新的 <see cref="T:Py.Html.HtmlReader"/> 实例的 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象。该值可为 null。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="input"/> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(Py.IO.TextBuffer,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:System.IO.TextReader"/> 和 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象创建一个新的 <see cref="T:Py.Html.HtmlReader"/> 实例。
            </summary>
            <param name="input">要从中读取 HTML 数据的 <see cref="T:System.IO.TextReader"/>。由于 <see cref="T:System.IO.TextReader"/> 返回的是 Unicode 字符流，因此，<see cref="T:Py.Html.HtmlReader"/> 未使用 HTML 声明中指定的编码对数据流进行解码</param>
            <param name="settings">用于配置新的 <see cref="T:Py.Html.HtmlReader"/> 的 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象。该值可为 null。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="input"/> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Create(System.String,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 URI 和 <see cref="T:Py.Html.HtmlReaderSettings"/> 创建一个新的实例。
            </summary>
            <param name="inputUri">包含 HTML 数据的文件的 URI。<see cref="T:Py.Html.HtmlReaderSettings"/> 对象上的 <see cref="T:Py.Html.HtmlResolver"/> 对象用于将路径转换为规范化数据表示形式。如果 <see cref="P:Py.Html.HtmlReaderSettings.HtmlResolver"/> 为 null，则使用新的 <see cref="T:Py.Html.HtmlUrlResolver"/> 对象。</param>
            <param name="settings">用于配置新的 <see cref="T:Py.Html.HtmlReader"/> 实例的 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象。该值可为 null。</param>
            <returns>
            用于读取 HTML 数据的 <see cref="T:Py.Html.HtmlReader"/> 对象。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputUri"/> 值为 null。
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            无法找到由该 URI 指定的文件。
            </exception>
            <exception cref="T:System.UriFormatException">
            URI 格式不正确。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Close">
            <summary>
            当在派生类中被重写时，将 <see cref="P:Py.Html.HtmlReader.ReadState" /> 更改为 Closed。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReader.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:Py.Html.HtmlReader" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">
            为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。
            </param>
        </member>
        <member name="M:Py.Html.HtmlReader.System#IDisposable#Dispose">
            <summary>
            有关此成员的说明，请参见 <see cref="M:System.IDisposable.Dispose" />。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlReader.GetAttribute(System.Int32)">
            <summary>
            当在派生类中被重写时，获取具有指定索引的属性的值。
            </summary>
            <returns>
            指定属性的值。此方法不移动读取器。
            </returns>
            <param name="i">
            属性的索引。索引是从零开始的。（第一个属性的索引为 0。）
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="i" /> 超出范围。它必须是非负数且小于属性集合的大小。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.GetAttributeName(System.Int32)">
            <summary>
            当在派生类中被重写时，获取具有指定索引的属性。
            </summary>
            <returns>
            指定属性。此方法不移动读取器。
            </returns>
            <param name="i">
            属性的索引。索引是从零开始的。（第一个属性的索引为 0。）
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="i" /> 超出范围。它必须是非负数且小于属性集合的大小。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.GetAttribute(System.String)">
            <summary>
            当在派生类中被重写时，获取具有指定 <see cref="P:Py.Html.HtmlReader.Name" /> 的属性的值。
            </summary>
            <returns>
            指定属性的值。如果找不到该属性，或者值为 String.Empty，则返回 null。
            </returns>
            <param name="name">
            属性的限定名。
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name" /> 为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.IsName(System.String)">
            <summary>
            获取一个值，该值指示字符串参数是否是有效的 HTML 名称。
            </summary>
            <returns>
            如果该名称有效，则为 true；否则为 false。
            </returns>
            <param name="str">
            要验证的名称。
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str" /> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.IsNameToken(System.String)">
            <summary>
            获取一个值，该值指示该字符串参数是否是有效的 HTML 名称标记。
            </summary>
            <returns>
            如果它是有效的名称标记，则为 true；否则为 false。
            </returns>
            <param name="str">
            要验证的名称标记。
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="str" /> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.IsNameToken(System.Int32)">
            <summary>
            获取一个值，该值指示该字符串参数是否是有效的 HTML 名称标记。
            </summary>
            <param name="c">字符。</param>
            <returns>如果它是有效的名称标记，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlReader.IsWhitespace(System.Int32)">
            <summary>
            获取一个值，该值指示该字符串参数是否是空白字符。
            </summary>
            <param name="c">字符。</param>
            <returns>如果它是空字符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlReader.IsWhitespace(System.Char)">
            <summary>
            获取一个值，该值指示该字符串参数是否是空白字符。
            </summary>
            <param name="c">字符。</param>
            <returns>如果它是空字符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlReader.IsName(System.Char)">
            <summary>
            获取一个值，该值指示该字符串参数是否是有效的 HTML 名称标记。
            </summary>
            <param name="c">字符。</param>
            <returns>如果它是有效的名称标记，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlReader.IsName(System.Int32)">
            <summary>
            获取一个值，该值指示该字符串参数是否是有效的 HTML 名称标记。
            </summary>
            <param name="c">字符。</param>
            <returns>如果它是有效的名称标记，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlReader.IsStartElement">
            <summary>
            调用 <see cref="M:Py.Html.HtmlReader.MoveToContent" /> 并测试当前内容节点是否是开始标记或空元素标记。
            </summary>
            <returns>
            如果 <see cref="M:Py.Html.HtmlReader.MoveToContent" /> 找到开始标记或空元素标记，则为 true；如果找到不同于 HtmlNodeType.Element 的节点类型，则为 false。
            </returns>
            <exception cref="T:Py.Html.HtmlException">
            在输入流中遇到不正确的 HTML。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.IsStartElement(System.String)">
            <summary>
            调用 <see cref="M:Py.Html.HtmlReader.MoveToContent" /> 并测试当前内容节点是否是开始标记或空元素标记，以及所找到元素的 <see cref="P:Py.Html.HtmlReader.Name" /> 属性是否与给定的参数匹配。
            </summary>
            <returns>
            如果结果节点是一个元素并且 Name 属性与指定的字符串匹配，则为 true。如果找到了不是 HtmlNodeType.Element 的节点类型或如果元素 Name 属性与指定的字符串不匹配，则为 false。
            </returns>
            <param name="name">
            与找到的元素的 Name 属性匹配的字符串。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            在输入流中遇到不正确的 HTML。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.LookupNamespace(System.String)">
            <summary>
            当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。
            </summary>
            <returns>
            前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 null。
            </returns>
            <param name="prefix">
            要解析其命名空间 URI 的前缀。若要匹配默认命名空间，请传递一个空字符串。
            </param>
        </member>
        <member name="M:Py.Html.HtmlReader.MoveToContent">
            <summary>
            检查当前节点是否是内容（非空白文本、CDATA、Element、EndElement、EntityReference 或 EndEntity）节点。如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。它跳过以下类型的节点：ProcessingInstruction、DocumentType、Comment、Whitespace 或 SignificantWhitespace。
            </summary>
            <returns>
            此方法找到的当前节点的 <see cref="P:Py.Html.HtmlReader.NodeType" />；如果读取器已到达输入流的末尾，则为 HtmlNodeType.None。
            </returns>
            <exception cref="T:Py.Html.HtmlException">
            在输入流中遇到不正确的 HTML。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.Read">
            <summary>
            当在派生类中被重写时，从流中读取下一个节点。
            </summary>
            <returns>
            如果成功读取了下一个节点，则为 true；如果没有其他节点可读取，则为 false。
            </returns>
            <exception cref="T:Py.Html.HtmlException">
            分析 HTML 时出错。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.ReadEndElement">
            <summary>
            检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
            </summary>
            <exception cref="T:Py.Html.HtmlException">
            当前节点不是一个结束标记，或者如果在输入流中遇到不正确的 HTML。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.ReadStartElement">
            <summary>
            检查当前节点是否为元素并将读取器推进到下一个节点。
            </summary>
            <exception cref="T:Py.Html.HtmlException">
            <see cref="M:Py.Html.HtmlReader.IsStartElement" /> 返回 false。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.ReadStartElement(System.String)">
            <summary>
            检查当前内容节点是否为具有给定 <see cref="P:Py.Html.HtmlReader.Name" /> 的元素并将读取器推进到下一个节点。
            </summary>
            <param name="name">
            元素的限定名。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            <see cref="M:Py.Html.HtmlReader.IsStartElement" /> 返回 false，或者如果元素的 <see cref="P:Py.Html.HtmlReader.Name" /> 与给定的 <paramref name="name" /> 不匹配。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlReader.ReadToFollowing(System.String)">
            <summary>
            一直读取，直到找到具有指定限定名的元素。
            </summary>
            <returns>
            如果找到匹配的元素，则为 true；否则为 false 且 <see cref="T:Py.Html.HtmlReader" /> 位于文件的末尾。
            </returns>
            <param name="name">
            元素的限定名。
            </param>
        </member>
        <member name="M:Py.Html.HtmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
            <summary>
            读取嵌入在 HTML 文档中的大量文本流。
            </summary>
            <returns>
            读取到缓冲区中的字符数。如果不再有文本内容，则返回值零。
            </returns>
            <param name="buffer">
            字符数组，充当文本内容写入到的缓冲区。此值不能为 null。
            </param>
            <param name="index">
            缓冲区中的偏移量，<see cref="T:Py.Html.HtmlReader" /> 可以从这个位置开始复制结果。
            </param>
            <param name="count">
            要复制到缓冲区中的最大字符数。此方法返回复制的实际字符数。
            </param>
            <exception cref="T:System.InvalidOperationException">
            当前节点没有值（<see cref="P:Py.Html.HtmlReader.HasValue" /> 为 false）。
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> 值为 null。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            缓冲区中的索引或者索引与计数之和大于分配的缓冲区大小。
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:Py.Html.HtmlReader" /> 实现不支持此方法。
            </exception>
            <exception cref="T:Py.Html.HtmlException">
            HTML 数据不是格式良好的。
            </exception>
        </member>
        <member name="P:Py.Html.HtmlReader.AttributeCount">
            <summary>
            当在派生类中被重写时，获取当前节点上的属性数。
            </summary>
            <returns>
            当前节点上的属性数。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.EOF">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
            </summary>
            <returns>
            如果此读取器定位在流的结尾，则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.HasAttributes">
            <summary>
            获取一个值，该值指示当前节点是否有任何属性。
            </summary>
            <returns>
            如果当前节点具有属性，则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.HasValue">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示当前节点是否可以具有 <see cref="P:Py.Html.HtmlReader.Value" />。
            </summary>
            <returns>
            如果读取器当前定位在的节点可以具有 Value，则为 true；否则为 false。如果为 false，则节点值为 String.Empty。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.IsDefault">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。
            </summary>
            <returns>
            如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 true；如果属性值是显式设置的，则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.Item(System.String)">
            <summary>
            当在派生类中被重写时，获取具有指定 <see cref="P:Py.Html.HtmlReader.Name" /> 的属性的值。
            </summary>
            <returns>
            指定属性 (Attribute) 的值。如果未找到该属性，则返回 null。
            </returns>
            <param name="name">
            属性的限定名。
            </param>
        </member>
        <member name="P:Py.Html.HtmlReader.Item(System.Int32)">
            <summary>
            当在派生类中被重写时，获取具有指定索引的属性的值。
            </summary>
            <returns>
            指定属性的值。
            </returns>
            <param name="i">
            属性的索引。
            </param>
        </member>
        <member name="P:Py.Html.HtmlReader.LocalName">
            <summary>
            当在派生类中被重写时，获取当前节点的本地名称。
            </summary>
            <returns>
            移除了前缀的当前节点的名称。例如，对于元素 &lt;bk:book&gt;，LocalName 为 book。
            
            对于没有名称的节点类型（如 Text、Comment 等），该属性返回 String.Empty。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.BaseURI">
            <summary>
            当在派生类中被重写时，获取当前节点的基 URI。
            </summary>
            <returns>
            当前节点的基 URI。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.Name">
            <summary>
            当在派生类中被重写时，获取当前节点的限定名。
            </summary>
            <returns>
            当前节点的限定名。例如，对于元素 &lt;bk:book&gt;，Name 为 bk:book。
            
            返回的名称取决于节点的 <see cref="P:Py.Html.HtmlReader.NodeType" />。下列节点类型返回所列的值。所有其他节点类型返回空字符串。
            
            节点类型
            
            名称
            Attribute
            属性名。
            DocumentType
            文档类型名称。
            Element
            标记名。
            EntityReference
            引用的实体的名称。
            ProcessingInstruction
            处理指令的目标。
            HtmlDeclaration
            字符串 xml。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.NamespaceURI">
            <summary>
            当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。
            </summary>
            <returns>
            当前节点的命名空间 URI；否则为空字符串。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.NameTable">
            <summary>
            当在派生类中被重写时，获取与该实现关联的 <see cref="T:Py.Html.HtmlNameTable" />。
            </summary>
            <returns>HtmlNameTable，它使您能够获取该节点内字符串的原子化版本。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.NodeType">
            <summary>
            当在派生类中被重写时，获取当前节点的类型。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeType" /> 值之一，表示当前节点的类型。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.Prefix">
            <summary>
            当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
            </summary>
            <returns>
            与当前节点关联的命名空间前缀。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.IsEmptyElement">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示当前节点是否为空元素（例如 &lt;MyElement/&gt;）。
            </summary>
            <returns>
            如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlReader.NodeType" /> 等于 XmlNodeType.Element），则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.QuoteChar">
            <summary>
            当在派生类中被重写时，获取用于括住属性节点值的引号字符。
            </summary>
            <returns>
            用于括住属性节点值的引号字符（" 、'或 \0） 。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.Settings">
            <summary>
            获取用于创建此 <see cref="T:Py.Html.HtmlReader"/> 实例的 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象。
            </summary>
            <returns>
            用于创建此读取器实例的 <see cref="T:Py.Html.HtmlReaderSettings"/> 对象。如果此读取器不是使用 <see cref="M:Py.Html.HtmlReader.Create(System.IO.Stream,Py.Html.HtmlReaderSettings)"/> 方法创建的，则此属性返回 null。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.Value">
            <summary>
            当在派生类中被重写时，获取当前节点的文本值。
            </summary>
            <returns>
            返回的值取决于节点的 <see cref="P:Py.Html.HtmlReader.NodeType" />。下表列出具有要返回的值的节点类型。所有其他节点类型返回 String.Empty。
            
            节点类型
            
            值
            Attribute
            属性值。
            CDATA
            CDATA 节的内容。
            Comment
            注释的内容。
            DocumentType
            内部子集。
            ProcessingInstruction
            全部内容（不包括指令目标）。
            SignificantWhitespace
            混合内容模型中标记之间的空白。
            Text
            文本节点的内容。
            Whitespace
            标记之间的空白。
            HtmlDeclaration
            声明的内容。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlReader.CanReadValueChunk">
            <summary>
            获取一个值，该值指示 <see cref="T:Py.Html.HtmlReader" /> 是否实现 <see cref="M:Py.Html.HtmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。
            </summary>
            <returns>
            如果 <see cref="T:Py.Html.HtmlReader" /> 实现 <see cref="M:Py.Html.HtmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，则为 true；否则为 false。
            </returns>
        </member>
        <member name="T:Py.Html.HtmlText">
            <summary>
            表示元素或属性的文本内容。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlText.#ctor(System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlText" /> 类的新实例。
            </summary>
            <param name="strData">节点的内容，请参见 <see cref="P:Py.Html.HtmlText.Value" /> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlText.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlText.SplitText(System.Int32)">
            <summary>
            在指定的偏移点将该节点拆分为两个节点，并使树中的这两个节点成为同辈。
            </summary>
            <param name="offset">拆分节点的偏移点。</param>
            <returns>新的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlText.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>将节点的所有子级都保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。由于 HtmlText 节点没有子级，因此该方法无效。</summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlText.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>将节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。</summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlText.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <value></value>
            <returns>对于文本节点，此属性返回 #text。</returns>
        </member>
        <member name="P:Py.Html.HtmlText.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <value></value>
            <returns>对于文本节点，此属性返回 #text。</returns>
        </member>
        <member name="P:Py.Html.HtmlText.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <value></value>
            <returns>对于文本节点，该值是 HtmlNodeType.Text。</returns>
        </member>
        <member name="P:Py.Html.HtmlText.NodeValue">
            <summary>
            获取或设置节点的值。
            </summary>
            <returns>文本节点的内容。</returns>
        </member>
        <member name="T:Py.Html.HtmlNodeChangedEventHandler">
            <summary>
            表示处理以下事件的方法：<see cref="E:Py.Html.HtmlDocument.NodeChanged" />、<see cref="E:Py.Html.HtmlDocument.NodeChanging" />、<see cref="E:Py.Html.HtmlDocument.NodeInserted" />、<see cref="E:Py.Html.HtmlDocument.NodeInserting" />、<see cref="E:Py.Html.HtmlDocument.NodeRemoved" /> 和 <see cref="E:Py.Html.HtmlDocument.NodeRemoving" />。
            </summary>
            <param name="sender">事件源。 </param>
            <param name="e">包含事件数据的 <see cref="T:Py.Html.HtmlNodeChangedEventArgs" />。 </param>
        </member>
        <member name="T:Py.Html.HtmlNodeChangedAction">
            <summary>
            指定节点更改的类型。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeChangedAction.Insert">
            <summary>
            正在将节点插入树中。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeChangedAction.Remove">
            <summary>
            正在从树中移除节点。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeChangedAction.Change">
            <summary>
            正在更改节点值。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlNodeChangedEventArgs">
            <summary>
            提供以下事件的数据：<see cref="E:Py.Html.HtmlDocument.NodeChanged"/>、<see cref="E:Py.Html.HtmlDocument.NodeChanging"/>、<see cref="E:Py.Html.HtmlDocument.NodeInserted"/>、<see cref="E:Py.Html.HtmlDocument.NodeInserting"/>、<see cref="E:Py.Html.HtmlDocument.NodeRemoved"/> 和 <see cref="E:Py.Html.HtmlDocument.NodeRemoving"/>。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNodeChangedEventArgs.#ctor(Py.Html.HtmlNode,Py.Html.HtmlNode,Py.Html.HtmlNode,System.String,System.String,Py.Html.HtmlNodeChangedAction)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlNodeChangedEventArgs"/> 类的新实例。
            </summary>
            <param name="node">生成了该事件的 <see cref="T:Py.Html.HtmlNode"/>。</param>
            <param name="oldParent">生成了该事件的 <see cref="T:Py.Html.HtmlNode"/> 的旧父级 <see cref="T:Py.Html.HtmlNode"/>。</param>
            <param name="newParent">The new parent。</param>
            <param name="oldValue">生成了该事件的 <see cref="T:Py.Html.HtmlNode"/> 的旧值。</param>
            <param name="newValue">生成了该事件的 <see cref="T:Py.Html.HtmlNode"/> 的新值。</param>
            <param name="action"><see cref="T:Py.Html.HtmlNodeChangedAction"/>。</param>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.Action">
            <summary>
            获取一个值，该值指示正在发生哪种类型的节点更改事件。
            </summary>
            <returns>描述节点更改事件的 HtmlNodeChangedAction 值。HtmlNodeChangedAction 值 说明 插入 已插入或将插入节点。 移除 已移除或将移除节点。 更改 已更改或将更改节点。 说明：Action 值不区分事件何时发生（之前或之后）。您可以创建单独的事件处理程序来处理两种情况。</returns>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.NewParent">
            <summary>
            获取操作完成后 <see cref="P:Py.Html.HtmlNode.ParentNode"/> 的值。
            </summary>
            <returns>操作完成后 ParentNode 的值。如果节点正被移除，此属性返回 null。说明：对于属性节点，此属性返回 <see cref="P:Py.Html.HtmlAttribute.OwnerElement"/>。</returns>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.NewValue">
            <summary>
            获取节点的新值。
            </summary>
            <returns>节点的新值。如果节点既不是属性 (Attribute) 节点也不是文本节点，或者节点要被移除，则此属性 (Property) 将返回 null。如果在 <see cref="E:Py.Html.HtmlDocument.NodeChanging"/> 事件中调用 NewValue，则在更改成功后返回节点的值。如果在 <see cref="E:Py.Html.HtmlDocument.NodeChanged"/> 事件中调用 NewValue，将返回节点的当前值。</returns>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.Node">
            <summary>
            获取正被添加、移除或更改的 <see cref="T:Py.Html.HtmlNode"/>。
            </summary>
            <returns>正被添加、移除或更改的 HtmlNode；此属性从不返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.OldParent">
            <summary>
            获取操作开始前的 <see cref="P:Py.Html.HtmlNode.ParentNode" /> 的值。
            </summary>
            <returns>操作开始前 ParentNode 的值。如果节点不具有父级，则此属性返回 null。说明：对于属性节点，此属性返回 <see cref="P:Py.Html.HtmlAttribute.OwnerElement" />。</returns>
        </member>
        <member name="P:Py.Html.HtmlNodeChangedEventArgs.OldValue">
            <summary>
            获取节点的原始值。
            </summary>
            <returns>节点的原始值。如果节点既不是特性节点也不是文本节点，或者节点要被插入，此属性将返回 null。如果在 <see cref="E:Py.Html.HtmlDocument.NodeChanging" /> 事件中调用 OldValue，则在更改成功后返回将被替换的节点的当前值。如果在 <see cref="E:Py.Html.HtmlDocument.NodeChanged" /> 事件中调用 OldValue，则将返回更改前节点的值。</returns>
        </member>
        <member name="T:Py.Text.XmlHelper">
            <summary>
            提供 XML 文档的辅助操作。
            </summary>
        </member>
        <member name="T:Py.Core.Base.HelperBase">
            <summary>
            为所有辅助类提供抽象基类。
            </summary>
        </member>
        <member name="M:Py.Core.Base.HelperBase.ClearError">
            <summary>
            清除并忽视错误。
            </summary>
        </member>
        <member name="M:Py.Core.Base.HelperBase.OnError(System.Exception)">
            <summary>
            触发一个错误事件。
            </summary>
            <param name="e">错误产生的异常。</param>
        </member>
        <member name="M:Py.Core.Base.HelperBase.OnError(System.String)">
            <summary>
            触发一个错误事件。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:Py.Core.Base.HelperBase.OnError(System.String,System.String[])">
            <summary>
            触发一个错误事件。
            </summary>
            <param name="message">描述错误的消息。</param>
            <param name="args">格式化信息的内容。</param>
        </member>
        <member name="M:Py.Core.Base.HelperBase.OnError(System.Exception,System.String)">
            <summary>
            触发一个错误事件。
            </summary>
            <param name="e">错误产生的异常。</param>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="E:Py.Core.Base.HelperBase.Error">
            <summary>
            当类内部发生已知异常时触发。
            </summary>
        </member>
        <member name="P:Py.Core.Base.HelperBase.LastError">
            <summary>
            获取最后产生的异常。
            </summary>
        </member>
        <member name="P:Py.Core.Base.HelperBase.LastErrorMessage">
            <summary>
            获取最后产生的异常信息。
            </summary>
        </member>
        <member name="P:Py.Core.Base.HelperBase.HasError">
            <summary>
            获取一个值，该值指示此操作类是否出现错误。
            </summary>
        </member>
        <member name="F:Py.Text.XmlHelper._xmlFile">
            <summary>
            文件位置。
            </summary>
        </member>
        <member name="F:Py.Text.XmlHelper._xmlDoc">
            <summary>
            实例。
            </summary>
        </member>
        <member name="M:Py.Text.XmlHelper.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Text.XmlHelper"/> 的新实例。
            </summary>
            <param name="xmlFile">打开的文件。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.GetDataView(System.String)">
            <summary>
            获取指定节点的数据表。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
            <returns>数据表。</returns>
        </member>
        <member name="M:Py.Text.XmlHelper.SetInnerText(System.String,System.String)">
            <summary>
            设置节点的内容。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.Delete(System.String)">
            <summary>
            删除指定节点。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.InsertNode(System.String,System.String,System.String,System.String)">
            <summary>
            插入一个节点。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="childNode">子节点。</param>
            <param name="element">元素。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.InsertElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个元素。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="element">元素。</param>
            <param name="attr">属性。</param>
            <param name="attrContent">属性值。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.InsertElement(System.String,System.String,System.String)">
            <summary>
            插入一个元素。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="element">元素。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:Py.Text.XmlHelper.Save">
            <summary>
            保存当前位置。
            </summary>
        </member>
        <member name="T:Py.Core.Base.TextFileBase">
            <summary>
            为所有以文本方式支持单一文件操作的类提供抽象基类。
            </summary>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.GetStreamReader">
            <summary>
            获取一个用于读取当前文本的流。
            </summary>
            <returns>一个读取工具。</returns>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.GetStreamWriter(System.Boolean)">
            <summary>
            获取一个用于读取当前文本的流。
            </summary>
            <returns>一个写工具。</returns>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor">
            <summary>
            初始化当前文件新实例。
            </summary>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor(System.Text.Encoding)">
            <summary>
            使用指定编码初始化当前文件新实例。
            </summary>
            <param name="encoding">编码。</param>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor(System.String)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor(System.String,System.Text.Encoding)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="encoding">编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.#ctor(System.String,Py.Core.FileAction,System.Text.Encoding)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <param name="encoding">编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.Create(System.String,System.Text.Encoding,Py.Core.OverwriteType)">
            <summary>
            创建一个新文件。
            </summary>
            <param name="savePath">保存的文件名。</param>
            <param name="encoding">文件的编码。</param>
            <param name="overwrite">覆盖方式 。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.Open(System.String,System.Text.Encoding)">
            <summary>
            载入指定的文件。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="encoding">文件的编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.ReadAllText">
            <summary>
            读取当前文档的全部内容。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.ReadAllLines">
            <summary>
            读取文件的所有行。
            </summary>
            <returns>表示所有的行。</returns>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.WriteAllText(System.String)">
            <summary>
            读取当前文档的全部内容。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Base.TextFileBase.WriteAllLines(System.String[])">
            <summary>
            读取文件的所有行。
            </summary>
            <returns>表示所有的行。</returns>
        </member>
        <member name="P:Py.Core.Base.TextFileBase.Encoding">
            <summary>
            获取当前文档使用的编码。
            </summary>
        </member>
        <member name="T:Py.RunTime.CString">
            <summary>
            代表一个C字符串。
            </summary>
            <remarks>提供 C++ 头文件 string.h 提供的功能。</remarks>
        </member>
        <member name="F:Py.RunTime.CString.NULL">
            <summary>
            空。相当'\0'。
            </summary>
        </member>
        <member name="M:Py.RunTime.CString.#ctor">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="length">长度。</param>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.Char*)">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="value">指针。</param>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.Char[])">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="value">数组。</param>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="value">数组。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:Py.RunTime.CString.#ctor(System.Char,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.CString"/> 的新实例。
            </summary>
            <param name="ch">字符。</param>
            <param name="count">个数。</param>
        </member>
        <member name="M:Py.RunTime.CString.op_Implicit(Py.RunTime.CString)~System.String">
            <summary>
            实现 <see cref="T:Py.RunTime.CString"/> 到 <see cref="T:System.String"/>的隐形转换。
            </summary>
            <param name="s">字符串。</param>
            <returns>转换结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Explicit(Py.RunTime.CString)~System.Char*">
            <summary>
            实现<see cref="T:Py.RunTime.CString"/> 到 <see cref="T:System.Char*"/>的隐形转换。
            </summary>
            <param name="s">字符串。</param>
            <returns>字符串串指针。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Explicit(Py.RunTime.CString)~System.Char[]">
            <summary>
            实现<see cref="T:Py.RunTime.CString"/> 到 <see cref="T:System.Char*"/>的隐形转换。
            </summary>
            <param name="s">字符串。</param>
            <returns>字符串串指针。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_True(Py.RunTime.CString)">
            <summary>
            实现操作符 operator true。
            </summary>
            <param name="s">用于计算的值1</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_False(Py.RunTime.CString)">
            <summary>
            实现操作符 operator true。
            </summary>
            <param name="s">用于计算的值1</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Explicit(Py.RunTime.CString)~System.Boolean">
            <summary>
            实现 <see cref="T:Py.RunTime.CString"/> 到 <see cref="T:System.Boolean"/>的转换。
            </summary>
            <param name="s">字符串。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Equality(Py.RunTime.CString,Py.RunTime.CString)">
            <summary>
            实现操作符 operator ==。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Inequality(Py.RunTime.CString,Py.RunTime.CString)">
            <summary>
            实现操作符 operator !=。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_LessThan(Py.RunTime.CString,Py.RunTime.CString)">
            <summary>
            实现操作符 operator &lt;。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_GreaterThan(Py.RunTime.CString,Py.RunTime.CString)">
            <summary>
            实现操作符 operator &gt;。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Addition(Py.RunTime.CString,Py.RunTime.CString)">
            <summary>
            实现操作符 operator +。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Addition(Py.RunTime.CString,System.String)">
            <summary>
            实现操作符 operator +。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="s2">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.op_Multiply(Py.RunTime.CString,System.Int32)">
            <summary>
            实现操作符 operator *。
            </summary>
            <param name="s1">用于计算的值1</param>
            <param name="num">用于计算的值2</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.RunTime.CString.ToString">
            <summary>
            返回该实例的完全限定类型名。
            </summary>
            <returns>
            包含完全限定类型名的 <see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.Equals(System.Object)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="obj">要比较的另一个对象。</param>
            <returns>
            如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.Equals(System.String)">
            <summary>
            和字符串相等。
            </summary>
            <param name="s">字符串。</param>
            <returns>如果 <paramref name="s"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.RunTime.CString.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
            <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcpy(System.Char*,System.Char*)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcpy(System.Char*,System.Char[])">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strncpy(System.Char*,System.Char[],System.Int32,System.Int32)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strmove(System.Char*,System.UInt32,System.Int32)">
            <summary>
            将字符串src移动到偏移offset指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="len">长度。</param>
            <param name="offset">偏移数，正数往右。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strncpy(System.Char*,System.String,System.Int32,System.Int32)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="startIndex">起始位置。</param>
            <param name="count">个数。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcpy(System.Char*,System.String)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strncpy(System.Char*,System.Char*,System.UInt32)">
            <summary>
            将一定长度字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="len">长度。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.memcpy(System.Void*,System.Void*,System.UInt32)">
            <summary>
            实现字符串内存复制。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="count">个数。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.memmove(System.Void*,System.Void*,System.UInt32)">
            <summary>
            实现字符串内存移动。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="count">个数。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strxfrm(System.Char*,System.Char*,System.UInt32)">
            <summary>
            根据程序当前的区域选项, 将dest的前len个字符(字节)复制到src中指定的地址, 不加'\0'。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="len">长度。</param>
            <returns>复制的个数。</returns>
        </member>
        <member name="F:Py.RunTime.CString.strtok_last">
            <summary>
            用于标记 strtok 最后一次字符的字符指针。
            </summary>
        </member>
        <member name="M:Py.RunTime.CString.strtok(System.Char*,System.Char*)">
            <summary>
            从串s1中分离出由串s2中指定的分界符分隔开的记号(token)
            第一次调用时s1为需分割的字串, 此后每次调用都将s1置为
            null,每次调用strtok返回一个记号, 直到返回null为止。
            每次使用时可设strtok_last为null。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="seperater">分割字符。</param>
            <returns>返回下一个分割后的字符串指针，如果已无从分割则返回null。</returns>
        </member>
        <member name="M:Py.RunTime.CString.memset(System.Void*,System.Int32,System.UInt32)">
            <summary>
            批量设置指定内容的内存。
            </summary>
            <param name="dest">目标位置。</param>
            <param name="val">值。</param>
            <param name="count">个数。</param>
            <returns>原目标位置。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strlen(System.Char*)">
            <summary>
            根据一个字符串返回其长度。
            </summary>
            <param name="s">字符串。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strerror(System.Int32)">
            <summary>
            返回指向错误信息字符串的指针。这个函数不支持。
            </summary>
            <param name="error">错误号。</param>
            <returns>错误。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcat(System.Char*,System.Char*)">
            <summary>
            将字符串s2连接到s1尾部。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcat(System.Char*,System.String)">
            <summary>
            将字符串s2连接到s1尾部。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strncat(System.Char*,System.Char*,System.UInt32)">
            <summary>
            将字符串s2连接到s1尾部。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="len">长度。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcmp(System.Char*,System.Char*)">
            <summary>
            比较字符串s1和s2。
            </summary>
            <param name="s1">字符串。</param>
            <param name="s2">字符串。</param>
            <returns>发生不相同的值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcmp(System.Char*,System.String)">
            <summary>
            比较字符串s1和s2。
            </summary>
            <param name="s1">字符串。</param>
            <param name="s2">字符串。</param>
            <returns>发生不相同的值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strncmp(System.Char*,System.Char*,System.UInt32)">
            <summary>
            比较一定长度内字符串s1和s2。
            </summary>
            <param name="s1">字符串。</param>
            <param name="s2">字符串。</param>
            <param name="len">长度。</param>
            <returns>发生不相同的值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.memcmp(System.Void*,System.Void*,System.UInt32)">
            <summary>
            对s1和s2的前len个字符(字节)作比较。
            </summary>
            <param name="s1">字符串。</param>
            <param name="s2">字符串。</param>
            <param name="count">个数。</param>
            <returns>发生不相同的值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcoll(System.Char*,System.Char*)">
            <summary>
            根据程序当前的区域选项中的LC_COLLATE, 比较字符串s1和s2。不支持。
            </summary>
            <param name="s1">字符串。</param>
            <param name="s2">字符串。</param>
            <returns>发生不相同的值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.str(System.String)">
            <summary>
            根据一个 .net 字符串转换为 char* 。
            </summary>
            <param name="src">字符串源。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:Py.RunTime.CString.str(System.Int32)">
            <summary>
            根据一个长度创建指定空间的 char* 。
            </summary>
            <param name="length">字符串的长度。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:Py.RunTime.CString.str(System.Char[])">
            <summary>
            根据一个 .net 字符串转换为 char* 。
            </summary>
            <param name="src">字符串源。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:Py.RunTime.CString.str(System.Char[],System.Int32,System.Int32)">
            <summary>
            根据一个 char[] 转换为 char* 。
            </summary>
            <param name="src">字符串源。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:Py.RunTime.CString.str(System.Char*,System.Int32,System.Int32)">
            <summary>
            根据一个 char* 字符串转换为 char* 。
            </summary>
            <param name="src">字符串源。</param>
            <param name="length">新 char* 长度。</param>
            <param name="count">个数。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strchr(System.Char*,System.Int32)">
            <summary>
            在str中查找给定字符(字节值)ch第一次出现的位置。
            </summary>
            <param name="str">字符串。</param>
            <param name="ch">字符。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strchr(System.Char*,System.Char)">
            <summary>
            在str中查找给定字符(字节值)ch第一次出现的位置。
            </summary>
            <param name="str">字符串。</param>
            <param name="ch">字符。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strchr(System.Char*,System.Char,System.Int32,System.Int32)">
            <summary>
            在str中查找给定字符(字节值)ch第一次出现的位置。
            </summary>
            <param name="str">字符串。</param>
            <param name="ch">字符。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strstr(System.Char*,System.Char*)">
            <summary>
            在串s1中查找指定字符串s2第一次出现的位置。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strstr(System.Char*,System.String)">
            <summary>
            在串s1中查找指定字符串s2第一次出现的位置。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strstr(System.Char*,System.String,System.Int32,System.Int32)">
            <summary>
            在串s1中查找指定字符串s2第一次出现的位置。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strspn(System.Char*,System.Char*)">
            <summary>
            返回s1中第一个在s2中不存在的字符的索引。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <returns>出现的位置。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strpbrk(System.Char*,System.Char*)">
            <summary>
             返回s1中第一个在s2中不存在的字符的索引。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <returns>出现的字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strcspn(System.Char*,System.Char*)">
            <summary>
            返回s1中第一个也在s2中存在的字符的位置。
            </summary>
            <param name="s1">用于被查找的字符串。</param>
            <param name="s2">用于查找的字符串。</param>
            <returns>出现的位置。</returns>
        </member>
        <member name="M:Py.RunTime.CString.strrev(System.Char*)">
            <summary>
            字符串翻转。
            </summary>
            <param name="str">字符串。</param>
            <returns>翻转的字符串。</returns>
        </member>
        <member name="M:Py.RunTime.CString.ToString(System.Char*)">
            <summary>
            将一个字符串指针转换为  .net 的string实例。
            </summary>
            <param name="src">来源指针。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.RunTime.CString.wstrcpy(System.Char*,System.Char*,System.Int32)">
            <summary>
            长字符串的拷贝。
            </summary>
            <param name="dmem">目标位置。</param>
            <param name="smem">源字符串。</param>
            <param name="charCount">复制的个数。</param>
        </member>
        <member name="M:Py.RunTime.CString.CompareTo(System.Object)">
            <summary>
            比较当前实例与同一类型的另一对象。
            </summary>
            <param name="obj">与此实例进行比较的对象。</param>
            <returns>
            一个 32 位有符号整数，指示要比较的对象的相对顺序。返回值的含义如下： 值 含义 小于零 此实例小于 <paramref name="obj"/>。零 此实例等于 <paramref name="obj"/>。大于零 此实例大于 <paramref name="obj"/>。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> 不具有与此实例相同的类型。</exception>
        </member>
        <member name="M:Py.RunTime.CString.CompareTo(System.String)">
            <summary>
            比较当前对象和同一类型的另一对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            一个 32 位有符号整数，指示要比较的对象的相对顺序。返回值的含义如下： 值 含义 小于零 此对象小于 <paramref name="other"/> 参数。零 此对象等于 <paramref name="other"/>。 大于零 此对象大于 <paramref name="other"/>。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns>作为此实例副本的新对象。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#GetTypeCode">
            <summary>
            返回此实例的 <see cref="T:System.TypeCode"/>。
            </summary>
            <returns>
            枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode"/>。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Boolean 值。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 Boolean 值。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将该实例的值转换为等效的 8 位无符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与该实例的值等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Unicode 字符。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 Unicode 字符。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.DateTime"/>。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>
            与此实例的值等效的 <see cref="T:System.DateTime"/> 实例。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.Decimal"/> 数字。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>
            与此实例的值等效的 <see cref="T:System.Decimal"/> 数字。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的双精度浮点数字。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的双精度浮点数字。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位有符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 16 位有符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位有符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 32 位有符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位有符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 64 位有符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位有符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的 8 位有符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的单精度浮点数字。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与此实例的值等效的单精度浮点数字。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.String"/>。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>
            与此实例的值等效的 <see cref="T:System.String"/> 实例。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将此实例的值转换为具有等效值的指定 <see cref="T:System.Type"/> 的 <see cref="T:System.Object"/>。
            </summary>
            <param name="conversionType">要将此实例的值转换为的 <see cref="T:System.Type"/>。</param>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>
            其值与此实例值等效的 <paramref name="conversionType"/> 类型的 <see cref="T:System.Object"/> 实例。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将该实例的值转换为等效的 16 位无符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与该实例的值等效的 16 位无符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将该实例的值转换为等效的 32 位无符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与该实例的值等效的 32 位无符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将该实例的值转换为等效的 64 位无符号整数。
            </summary>
            <param name="provider"><see cref="T:System.IFormatProvider"/> 接口实现，提供区域性特定的格式设置信息。</param>
            <returns>与该实例的值等效的 64 位无符号整数。</returns>
        </member>
        <member name="M:Py.RunTime.CString.CompareTo(Py.RunTime.CString)">
            <summary>
            比较当前对象和同一类型的另一对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            一个 32 位有符号整数，指示要比较的对象的相对顺序。返回值的含义如下： 值 含义 小于零 此对象小于 <paramref name="other"/> 参数。零 此对象等于 <paramref name="other"/>。 大于零 此对象大于 <paramref name="other"/>。
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> 为空。</exception>
        </member>
        <member name="M:Py.RunTime.CString.GetEnumerator">
            <summary>
            返回遍历器。
            </summary>
            <returns>CharEnumerator。</returns>
        </member>
        <member name="M:Py.RunTime.CString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.Equals(Py.RunTime.CString)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.RunTime.CString.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="P:Py.RunTime.CString.Item(System.Int32)">
            <summary>
            获取或设置此实例中指定字符位置处的字符。
            </summary>
            <param name="index">字符的位置。</param>
            <returns> index 位置处的 Unicode 字符。</returns>
        </member>
        <member name="P:Py.RunTime.CString.Buffer">
            <summary>
            获取表示当前字符串的缓存。
            </summary>
        </member>
        <member name="P:Py.RunTime.CString.Length">
            <summary>
            获取当前字符串的长度。
            </summary>
        </member>
        <member name="T:Py.Logging.MultiLogListener">
            <summary>
            将日志记录到一个或更多个日志监听器。
            </summary>
        </member>
        <member name="T:Py.Logging.LogListener">
            <summary>
            为日志输出的侦听器提供抽象基类。
            </summary>
        </member>
        <member name="F:Py.Logging.LogListener.lockObject">
            <summary>
            用于同步的变量。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Indent">
            <summary>
            增加一个缩进。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.UnIndent">
            <summary>
            减小一个缩进。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.LogListener"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.#ctor(Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.LogListener"/> 的新实例。
            </summary>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Finalize">
            <summary>
            释放 <see cref="T:Py.Logging.LogListener"/> 所占用的资源。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Close">
            <summary>
            刷新输出缓冲区，关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Clear(System.DateTime)">
            <summary>
            清除指定时间之前的全部日志。
            </summary>
            <param name="dt">时间。</param>
            <exception cref="T:System.NotSupportedException">此监听器不支持清除已有的日志。</exception>
        </member>
        <member name="M:Py.Logging.LogListener.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Start">
            <summary>
            记录一个开始信息。不标记。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Start(System.String)">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Start(System.String,System.String[])">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Stop(System.String)">
            <summary>
            记录一个结束信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Warn(System.String)">
            <summary>
            记录一个警告。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.WarnIf(System.Boolean,System.String,System.Object[])">
            <summary>
            如果<paramref name="condition"/>等于 true， 记录一个警告。
            </summary>
            <param name="condition">记录的条件。</param>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Warn(System.String,System.Object[])">
            <summary>
            记录一个警告。
            </summary>
            <param name="message">需要记录的内容。</param>\
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Warn(System.Object)">
            <summary>
            记录一个警告。
            </summary>
            <param name="value">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Error(System.String)">
            <summary>
            记录一个错误。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Error(System.String,System.Object[])">
            <summary>
            记录一个错误。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Error(System.Object)">
            <summary>
            记录一个错误。
            </summary>
            <param name="e">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Fatal(System.String)">
            <summary>
            记录一个失败记录。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Fatal(System.String,System.Object[])">
            <summary>
            记录一个失败记录。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Fatal(System.Object,System.Object[])">
            <summary>
            记录一个失败记录。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Info(System.String)">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Info(System.String,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Debug(System.String)">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Debug(System.Object[])">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Debug(System.Object)">
            <summary>
            记录调试的一个信息。
            </summary>
            <param name="value">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Success(System.String)">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Success(System.String,System.Object[])">
            <summary>
            记录一个信息。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.End">
            <summary>
            记录一个开始信息。不标记。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.End(System.String)">
            <summary>
            记录一个开始信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.LogListener.End(System.Object)">
            <summary>
            记录一个结束信息。
            </summary>
            <param name="message">描述的信息。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Dir(System.Object)">
            <summary>
            遍历指定的对象。
            </summary>
            <param name="obj">对象。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Write(System.String)">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Write(System.String,System.Object[])">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Write(System.Object)">
            <summary>
            记录一个文本。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Write">
            <summary>
            记录一个回车。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.WriteIf(System.Boolean,System.String,System.Object[])">
            <summary>
            如果<paramref name="condition"/>等于 true，记录一个文本。
            </summary>
            <param name="condition">记录的条件。</param>
            <param name="message">描述的信息。</param>
            <param name="args">数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(System.String,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(System.String)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(System.String,Py.Logging.LogLevel,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="message">需要记录的内容。</param>
            <param name="level">日志的级别。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，实现保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entry"/> 为空。</exception>
        </member>
        <member name="M:Py.Logging.LogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，实现保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(Py.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            记录一个日志。
            </summary>
            <param name="level">日志等级。</param>
            <param name="message">需要记录的内容。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:Py.Logging.LogListener.Log(System.Object,Py.Logging.LogLevel,Py.Logging.LogEventType)">
            <summary>
            记录一个日志。
            </summary>
            <param name="value">需要记录的内容。</param>
            <param name="level">日志的级别。</param>
            <param name="type">引起日志的事件类型。</param>
        </member>
        <member name="M:Py.Logging.LogListener.RegisterConverter``1(Py.Core.Func{``0,System.String})">
            <summary>
            注册一个类型的转换器。
            </summary>
            <param name="action">转换工具。</param>
        </member>
        <member name="F:Py.Logging.LogListener._disabled">
            <summary>
            存储启用的结构。
            </summary>
        </member>
        <member name="M:Py.Logging.LogListener.Disabled(Py.Logging.LogLevel)">
            <summary>
            确定一个等级输出是否未启用。
            </summary>
            <param name="level">等级。</param>
            <returns>如果禁用则返回 true， 否则返回 false。</returns>
        </member>
        <member name="P:Py.Logging.LogListener.IsThreadSafe">
            <summary>
            获取一个值，该值指示跟踪侦听器是否是线程安全的。
            </summary>
            <value>如果跟踪侦听器是线程安全的，则为 true；否则为 false。默认值为 false。</value>
        </member>
        <member name="P:Py.Logging.LogListener.UseGlobalLock">
            <summary>
            获取或设置一个值，该值指示是否应当使用全局锁。
            </summary>
            <value>如果要使用全局锁，则为 true；否则为 false。默认为 true。</value>
        </member>
        <member name="P:Py.Logging.LogListener.FormatProvider">
            <summary>
            获取或设置字符串格式化机制。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.AutoFlush">
            <summary>
            获取或设置是否在增加日志后自动使用 Flush() 输出缓存。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.LoggingStringConverter">
            <summary>
            获取或设置使用的变量至字符串的转换实例。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IndentLevel">
            <summary>
            获取或设置缩进级别。
            </summary>
            <value>缩进级别。默认值为零。</value>
        </member>
        <member name="P:Py.Logging.LogListener.IndentSize">
            <summary>
            获取或设置缩进的空格数。
            </summary>
            <value>缩进的空格数。默认值为四。</value>
        </member>
        <member name="P:Py.Logging.LogListener.IsEnabled">
            <summary>
            快速设置全部禁用状态。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsErrorEnabled">
            <summary>
            获取或设置是否启用错误记录。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsFatalEnabled">
            <summary>
            获取或设置是否启用失败日志。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsInfoEnabled">
            <summary>
            获取或设置是否启用信息日志。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsWarnEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsSuccessEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsDefaultLogLevelEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="P:Py.Logging.LogListener.IsVerboseEnabled">
            <summary>
            获取或设置是否启用警告日志。
            </summary>
        </member>
        <member name="F:Py.Logging.MultiLogListener._loggers">
            <summary>
            所有监听器。
            </summary>
        </member>
        <member name="M:Py.Logging.MultiLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.MultiLogListener.#ctor(Py.Logging.LogListener)">
            <summary>
            初始化 <see cref="T:Py.Logging.MultiLogListener"/> 的新实例。
            </summary>
            <param name="logger">日志记录者。</param>
        </member>
        <member name="M:Py.Logging.MultiLogListener.#ctor(Py.Logging.LogListener,Py.Logging.LogListener)">
            <summary>
            初始化 <see cref="T:Py.Logging.MultiLogListener"/> 的新实例。
            </summary>
            <param name="loggerA">日志记录者A。</param>
            <param name="loggerB">日志记录者B。</param>
        </member>
        <member name="M:Py.Logging.MultiLogListener.#ctor(System.Collections.Generic.IList{Py.Logging.LogListener})">
            <summary>
            初始化 <see cref="T:Py.Logging.MultiLogListener"/> 的新实例。
            </summary>
            <param name="loggers">日志记录者。</param>
        </member>
        <member name="M:Py.Logging.MultiLogListener.Close">
            <summary>
            关闭当前日志记录下所有记录器中使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.MultiLogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Logging.MultiLogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            记录一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="P:Py.Logging.MultiLogListener.UseGlobalLock">
            <summary>
            获取或设置一个值，该值指示是否应当使用全局锁。
            </summary>
            <value>如果要使用全局锁，则为 true；否则为 false。默认为 true。</value>
        </member>
        <member name="P:Py.Logging.MultiLogListener.AutoFlush">
            <summary>
            获取或设置是否在增加日志后自动使用 Flush() 输出缓存。
            </summary>
        </member>
        <member name="P:Py.Logging.MultiLogListener.IsThreadSafe">
            <summary>
            获取一个值，该值指示跟踪侦听器是否是线程安全的。
            </summary>
            <value>如果跟踪侦听器是线程安全的，则为 true；否则为 false。默认值为 false。</value>
        </member>
        <member name="T:Py.Drawing.ImageFile">
            <summary>
            所有图片文件的基类。
            </summary>
        </member>
        <member name="M:Py.Drawing.ImageFile.#ctor">
            <summary>
            初始化 <see cref="T:Py.Drawing.ImageFile"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Drawing.ImageFile.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Drawing.ImageFile"/> 的新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            初始化 <see cref="T:Py.Drawing.ImageFile"/> 的新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Drawing.ImageFile.GetFormat(System.String)">
            <summary>
            由文件名得到图片格式。
            </summary>
            <param name="name">文件名称。</param>
            <returns>格式。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.GetExtension(System.Drawing.Imaging.ImageFormat)">
            <summary>
            由文件格式得到图片扩展名，有点。
            </summary>
            <param name="imageFormat">文件格式。</param>
            <returns>格式。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.GetCodecInfo(System.String)">
            <summary>
            获取图像编码解码器的所有相关信息
            </summary>
            <param name="mimeType">包含编码解码器的多用途网际邮件扩充协议 (MIME) 类型的字符串</param>
            <returns>返回图像编码解码器的所有相关信息</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Drawing.Size,System.Int32,System.Int32)">
            <summary>
            把一个尺寸等比例减小，使宽或高等于指定的最大值。
            </summary>
            <param name="size">原始的尺寸。</param>
            <param name="maxWidth">最大新宽度。</param>
            <param name="maxHeight">最大新高度。</param>
            <returns>返回新的大小。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Drawing.SizeF,System.Int32,System.Int32)">
            <summary>
            把一个尺寸等比例减小，使宽或高等于指定的最大值。
            </summary>
            <param name="size">原始的尺寸。</param>
            <param name="maxWidth">最大新宽度。</param>
            <param name="maxHeight">最大新高度。</param>
            <returns>返回新的大小。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            把一个尺寸等比例减小，使宽或高等于指定的最大值。
            </summary>
            <param name="width">原始宽度。</param>
            <param name="height">原始高度。</param>
            <param name="maxWidth">最大新宽度。</param>
            <param name="maxHeight">最大新高度。</param>
            <returns>返回新的大小。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            把一个尺寸等比例减小，使宽或高等于指定的最大值。
            </summary>
            <param name="width">原始宽度。</param>
            <param name="height">原始高度。</param>
            <param name="maxWidth">最大新宽度。</param>
            <param name="maxHeight">最大新高度。</param>
            <returns>返回新的大小。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Drawing.Size,System.Drawing.Size,System.Double)">
            <summary>
            根据指定图片缩小。
            </summary>
            <param name="image">第一个图片大小。</param>
            <param name="image2">更改的大小。</param>
            <param name="percent">缩小比例。</param>
            <returns>大小，这个尺寸小于等于原图的 1 / <paramref name="percent"/></returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            根据指定图片缩小。
            </summary>
            <param name="image">第一个图片大小。</param>
            <param name="maxWidth">需要的最大大小。</param>
            <param name="maxHeight">需要的最大的高。</param>
            <returns>更改后副本。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.Resize(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            把一个尺寸等比例减小，使宽或高等于指定的最大值。
            </summary>
            <param name="size">原始的尺寸。</param>
            <param name="maxSize">最大同大小。</param>
            <returns>返回新的大小。</returns>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveThumbnail(System.String,System.String,System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort)">
            <summary>
            生成缩略图并保存。
            </summary>
            <param name="filePath">源文件名。</param>
            <param name="newFilePath">新文件名。</param>
            <param name="width">缩略图的宽度。</param>
            <param name="height">缩略图的高度。</param>
            <param name="callBack">中断回调函数。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
            <exception cref="T:System.NotSupportedException">GDI+ 不支持文件的像素格式。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveThumbnail(System.String,System.String,System.Drawing.Size)">
            <summary>
            生成缩略图并保存。
            </summary>
            <param name="filePath">源文件名。</param>
            <param name="newFilePath">新文件名。</param>
            <param name="max">缩略图大小。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
            <exception cref="T:System.NotSupportedException">GDI+ 不支持文件的像素格式。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveThumbnail(System.String,System.String,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat,System.Drawing.Image.GetThumbnailImageAbort)">
            <summary>
            生成缩略图并保存。
            </summary>
            <param name="filePath">源文件名。</param>
            <param name="newFilePath">新文件名。</param>
            <param name="width">缩略图的宽度。</param>
            <param name="height">缩略图的高度。</param>
            <param name="format">保存的图像格式。</param>
            <param name="callBack">中断回调函数。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
            <exception cref="T:System.NotSupportedException">GDI+ 不支持文件的像素格式。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterMark(System.Drawing.Image,System.String,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.PointF,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成文字水印保存。
            </summary>
            <param name="image">来自图片。</param>
            <param name="savePath">保存的位置。</param>
            <param name="s">水印的文本内容。</param>
            <param name="font">使用的字体。</param>
            <param name="color">使用的字色。</param>
            <param name="sp">水印的位置。</param>
            <param name="format">图片格式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="font"/> 或 <paramref name="image"/> 或 <paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterMark(System.Drawing.Image,System.String,System.String,System.Drawing.Font,System.Drawing.Color,Py.Drawing.Position,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成文字水印保存。
            </summary>
            <param name="image">来自图片。</param>
            <param name="savePath">保存的位置。</param>
            <param name="s">水印的文本内容。</param>
            <param name="font">使用的字体。</param>
            <param name="color">使用的字色。</param>
            <param name="sp">水印的位置。</param>
            <param name="format">图片格式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="font"/> 或 <paramref name="image"/> 或 <paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterMark(System.String,System.String,System.String,System.Drawing.Font,System.Drawing.Color,Py.Drawing.Position,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成文字水印保存。
            </summary>
            <param name="filePath">来自图片。</param>
            <param name="savePath">保存的位置。</param>
            <param name="s">水印的文本内容。</param>
            <param name="font">使用的字体。</param>
            <param name="color">颜色。</param>
            <param name="sp">水印的位置。</param>
            <param name="format">格式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="font"/> 或 <paramref name="color"/> 或 <paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterMark(System.String,System.String,System.String,System.Drawing.Font,System.String,Py.Drawing.Position,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成文字水印保存。
            </summary>
            <param name="filePath">来自图片。</param>
            <param name="savePath">保存的位置。</param>
            <param name="s">水印的文本内容。</param>
            <param name="font">使用的字体。</param>
            <param name="htmlColor">使用的 HTML 色。</param>
            <param name="sp">水印的位置。</param>
            <param name="format">格式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="font"/> 或 <paramref name="htmlColor"/> 或 <paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterMark(System.String,System.String,System.String,Py.Drawing.Position)">
            <summary>
            生成文字水印保存。
            </summary>
            <param name="filePath">来自图片。</param>
            <param name="savePath">保存的位置。</param>
            <param name="s">水印的文本内容。</param>
            <param name="sp">水印的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="savePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.String,System.String,System.String,Py.Drawing.Position,System.Single)">
            <summary>
            生成一个的图片水印。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="sp">水印的位置。</param>
            <param name="opacity">透明度。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.String,System.String,System.String,System.Drawing.Point,System.Single)">
            <summary>
            生成一个的图片水印。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="sp">水印的位置。</param>
            <param name="opacity">透明度。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.String,System.String,System.String,System.Drawing.Point,System.Drawing.Size,System.Single,System.Single)">
            <summary>
            生成一个的图片水印。图片以一定角度偏移，并重复排列。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="p">开始输出的位置。</param>
            <param name="seperator">分隔大小。</param>
            <param name="angle">水印图片顺时针偏转角度。</param>
            <param name="opacity">透明度。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.Drawing.Image,System.Drawing.Image,System.String,System.Drawing.Point,System.Drawing.Size,System.Single,System.Single,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成一个的图片水印。图片以一定角度偏移，并重复排列。
            </summary>
            <param name="image">图片。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="p">开始输出的位置。</param>
            <param name="seperator">分隔大小。</param>
            <param name="angle">水印图片顺时针偏转角度。</param>
            <param name="opacity">透明度。</param>
            <param name="format">格式。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.String,System.String,System.String,System.Drawing.Rectangle,System.Single,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成一个的图片水印。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="rect">水印的位置。</param>
            <param name="opacity">透明度。</param>
            <param name="format">图片格式。</param>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为 System.Uri。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.SaveWaterPictureMark(System.Drawing.Image,System.Drawing.Image,System.String,System.Drawing.Rectangle,System.Single,System.Drawing.Imaging.ImageFormat)">
            <summary>
            生成一个的图片水印。
            </summary>
            <param name="image">图片。</param>
            <param name="watermark">水印图。</param>
            <param name="savePath">保存的位置。如不保存，为空。</param>
            <param name="rect">水印的位置。</param>
            <param name="opacity">透明度。</param>
            <param name="format">图片格式。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="watermark"/> 为空。</exception>
            <exception cref="T:System.OutOfMemoryException">该文件没有有效的图像格式。 - 或 - GDI+ 不支持文件的像素格式。</exception>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
        </member>
        <member name="M:Py.Drawing.ImageFile.ConvertImage(System.String,System.String)">
            <summary>
            转换图片格式。
            </summary>
            <param name="sourceImageFilePath">要转换的位置。</param>
            <param name="destImageFilePath">目标文件存储位置。</param>
            <exception cref="T:System.IO.FileNotFoundException">指定的文件不存在。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destImageFilePath"/> 为空。</exception>
        </member>
        <member name="P:Py.Drawing.ImageFile.Width">
            <summary>
            获取或设置当前图片的宽度。
            </summary>
        </member>
        <member name="P:Py.Drawing.ImageFile.Height">
            <summary>
            获取或设置当前图片的高度。
            </summary>
        </member>
        <member name="P:Py.Drawing.ImageFile.Size">
            <summary>
            获取或设置图片的大小。
            </summary>
        </member>
        <member name="P:Py.Drawing.ImageFile.ImageFormat">
            <summary>
            获取当前的图片格式。
            </summary>
        </member>
        <member name="T:Py.Net.FtpClient">
            <summary>
            提供操作 FTP 的工具。
            </summary>
        </member>
        <member name="T:Py.Net.WebClient">
            <summary>
            表示一个网络应用的工具。
            </summary>
        </member>
        <member name="M:Py.Net.WebClient.#ctor">
            <summary>
            初始化 <see cref="T:Py.Net.WebClient"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Net.WebClient.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化 <see cref="T:Py.Net.WebClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.WebClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            初始化 <see cref="T:Py.Net.WebClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.WebClient.#ctor(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Net.WebClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
            <param name="connTimeout">无响应时间(限时),单位:毫秒。</param>
            <param name="openTimeout">打开数据库连接时间。</param>
        </member>
        <member name="M:Py.Net.WebClient.Open(System.String,System.Int32,System.String,System.String)">
            <summary>
            连接到服务器。
            </summary>
            <param name="server">要连接的IP地址或主机名。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.WebClient.Open(System.String,System.String,System.String)">
            <summary>
            连接到服务器。
            </summary>
            <param name="server">要连接的IP地址或主机名。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.WebClient.Open">
            <summary>
            连接到服务器。
            </summary>
        </member>
        <member name="M:Py.Net.WebClient.Close">
            <summary>
            关闭所有连接。
            </summary>
        </member>
        <member name="M:Py.Net.WebClient.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.Server">
            <summary>
            获取服务器连接地址。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.UserName">
            <summary>
            获取用户名。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.Password">
            <summary>
            获取密码。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.Port">
            <summary>
            获取端口号。
            </summary>
            <value>默认 21 。</value>
        </member>
        <member name="P:Py.Net.WebClient.ConnectionTimeout">
            <summary>
            获取或设置无响应时间。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.OpenTimeout">
            <summary>
            获取或设置打开服务器连接的时间。
            </summary>
        </member>
        <member name="P:Py.Net.WebClient.IsOpen">
            <summary>
            获取当前是否已连接。
            </summary>
        </member>
        <member name="F:Py.Net.FtpClient._mainSock">
            <summary>
            主套接字。
            </summary>
        </member>
        <member name="F:Py.Net.FtpClient._listeningSock">
            <summary>
            侦听套接字。
            </summary>
        </member>
        <member name="F:Py.Net.FtpClient._dataSock">
            <summary>
            数据套接字。
            </summary>
        </member>
        <member name="F:Py.Net.FtpClient._bucket">
            <summary>
            读取并保存当前命令执行后从FTP服务器端返回的数据信息。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.#ctor">
            <summary>
            初始化 <see cref="T:Py.Net.FtpClient"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化 <see cref="T:Py.Net.FtpClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.FtpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            初始化 <see cref="T:Py.Net.FtpClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Net.FtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Net.FtpClient"/> 的新实例。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
            <param name="passiveMode">是否使用被动模式。</param>
        </member>
        <member name="M:Py.Net.FtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            构造函数。
            </summary>
            <param name="server">服务器IP或名称。</param>
            <param name="port">端口号。</param>
            <param name="userName">用户名。</param>
            <param name="password">密码。</param>
            <param name="passiveMode">是否使用被动模式。</param>
            <param name="connTimeout">无响应时间(限时),单位:毫秒。</param>
            <param name="openTimeout">打开数据库连接时间。</param>
        </member>
        <member name="M:Py.Net.FtpClient.FailX(System.String,System.Net.FtpStatusCode)">
            <summary>
            操作失败处理。
            </summary>
            <param name="response">错误原因。</param>
            <param name="status">状态。</param>
            <exception cref="T:Py.Net.FtpWebException">操作失败。</exception>
        </member>
        <member name="M:Py.Net.FtpClient.Fail(System.String,System.Net.FtpStatusCode,System.Exception)">
            <summary>
            操作失败处理。
            </summary>
            <param name="message">错误原因。</param>
            <param name="status">状态。</param>
            <param name="e">异常。</param>
            <exception cref="T:Py.Net.FtpWebException">操作失败。</exception>
        </member>
        <member name="M:Py.Net.FtpClient.SetBinaryMode(System.Boolean)">
            <summary>
            设置当前是否以二进制处理。
            </summary>
            <param name="mode">设置的模式。</param>
        </member>
        <member name="M:Py.Net.FtpClient.OpenDataSocket">
            <summary>
            打开数据套接字。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.ConnectDataSocket">
            <summary>
            被动模式连接数据源。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.SendCommand(System.String,System.Boolean)">
            <summary>
            发送一个命令。
            </summary>
            <param name="command">命令。</param>
            <param name="throwOnFailures">是否在失败后抛出异常。</param>
        </member>
        <member name="M:Py.Net.FtpClient.ReadResponse">
            <summary>
            读取当前的响应字符串。
            </summary>
            <returns>返回的字符串。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.ReadResponseStatus">
            <summary>
            返回服务器端返回信息。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.ReadResponseStatus(System.String@)">
            <summary>
            返回服务器端返回信息。
            </summary>
            <param name="response">输出原字符串。</param>
        </member>
        <member name="M:Py.Net.FtpClient.Close">
            <summary>
            关闭所有连接。
            </summary>
        </member>
        <member name="M:Py.Net.FtpClient.Open">
            <summary>
            连接到FTP服务器。
            </summary>
            <exception cref="T:System.InvalidOperationException">未设置要连接的服务器。</exception>
            <exception cref="T:Py.Net.FtpWebException">由网络引起连接异常。</exception>
        </member>
        <member name="M:Py.Net.FtpClient.List">
            <summary>
            获取FTP当前(工作)目录下的文件列表
            </summary>
            <returns>返回文件列表数组</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFiles">
            <summary>
            获取当前文件夹内全部文件。
            </summary>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFiles(System.String)">
            <summary>
            获取当前文件夹内全部文件。
            </summary>
            <param name="searchPatterns">匹配的模式。</param>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetDirectories">
            <summary>
            获取当前文件夹内全部文件夹。
            </summary>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetDirectories(System.String)">
            <summary>
            获取当前文件夹内全部文件夹。
            </summary>
            <param name="searchPatterns">匹配的模式。</param>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFileSystemEntries">
            <summary>
            获取当前文件夹内全部文件系统。
            </summary>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFileSystemEntries(System.String)">
            <summary>
            获取当前文件夹内全部文件系统。
            </summary>
            <param name="searchPatterns">匹配的模式。</param>
            <returns>文件名数组。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.ListFiles">
            <summary>
            获取到文件名列表
            </summary>
            <returns>返回文件名列表</returns>
        </member>
        <member name="M:Py.Net.FtpClient.ListDirectories">
            <summary>
            获取路径列表
            </summary>
            <returns>返回路径列表</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFileDateRaw(System.String)">
            <summary>
            获取原始数据信息.
            </summary>
            <param name="fileName">远程文件名</param>
            <returns>返回原始数据信息.</returns>
        </member>
        <member name="M:Py.Net.FtpClient.GetFileDate(System.String)">
            <summary>
            得到文件日期.
            </summary>
            <param name="fileName">远程文件名</param>
            <returns>返回远程文件日期</returns>
        </member>
        <member name="M:Py.Net.FtpClient.ChangeDirectory(System.String)">
            <summary>
            跳转服务器上的当前(工作)路径。
            </summary>
            <param name="path">要跳转的路径。</param>
        </member>
        <member name="M:Py.Net.FtpClient.CreateDirectory(System.String)">
            <summary>
            创建指定的目录
            </summary>
            <param name="folderName">要创建的目录</param>
        </member>
        <member name="M:Py.Net.FtpClient.DeleteDirectory(System.String)">
            <summary>
            移除FTP上的指定目录。
            </summary>
            <param name="folderName">要移除的目录。</param>
        </member>
        <member name="M:Py.Net.FtpClient.DeleteFile(System.String)">
            <summary>
            移除FTP上的指定文件。
            </summary>
            <param name="fileName">要移除的文件名称。</param>
        </member>
        <member name="M:Py.Net.FtpClient.MoveFile(System.String,System.String)">
            <summary>
            重命名FTP上的文件。
            </summary>
            <param name="fromFileName">原文件名。</param>
            <param name="toFileName">新文件名。</param>
        </member>
        <member name="M:Py.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获得指定文件的大小(如果FTP支持) 。
            </summary>
            <param name="fileName">指定的文件。</param>
            <returns>返回指定文件的大小。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Upload(System.String)">
            <summary>
            上传本地文件至服务器。
            </summary>
            <param name="fileName">本地文件名。</param>
            <returns>上传的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Upload(System.String,System.String)">
            <summary>
            上传本地文件至服务器。
            </summary>
            <param name="local">本地文件名。</param>
            <param name="remote">远程要覆盖的文件名。</param>
            <returns>上传的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Upload(System.String,System.String,System.Boolean)">
            <summary>
            上传本地文件至服务器。
            </summary>
            <param name="local">本地文件名。</param>
            <param name="remote">远程要覆盖的文件名。</param>
            <param name="resume">如果远程文件已存在,是否恢复。</param>
            <returns>上传的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Upload(System.String,System.String,System.Boolean,Py.Core.Func{System.Int64,System.Boolean})">
            <summary>
            上传本地文件至服务器。
            </summary>
            <param name="local">本地文件名。</param>
            <param name="remote">远程要覆盖的文件名。</param>
            <param name="resume">如果远程文件已存在,是否恢复。</param>
            <param name="onUpload">每上传 512 字节调用的委托。 参数为上传的字节大小。</param>
            <returns>上传的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Download(System.String)">
            <summary>
            下载文件保存。
            </summary>
            <param name="fileName">远程要覆盖的文件名。</param>
            <returns>下载的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Download(System.String,System.String)">
            <summary>
            下载文件保存。
            </summary>
            <param name="remote">远程要覆盖的文件名。</param>
            <param name="local">本地文件名。</param>
            <returns>下载的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Download(System.String,System.String,System.Boolean)">
            <summary>
            下载文件保存。
            </summary>
            <param name="remote">远程要覆盖的文件名。</param>
            <param name="local">本地文件名。</param>
            <param name="resume">如果本地文件已存在,是否恢复。</param>
            <returns>下载的总字节。</returns>
        </member>
        <member name="M:Py.Net.FtpClient.Download(System.String,System.String,System.Boolean,Py.Core.Func{System.Int64,System.Boolean})">
            <summary>
            下载文件保存。
            </summary>
            <param name="remote">远程要覆盖的文件名。</param>
            <param name="local">本地文件名。</param>
            <param name="resume">如果本地文件已存在,是否恢复。</param>
            <param name="onDownload">每下载 512 字节调用的委托。 参数为下载的字节大小。</param>
            <returns>下载的总字节。</returns>
        </member>
        <member name="P:Py.Net.FtpClient.Encoding">
            <summary>
            获取或设置当前使用地址和命令编码。
            </summary>
        </member>
        <member name="P:Py.Net.FtpClient.IsOpen">
            <summary>
            获取当前是否已连接。
            </summary>
        </member>
        <member name="P:Py.Net.FtpClient.PassiveMode">
            <summary>
            获取或设置连接的被动模式。
            </summary>
            <value> true (默认) 表示 被动模式 。 false 主动模式。</value>
        </member>
        <member name="P:Py.Net.FtpClient.CurrentDirectory">
            <summary>
            获取或设置FTP上的当前(工作)路径。
            </summary>
        </member>
        <member name="T:Py.Net.WebBrowser">
            <summary>
            模拟一个浏览器，并用于打开一个网站。
            </summary>
        </member>
        <member name="F:Py.Net.WebBrowser.UA_IE8">
            <summary>
            代表 IE 8 默认的 UserAgent 字符。 (Windows 7)
            </summary>
        </member>
        <member name="F:Py.Net.WebBrowser.UA_IE7">
            <summary>
            代表 IE 7 默认的 UserAgent 字符。 (Windows Vista)
            </summary>
        </member>
        <member name="F:Py.Net.WebBrowser.UA_CHROME">
            <summary>
            谷歌浏览器的 UserAgent 字符。 (Windows 7)
            </summary>
        </member>
        <member name="F:Py.Net.WebBrowser.UA_OPERA">
            <summary>
            Opera 浏览器的 UserAgent 字符。 (Windows 7)
            </summary>
        </member>
        <member name="F:Py.Net.WebBrowser.UA_FIREFOX">
            <summary>
            火狐浏览器的 UserAgent 字符。 (Windows 7)
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.AddCookie(System.String,System.String)">
            <summary>
            加入一个 Cookie 值。
            </summary>
            <param name="name">名字。</param>
            <param name="value">属性内容。</param>
            <returns>返回添加的对象。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.SetData(System.Net.HttpWebRequest)">
            <summary>
            填充当前资料到 Request 对象。
            </summary>
            <param name="req">对象。</param>
        </member>
        <member name="M:Py.Net.WebBrowser.GetRequest(System.Uri)">
            <summary>
            获取当前用于返回页面的请求。
            </summary>
            <param name="uri">地址。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.GetGetRequest(System.Uri,System.String)">
            <summary>
            获取用于POST数据的表单。
            </summary>
            <param name="url">位置。</param>
            <param name="data">数据。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.GetPostRequest(System.Uri,System.String)">
            <summary>
            获取用于POST数据的表单。
            </summary>
            <param name="url">位置。</param>
            <param name="data">数据。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.GetPostRequest(System.Uri,System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            获取用于POST数据的表单。
            </summary>
            <param name="url">位置。</param>
            <param name="data">数据。</param>
            <param name="files">在 data 中表示文件的字段。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.#ctor">
            <summary>
            初始化 <see cref="T:Py.Net.WebBrowser"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.Net.HttpWebRequest)">
            <summary>
            打开一个请求。
            </summary>
            <param name="req">要打开的请求。</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.Uri)">
            <summary>
            打开一个请求。
            </summary>
            <param name="uri">要载入的地址。</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.Uri,System.Net.CookieCollection)">
            <summary>
            打开一个请求。
            </summary>
            <param name="uri">要载入的地址。</param>
            <param name="cookies">使用的 Cookies 。</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.String)">
            <summary>
            打开一个请求。
            </summary>
            <param name="uri">要载入的地址。</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">无法解析网址。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.Uri,System.String)">
            <summary>
            打开指定页面，并 POST 相关数据。
            </summary>
            <param name="url">打开的地址。</param>
            <param name="data">要 POST 的数据。 如 a = b &amp; c = 2</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">无法解析网址。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.String,System.String)">
            <summary>
            打开指定页面，并 POST 相关数据。
            </summary>
            <param name="url">打开的地址。</param>
            <param name="data">要 POST 的数据。 如 a = b &amp; c = 2</param>
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">无法解析网址。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.Open(System.Uri,System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            打开指定页面，并 POST 相关数据。
            </summary>
            <param name="url">打开的地址。</param>
            <param name="data">要填充的数据。 如 a = b &amp; c = 2</param>
            <param name="files">在 data 中表示文件的字段。</param>&gt;
            <returns>返回状态。</returns>
            <exception cref="T:System.Net.WebException">无法解析网址。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.OpenAsync(System.Uri,System.AsyncCallback,System.Object)">
            <summary>
            异步打开一个请求。
            </summary>
            <param name="url">请求地址。</param>
            <param name="asyncCallback">回调函数。</param>
            <param name="state">传递的状态。</param>
            <returns>异步的状态。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.OpenAsync(System.Uri,System.String,System.AsyncCallback,System.Object)">
            <summary>
            异步打开一个请求。
            </summary>
            <param name="url">请求地址。</param>
            <param name="data">参数。</param>
            <param name="asyncCallback">回调函数。</param>
            <param name="state">传递的状态。</param>
            <returns>异步的状态。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.OpenAsync(System.Net.HttpWebRequest,System.AsyncCallback,System.Object)">
            <summary>
            异步打开一个请求。
            </summary>
            <param name="req">请求。</param>
            <param name="asyncCallback">回调函数。</param>
            <param name="state">传递的状态。</param>
            <returns>异步的状态。</returns>
        </member>
        <member name="M:Py.Net.WebBrowser.Reload">
            <summary>
            刷新当前页面。
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.Refresh">
            <summary>
            刷新当前页面。
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.GetResponseStream">
            <summary>
            获取流，该流用于读取来自服务器的响应的体。
            </summary>
            <returns>一个 System.IO.Stream，包含响应的体。</returns>
            <exception cref="T:System.Net.ProtocolViolationException">没有响应流。</exception>
            <exception cref="T:System.ObjectDisposedException">已释放当前的实例。</exception>
        </member>
        <member name="M:Py.Net.WebBrowser.DectectEncoding">
            <summary>
            根据网页内容指定编码。
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.Close">
            <summary>
            关闭所有连接。
            </summary>
        </member>
        <member name="M:Py.Net.WebBrowser.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.AllCookies">
            <summary>
            获取当前浏览器保存的全部 Cookie 内容。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.Cookies">
            <summary>
            获取当前站点使用的 Cookies 集合。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.Response">
            <summary>
            获取当前的响应 。
            </summary>
            <exception cref="T:System.InvalidOperationException">在没有打开页面时调用此属性。</exception>
        </member>
        <member name="P:Py.Net.WebBrowser.Encoding">
            <summary>
            获取或设置首选编码。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.SourceCode">
            <summary>
            获取当前打开页面的源码。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.ContentEncoding">
            <summary>
            获取或设置传输使用的内容编码方式。
            </summary>
        </member>
        <member name="P:Py.Net.WebBrowser.Document">
            <summary>
            获取当前页面。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Py.Net.WebBrowser.Location">
            <summary>
            获取或设置当前的页面。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlAnchorElement">
            <summary>
            表示一个 a 标签。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlElement">
            <summary>
            表示一个元素。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlElement._attributes">
            <summary>
            全属性。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlElement._lastChild">
            <summary>
            最后的节点。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlElement._name">
            <summary>
            名字。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlElement._id">
            <summary>
            标识符。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身（如果该节点是一个 HtmlElement，还克隆其属性）。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.GetAttribute(System.String)">
            <summary>
            返回具有指定名称的属性的值。
            </summary>
            <returns>指定属性的值。如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。</returns>
            <param name="name">要检索的属性的名称。这是限定名。它针对匹配节点的 Name 属性进行匹配。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.AppendHtml(System.String)">
            <summary>
            将指定字符串解析为节点，添加到该节点的子节点列表的末尾。
            </summary>
            <param name="html">要添加的节点内容。将要添加的节点的全部内容移动到指定位置。</param>
            <returns>添加的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetAttribute(System.String,System.String)">
            <summary>
            返回具有指定本地名称和命名空间 URI 的属性的值。
            </summary>
            <param name="localName">要检索的属性的本地名称。</param>
            <param name="namespaceURI">要检索的属性的命名空间 URI。</param>
            <returns>
            指定属性的值。如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetAttributeNode(System.String)">
            <summary>
            返回具有指定名称的 HtmlAttribute。
            </summary>
            <param name="name">要检索的属性的名称。这是限定名。它针对匹配节点的 Name 属性进行匹配。</param>
            <returns>指定的 HtmlAttribute；如果未找到匹配属性，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetAttributeNode(System.String,System.String)">
            <summary>
            返回具有指定本地名称和命名空间 URI 的 <see cref="T:Py.Html.HtmlAttribute"/>。
            </summary>
            <param name="localName">属性的本地名称。</param>
            <param name="namespaceURI">属性的命名空间 URI。</param>
            <returns>指定的 HtmlAttribute；如果未找到匹配属性，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsByTagName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlElement.Name"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="name">要匹配的名称标记。这是限定名。它针对匹配节点的 Name 属性进行匹配。星号 (*) 是一个匹配所有标记的特殊值。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsByClassName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlElement.ClassName"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="className">要匹配的名称标记。这是限定名。它针对匹配节点的 Name 属性进行匹配。星号 (*) 是一个匹配所有标记的特殊值。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsByTagName(System.String,System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlElement.LocalName"/> 和 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="localName">要匹配的本地名称。星号 (*) 是一个匹配所有标记的特殊值。</param>
            <param name="namespaceURI">要匹配的命名空间 URI。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementById(System.String)">
            <summary>
            获取具有指定 ID 的 <see cref="T:Py.Html.HtmlElement"/>。
            </summary>
            <param name="elementId">要匹配的属性 ID。</param>
            <returns>
            具有匹配 ID 的 HtmlElement；如果未找到匹配的元素，则为 null。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsByName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name" /> 匹配的所有子代元素的列表。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeList" />，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="name" /> 匹配，则返回的集合将为空。
            </returns>
            <param name="name">
            要匹配的 Name。特殊值“*”匹配所有标记。
            </param>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsBy(System.Predicate{Py.Html.HtmlElement})">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name" /> 匹配的所有子代元素的列表。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeList" />，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="predicate" /> 匹配，则返回的集合将为空。
            </returns>
            <param name="predicate">
            要匹配委托。
            </param>
        </member>
        <member name="M:Py.Html.HtmlElement.GetElementsByAttribute(System.String,System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="name">要匹配的 Name。特殊值“*”匹配所有标记。</param>
            <param name="value">查找的属性，特殊值 null 返回所有定义此属性的节点。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="name"/> 匹配，则返回的集合将为空。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.HasAttribute(System.String)">
            <summary>
            确定当前节点是否具有带有指定名称的属性。
            </summary>
            <param name="name">要查找的属性的名称。这是限定名。它针对匹配节点的 Name 属性进行匹配。</param>
            <returns>如果当前节点具有指定的属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.HasAttribute(System.String,System.String)">
            <summary>
            确定当前节点是否具有带有指定本地名称和命名空间 URI 的属性。
            </summary>
            <param name="localName">要查找的属性的本地名称。</param>
            <param name="namespaceURI">要查找的属性的命名空间 URI。</param>
            <returns>如果当前节点具有指定的属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAll">
            <summary>
            移除当前节点的所有指定属性和子级。不移除默认属性。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAllAttributes">
            <summary>
            从元素移除所有指定的属性。不移除默认属性。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlElement.InsertAdjacentText(Py.Html.HtmlNodeOrder,System.String)">
            <summary>
            插入一个 <see cref="T:Py.Html.HtmlText"/> 到当前节点， 插入的位置以 <paramref name="where"/> 确定。
            </summary>
            <param name="where">插入的位置。</param>
            <param name="value">要插入的节点内容。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.InsertAdjacentHTML(Py.Html.HtmlNodeOrder,System.String)">
            <summary>
            插入一个 解释 <paramref name="html"/> 后得的 <see cref="T:Py.Html.HtmlNode"/> 到当前节点， 插入的位置以 <paramref name="where"/> 确定。
            </summary>
            <param name="where">插入的位置。</param>
            <param name="html">要插入的节点的 HTML 表达。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.InsertAdjacentElement(Py.Html.HtmlNodeOrder,Py.Html.HtmlNode)">
            <summary>
            插入一个 <see cref="T:Py.Html.HtmlNode"/> 到当前节点， 插入的位置以 <paramref name="where"/> 确定。
            </summary>
            <param name="where">插入的位置。</param>
            <param name="element">要插入的节点。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAttribute(System.String)">
            <summary>
            按名称移除属性。
            </summary>
            <param name="name">要移除的属性的名称。这是限定名。它针对匹配节点的 Name 属性进行匹配。</param>
            <exception cref="T:System.ArgumentException">节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAttribute(System.String,System.String)">
            <summary>
            移除具有指定本地名称和命名空间 URI 的属性。（如果移除的属性有一个默认值，则立即予以替换）。
            </summary>
            <param name="localName">要移除的属性的本地名称。</param>
            <param name="namespaceURI">要移除的属性的命名空间 URI。</param>
            <exception cref="T:System.ArgumentException">节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAttributeAt(System.Int32)">
            <summary>
            从元素中移除具有指定索引的属性节点。（如果移除的属性有一个默认值，则立即予以替换）。
            </summary>
            <param name="i">要移除的节点的索引。第一个节点的索引为 0。</param>
            <returns>移除的属性节点；如果在给定索引位置没有节点，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAttributeNode(Py.Html.HtmlAttribute)">
            <summary>
            移除指定的 <see cref="T:Py.Html.HtmlAttribute"/>。
            </summary>
            <param name="oldAttr">要移除的 HtmlAttribute 节点。如果移除的属性具有默认值，则立即替换它。</param>
            <returns>
            移除的 HtmlAttribute；如果 <paramref name="oldAttr"/> 不是 HtmlElement 的属性节点，则为 null。
            </returns>
            <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.RemoveAttributeNode(System.String,System.String)">
            <summary>
            移除由本地名称和命名空间 URI 指定的 <see cref="T:Py.Html.HtmlAttribute"/>。（如果移除的属性有一个默认值，则立即予以替换）。
            </summary>
            <param name="localName">属性的本地名称。</param>
            <param name="namespaceURI">属性的命名空间 URI。</param>
            <returns>
            移除的 HtmlAttribute；如果 HtmlElement 不具有匹配的属性节点，则为 null。
            </returns>
            <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.SetAttribute(System.String,System.String)">
            <summary>
            设置具有指定名称的属性的值。
            </summary>
            <param name="name">要创建或更改的属性的名称。这是限定名。如果该名称包含一个冒号，则将其解析为前缀和本地名称两个部分。</param>
            <param name="value">要为此属性设置的值。</param>
            <exception cref="T:Py.Html.HtmlException">指定的名称包含无效字符。</exception>
            <exception cref="T:System.ArgumentException">节点是只读的。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.SetAttribute(System.String,System.String,System.String)">
            <summary>
            设置具有指定本地名称和命名空间 URI 的属性的值。
            </summary>
            <param name="localName">属性的本地名称。</param>
            <param name="namespaceURI">属性的命名空间 URI。</param>
            <param name="value">要为此属性设置的值。</param>
            <returns>属性值。</returns>
        </member>
        <member name="M:Py.Html.HtmlElement.SetAttributeNode(Py.Html.HtmlAttribute)">
            <summary>
            添加指定的 <see cref="T:Py.Html.HtmlAttribute"/>。
            </summary>
            <param name="newAttr">要添加到该元素的属性集合的 HtmlAttribute 节点。</param>
            <returns>
            如果该属性替换具有相同名称的现有属性，则返回旧 HtmlAttribute；否则返回 null。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="newAttr"/> 是从不同于创建此节点的文档创建的。或者此节点是只读的。</exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="newAttr"/> 已经是另一个 HtmlElement 对象的属性。您必须显式克隆 HtmlAttribute 节点以在其他 HtmlElement 对象中重用它们。</exception>
        </member>
        <member name="M:Py.Html.HtmlElement.SetAttributeNode(System.String,System.String)">
            <summary>
            添加指定的 <see cref="T:Py.Html.HtmlAttribute" />。
            </summary>
            <returns>要添加的 HtmlAttribute。</returns>
            <param name="localName">属性的本地名称。</param>
            <param name="namespaceURI">属性的命名空间 URI。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点的所有子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlElement.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将当前节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlElement.Id">
            <summary>
            获取或设置当前元素的标识符。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.TagName">
            <summary>
            获取当前元素的标签名。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.ClassName">
            <summary>
            获取或设置当前元素的类名。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Name">
            <summary>
            获取或设置当前元素的名字。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.IsEmpty">
            <summary>
            获取或设置当前元素是否为空标记。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Attributes">
            <summary>
            获取包含该节点属性列表的 <see cref="T:Py.Html.HtmlAttributeCollection" />。
            </summary>
            <returns>
            包含该节点属性列表的 <see cref="T:Py.Html.HtmlAttributeCollection" />。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.HasAttributes">
            <summary>
            获取一个 boolean 值，该值指示当前节点是否有任何属性。
            </summary>
            <returns>
            如果当前节点具有属性，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.InnerText">
            <summary>
            获取或设置节点及其所有子级的串联值。
            </summary>
            <returns>节点及其所有子级的串联值。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.InnerHtml">
            <summary>
            获取或设置只表示此节点子级的标记。
            </summary>
            <returns>该节点子级的标记。</returns>
            <exception cref="T:Py.Html.HtmlException">设置此属性时指定的 HTML 的格式不合法。</exception>
        </member>
        <member name="P:Py.Html.HtmlElement.LastNode">
            <summary>
            获取节点的最后一个子级。
            </summary>
            <returns>节点的最后一个子级。如果没有这样的节点，则返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.LocalName">
            <summary>
            获取当前节点的本地名称。
            </summary>
            <returns>移除了前缀的当前节点的名称。例如，对于元素 &lt;bk:book&gt;，LocalName 是 book。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>节点的限定名。对于 HtmlElement 节点，这是该元素的标记名。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.NamespaceURI">
            <summary>
            获取该节点的命名空间 URI。
            </summary>
            <returns>该节点的命名空间 URI。如果没有命名空间 URI，则此属性返回 String.Empty。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.NextSibling">
            <summary>
            获取紧接在该元素后面的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>紧接在该元素后面的 HtmlNode。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>节点类型。对于 HtmlElement 节点，该值是 HtmlNodeType.Element。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.OwnerDocument">
            <summary>
            获取该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>该元素所属的 HtmlDocument。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.Lang">
            <summary>
            获取或设置当前标签使用的语言。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Dir">
            <summary>
            获取或设置当前标签的文本对齐的方式。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Title">
            <summary>
            获取或设置当前标签的标题。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Children">
            <summary>
            获取当前元素的全部子元素。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlElement.Document">
            <summary>
            获取该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>该元素所属的 HtmlDocument。</returns>
        </member>
        <member name="P:Py.Html.HtmlElement.Prefix">
            <summary>
            获取或设置该节点的命名空间前缀。
            </summary>
            <returns>该节点的命名空间前缀。如果没有前缀，则该属性返回 String.Empty。</returns>
            <exception cref="T:System.ArgumentException">此节点是只读的</exception>
            <exception cref="T:Py.Html.HtmlException">指定的前缀包含无效字符。</exception>
        </member>
        <member name="M:Py.Html.HtmlAnchorElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlInputElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="P:Py.Html.HtmlAnchorElement.Href">
            <summary>
            获取或设置节点链接的目标地址。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlAnchorElement.Target">
            <summary>
            获取或设置节点链接的目标打开的方式。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.GZipStream">
             <summary>
             提供用于压缩和解压缩流的方法和属性。
             </summary>
             <remarks>
             <para>此类表示 GZip 数据格式，它使用无损压缩和解压缩文件的行业标准算法。这种格式包括一个检测数据损坏的循环冗余校验值。GZip 数据格式使用的算法与 DeflateStream 类的算法相同，但它可以扩展以使用其他压缩格式。 这种格式可以通过不涉及专利使用权的方式轻松实现。此类不能用于压缩大于 4 GB 的文件。更多资料见 <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC 1952</see>, "GZIP 压缩文档格式  4.3 版"。</para>
             <para>
             可以使用许多常见的压缩工具对写入到扩展名为 .gz 的文件的压缩 GZipStream 对象进行解压缩；但是，此类原本并不提供用于向 .zip 存档中添加文件或从 .zip 存档中提取文件的功能。 
             </para>
             <para>
               一个 <c>GZipStream</c> 可以读或写，但不能同时。
             </para>
             <para>
               虽然 GZIP 格式允许数据来自不同的文件, 这个流只操作一个 GZIP 格式, 表现为一个文件。
             </para>
             
             <para>
             <see cref="T:Py.Zip.Zlib.DeflateStream"/> 和 <c>GZipStream</c> 中的压缩功能作为流公开。 由于数据是以逐字节的方式读取的，因此无法通过进行多次传递来确定压缩整个文件或大型数据块的最佳方法。对于未压缩的数据源，最好使用 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 和 <c>GZipStream</c> 类。 如果源数据已压缩，则使用这些类时实际上可能会增加流的大小。
             </para>
            
             </remarks>
            
             <seealso cref="T:Py.Zip.Zlib.GZipStream"/>
            
             <example>
             这个例子演示了如何使用 GZipStream 创建一个压缩流。
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             这个例子演示了如何使用 GZipStream 解压一个压缩流。
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Py.Zip.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n &gt; 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Py.Zip.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n &gt; 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  &gt; 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="T:Py.Zip.Zlib.ZipBaseStream">
            <summary>
            所有文件流的内部流。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.WorkingBufferSizeDefault">
            <summary>
            默认的工作缓存空间。 默认 8192 字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.WorkingBufferSizeMin">
            <summary>
            默认的最小缓存大小。默认 128 字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.TypeName">
            <summary>
            类名的字符串。用于抛出异常。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._z">
            <summary>
            当前的解码器。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._streamMode">
            <summary>
            流模式。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._flushMode">
            <summary>
            输出的类型。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._compressionMode">
            <summary>
            解压模式。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._level">
            <summary>
            解压等级。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._leaveOpen">
            <summary>
            是否保留打开。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._workingBuffer">
            <summary>
            工作的缓存。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._stream">
            <summary>
            内部操作的流。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._strategy">
            <summary>
            解压的策略。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._noMore">
            <summary>
            没有更多输入。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream._isGZip">
            <summary>
            是否为 GZipStream 实例。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode)">
            <summary>
            使用指定的流和 CompressionMode 值初始化 <see cref="T:Py.Zip.Zlib.ZipBaseStream"/> 的新实例。
            </summary>
            <param name="stream">要解压或压缩缩的流。</param>
            <param name="compressionMode">指示当前操作是解压或压缩。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为 null。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="stream"/> 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel)">
            <summary>
            使用指定的流, CompressionLevel 值和 CompressionMode 值，初始化 <see cref="T:Py.Zip.Zlib.ZipBaseStream"/> 的新实例。
            </summary>
            <param name="stream">要解压或压缩缩的流。</param>
            <param name="compressionMode">指示当前操作是解压或压缩。</param>
            <param name="level">使用的解压等级。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为 null。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="stream"/> 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,System.Boolean)">
            <summary>
            使用指定的流和 CompressionMode 值以及一个指定是否将流保留为打开状态的值，初始化 <see cref="T:Py.Zip.Zlib.ZipBaseStream"/> 的新实例。
            </summary>
            <param name="stream">要解压或压缩缩的流。</param>
            <param name="compressionMode">指示当前操作是解压或压缩。</param>
            <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为 null。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="stream"/> 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            使用指定的流, CompressionLevel 值和 CompressionMode 值以及一个指定是否将流保留为打开状态的值，初始化 <see cref="T:Py.Zip.Zlib.ZipBaseStream"/> 的新实例。
            </summary>
            <param name="stream">要解压或压缩缩的流。</param>
            <param name="compressionMode">指示当前操作是解压或压缩。</param>
            <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
            <param name="level">使用的解压等级。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为 null。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="stream"/> 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Flush">
            <summary>
            将若干压缩缩的字节读入指定的字节数组。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.ObjectDisposedException">流已经关闭。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。本版本不支持这个操作。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。本版本不支持这个操作。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.ValidStreamMode(Py.Zip.Zlib.ZipBaseStream.StreamMode)">
            <summary>
            检查工作模式。
            </summary>
            <param name="streamMode">需要的模式。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.CloseInternal">
            <summary>
            实现关闭流。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将若干压缩缩的字节读入指定的字节数组。
            </summary>
            <param name="buffer">用于存储压缩缩的字节的数组。</param>
            <param name="offset">数组中开始读取的位置。</param>
            <param name="count">读取的压缩缩字节数。</param>
            <returns>压缩缩到字节数组中的字节数。</returns>
            <remarks>
            	<para>
            如果需要使用 <c>DeflateStream</c> 在读取时同步解压， 可以设置解压模式到 <c>CompressionMode.Compress</c>。然后使用 Read() 方法读取并解压。
            如果需要使用 <c>DeflateStream</c> 在读取时同步压缩， 可以设置解压模式到 <c>CompressionMode.DeCompress</c>。然后使用 Read() 方法读取并解压。
            </para>
            	<para>
            一个 <c>DeflateStream</c> 只能用于 <c>Read()</c> 或 <c>Write()</c>, 但不能同时读写。
            </para>
            </remarks>
            <exception cref="T:Py.Zip.Zlib.ZlibException">已经执行过 Write() 。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:Py.Zip.Zlib.ZlibStream"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.CompressString(System.String,System.IO.Stream)">
            <summary>
            解压字符串。解压的结果保存在流中。
            </summary>
            <param name="value">字符串。</param>
            <param name="compressor">用来解压的流。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.CompressBuffer(System.Byte[],System.IO.Stream)">
            <summary>
            解压数组。解压的结果保存在流中。
            </summary>
            <param name="b">字节。</param>
            <param name="compressor">用来解压的流。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.UncompressString(System.Byte[],System.IO.Stream)">
            <summary>
            压缩字符串。
            </summary>
            <param name="compressed">字符串。</param>
            <param name="decompressor">用来压缩的流。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZipBaseStream.UncompressBuffer(System.Byte[],System.IO.Stream)">
            <summary>
            压缩数组。
            </summary>
            <param name="compressed">解压的数组。</param>
            <param name="decompressor">用来压缩的流。</param>
            <returns>字节。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.UsingStreamMode">
            <summary>
            获取或设置使用的流模式。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.IsDisposed">
            <summary>
            获取或设置一个值，该值表示流资源是否已释放。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.BaseStream">
            <summary>
            获取对基础流的引用。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.BufferSize">
             <summary>
             获取或设置缓存大小。
             </summary>
            
             <remarks>
             <para>
               这个内容对所有流都有效。  默认大小为 
               1024 B。  最小 128 B。 效率随缓存变大而增加，但有极限大小。
             </para>
            
             <para>
             在 <c>Read()</c> 或 <c>Write()</c> 前设置这个值。
             </para>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">流已经关闭。</exception>
             <exception cref="T:Py.Zip.Zlib.ZlibException">缓存已设置。</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">参数小于最小值。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.TotalIn">
            <summary>
            获取当前读入的字节长度。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.TotalOut">
            <summary>
            获取当前写完的字节长度。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.CanRead">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持读取的值。
            </summary>
            <value>如果流支持读取，为 true；否则为 false。</value>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
            <value>如果流支持查找，为 true；否则为 false。</value>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.Strategy">
            <summary>
            获取或设置解压策略。
            </summary>
            <exception cref="T:System.ObjectDisposedException">流已经关闭。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
            <value>如果流支持写入，为 true；否则为 false。</value>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.WantCompress">
            <summary>
            获取当前是否需要解压。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.Length">
            <summary>
            获取用字节表示的流长度。此属性不受支持，并且总是引发 System.NotSupportedException。
            </summary>
            <value>用字节表示流长度的长值。</value>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.Position">
            <summary>
            获取或设置当前流中的位置。此属性的设置不受支持，并且总是引发 System.NotSupportedException。
            </summary>
            <value>流中的当前位置。</value>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.WantRfc1950Header">
            <summary>
            获取或设置是否需要 Rfc1950 头。
            </summary>
            <value>如果 true，则需; 否则, false。</value>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.ZlibCodec">
            <summary>
            获取当前操作的解码器。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.WorkingBuffer">
            <summary>
            获取当前操作的缓存。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.ZipBaseStream.FlushMode">
            <summary>
            获取或设置缓存输出方式。
            </summary>
            <remarks>
            缓存输出方式意义 见 ZLIB 有关文档。
            </remarks>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="T:Py.Zip.Zlib.ZipBaseStream.StreamMode">
            <summary>
            指示当前采用的流模式。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.StreamMode.Undefined">
            <summary>
            未定义。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.StreamMode.Writer">
            <summary>
            写入。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipBaseStream.StreamMode.Reader">
            <summary>
            读取。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._headerByteCount">
            <summary>
            文件头大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._firstReadDone">
            <summary>
            第一次读取完成。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._fileName">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._comment">
            <summary>
            注释。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._gzipFileName">
            <summary>
            用于 GZIP 的文件名。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._gzipComment">
            <summary>
            用于 GZIP 的注释。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._crc">
            <summary>
            当前的检验码。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._gzipMtime">
            <summary>
            用于 GZIP 的文件访问实际。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._gzipHeaderByteCount">
            <summary>
            文件头大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._buf">
            <summary>
            缓存。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode)">
             <summary>
             使用指定的流和 CompressionMode 值初始化 GZipStream 类的新实例。
             </summary>
             <remarks>
            
             <para>
              如果模式为 <c>CompressionMode.Compress</c>, <c>GZipStream</c> 会使用默认压缩等级。  
             </para>
            
             </remarks>
            
             <param name="stream">要压缩或解压缩的流。</param>
             <param name="mode">指示当前操作是压缩或解压。</param>
             <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
             <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel)">
             <summary>
             使用指定的流和 CompressionMode 值以及一个指定是否将流保留为打开状态的值来初始化 GZipStream 类的新实例。
             </summary>
             <remarks>
            
             如果压缩模式为 <c>CompressionMode.Compress</c>, GZipStream 自动使用默认的等级。 "高级" 的流会随 GZipStream 而关闭。
            
             </remarks>
             <param name="stream">要压缩或解压缩的流。</param>
             <param name="mode">指示当前操作是压缩或解压。</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
             <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
             <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,System.Boolean)">
            <summary>
            使用指定的流和 CompressionMode 值以及一个指定是否将流保留为打开状态的值来初始化 GZipStream 类的新实例。
            </summary>
            
            <remarks><para>
             这个构造函数用在应用程序需要基流保持打开状态 。 如果
              <c>Close()</c> 方法被调用, 那么默认基流也关闭。 在有些时候，用户不希望同时关闭，比如重读。指定 <paramref name="leaveOpen"/> 确保流保持打开。
            </para>
            </remarks>
            
            <param name="stream">要压缩或解压缩的流。</param>
            <param name="mode">指示当前操作是压缩或解压。</param>
            <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
            <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
            <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel,System.Boolean)">
             <summary>
             使用指定的流， CompressionLevel 值和 CompressionMode 值以及一个指定是否将流保留为打开状态的值来初始化 GZipStream 类的新实例。
             </summary>
            
             <remarks>
            
             <para>
              这个构造函数用在应用程序需要基流保持打开状态 。 如果
               <c>Close()</c> 方法被调用, 那么默认基流也关闭。 在有些时候，用户不希望同时关闭，比如重读。指定 <paramref name="leaveOpen"/> 确保流保持打开。
             </para>
            
             <para>
               参见其他构造函数。
             </para>
            
             </remarks>
             <param name="stream">要压缩或解压缩的流。</param>
             <param name="mode">指示当前操作是压缩或解压。</param>
             <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
             <param name="level">表示压缩等级。</param>
             <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
             <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.CloseInternal">
            <summary>
            实现关闭流。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将若干压缩缩的字节读入指定的字节数组。
            </summary>
            <param name="buffer">用于存储压缩缩的字节的数组。</param>
            <param name="offset">数组中开始读取的位置。</param>
            <param name="count">读取的压缩缩字节数。</param>
            <returns>压缩缩到字节数组中的字节数。</returns>
            <remarks>
            	<para>
            如果需要使用 <c>DeflateStream</c> 在读取时同步解压， 可以设置解压模式到 <c>CompressionMode.Compress</c>。然后使用 Read() 方法读取并解压。
            如果需要使用 <c>DeflateStream</c> 在读取时同步压缩， 可以设置解压模式到 <c>CompressionMode.DeCompress</c>。然后使用 Read() 方法读取并解压。
            </para>
            	<para>
            一个 <c>DeflateStream</c> 只能用于 <c>Read()</c> 或 <c>Write()</c>, 但不能同时读写。
            </para>
            </remarks>
            <exception cref="T:Py.Zip.Zlib.ZlibException">已经执行过 Write() 。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream._unixEpoch">
            <summary>
            偏移时间。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.GZipStream.iso8859dash1">
            <summary>
            iso 8859 编码。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.CompressString(System.String)">
             <summary>
             使用 GZip 压缩一个字符串到数组。
             </summary>
             
             <remarks>
              用 <see cref="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])"/> 解压。
             </remarks>
            
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <param name="s"> 要压缩的字符串。 </param>
             <returns>压缩的字节的数组。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
             使用 DEFLATE 压缩一个数组到数组。
             </summary>
            
             <remarks>
               使用 <see cref="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/> 解压。
             </remarks>
            
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
             压缩的缓存。
             </param>
            
             <returns>压缩的结果。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
             使用  DEFLATE 解压字节的数组。
             </summary>
            
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(String)</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
             压缩的数组。
             </param>
            
             <returns>解压后的字符串。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
             使用  DEFLATE 解压字节的数组。
             </summary>
            
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
             压缩的数组。
             </param>
            
             <returns>解压后的数组。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.Comment">
             <summary>
             获取或设置 Gzip 的注释。
             </summary>
            
             <remarks>
             <para>
               格式 GZIP 允许每个文件都包括一个注释。 注释的编码是 ISO-8859-1
               代码页。 要写入 GZIP 流一个注释, 在 <c>Write()</c> 前设置此属性。
             </para>
            
             <para>
               如使用 <c>GZipStream</c> 解压, 可以在第一次 <c>Read()</c> 后得到注释。  如果在
               GZIP 字节流没有注释, 注释属性返回 <c>null</c>
               (在 VB 中为<c>Nothing</c>)。
             </para>
             </remarks>
             <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.FileName">
            <summary>
            当前文件的文件名。
            </summary>
            <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.Length">
            <summary>
            获取用字节表示的流长度。此属性不受支持，并且总是引发 System.NotSupportedException。
            </summary>
            <value>用字节表示流长度的长值。</value>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.Position">
            <summary>
            获取或设置当前流中的位置。此属性的设置不受支持，并且总是引发 System.NotSupportedException。
            </summary>
            <value>流中的当前位置。</value>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.Crc32">
            <summary>
            获取当前的 CRC 检验码。
            </summary>
        </member>
        <member name="P:Py.Zip.Zlib.GZipStream.LastModified">
            <summary>
            获取或设置最后修改时间。
            </summary>
        </member>
        <member name="T:Py.Zip.ZipJitStreamEntry">
            <summary>
            表示即时单元。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipJitStreamEntry._openDelegate">
            <summary>
            打开的委托。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipJitStreamEntry._entryDelegate">
            <summary>
            关闭的委托。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipJitStreamEntry"/> 的新实例。
            </summary>
            <param name="file">所有者。</param>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.#ctor(Py.Zip.ZipFile,System.String,Py.Zip.OpenDelegate,Py.Zip.EntryDelegate)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="name">名字。</param>
            <param name="opener">打开流的委托。</param>
            <param name="closer">关闭流的委托。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.CloseWrite(System.IO.Stream)">
            <summary>
            关闭写入流。
            </summary>
            <param name="input">流。</param>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
            设置并返回输入流和长度。
            </summary>
            <param name="input">输入的流。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.OnExtract(System.IO.Stream,System.String)">
            <summary>
            解压。
            </summary>
            <param name="output">目标流。</param>
            <param name="password">解压密码。</param>
        </member>
        <member name="M:Py.Zip.ZipJitStreamEntry.FigureCrc32">
            <summary>
            设置当前的 CRC32 。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipJitStreamEntry._sourceStream">
            <summary>
            源流。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipJitStreamEntry.SourceStream">
            <summary>
            获取或设置源流。
            </summary>
        </member>
        <member name="T:Py.Web.Vistor">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:Py.Web.Vistor.NoReferrer">
            <summary>
            没有信息提示。
            </summary>
        </member>
        <member name="F:Py.Web.Vistor.Device">
            <summary> 
             WAP 浏览器字符。
            </summary>
        </member>
        <member name="F:Py.Web.Vistor.ReferrerList">
            <summary>
            引用常量。
            </summary>
        </member>
        <member name="F:Py.Web.Vistor.SpiderList">
            <summary> 
             蜘蛛。
            </summary>
        </member>
        <member name="M:Py.Web.Vistor.Search(System.String,System.String@,System.Int32@,System.String@)">
            <summary>
            判断搜索关键字。
            </summary>
            <param name="url">判断的 Url 地址。</param>
            <param name="site">搜索名字。</param>
            <param name="page">页。</param>
            <param name="key">关键字。</param>
        </member>
        <member name="M:Py.Web.Vistor.GetIP(System.Web.HttpRequest)">
            <summary>
            读取 IP 值。
            </summary>
            <param name="request">当前请求。</param>
            <returns>字符串。</returns>
        </member>
        <member name="F:Py.Web.Vistor.OperationList">
            <summary> 
             操作系统。
            </summary>
        </member>
        <member name="M:Py.Web.Vistor.IsOperation(System.String)">
            <summary>
            判断用户是否相应操作系统。
            </summary>
            <param name="operation">系统。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="P:Py.Web.Vistor.Crawler">
            <summary> 
             判断是否是访问蜘蛛。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.Spider">
            <summary> 
             获得蜘蛛详细信息。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.IP">
            <summary> 
            获取当前用户的真实IP 。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.CPU">
            <summary>
            获取用户计算机的 CPU 。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.Browser">
            <summary> 
            获取用户的浏览器名字。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.Operation">
            <summary> 
            获取用户的操作系统。
            </summary>
        </member>
        <member name="P:Py.Web.Vistor.SessionID">
            <summary>
            获取用户的 SessionID 。
            </summary>
        </member>
        <member name="T:Py.Text.IniFile">
            <summary>
            表示一个 ini 文件。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.#ctor">
            <summary>
            初始化当前文件新实例。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.#ctor(System.Text.Encoding)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="encoding">编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Text.IniFile.#ctor(System.String)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Text.IniFile.#ctor(System.String,System.Text.Encoding)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="encoding">编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Text.IniFile.#ctor(System.String,Py.Core.FileAction)">
            <summary>
            使用指定文件名初始化当前文件新实例。
            </summary>
            <param name="filePath">文件名。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Text.IniFile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            读写INI文件的API函数 。
            </summary>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <param name="filePath">位置。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.WritePrivateProfileSection(System.String,System.String,System.String)">
            <summary>
            读写INI文件的API函数 。
            </summary>
            <param name="section">节点。</param>
            <param name="values">键集合，不同的键用\0分隔。</param>
            <param name="filePath">位置。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.GetPrivateProfileString(System.String,System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            读写INI文件的API函数 。
            </summary>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <param name="retValue">引用的数组</param>
            <param name="size">大小。</param>
            <param name="filePath">位置。</param>
            <returns>读取的字节数。</returns>
        </member>
        <member name="M:Py.Text.IniFile.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            读写INI文件的API函数 。
            </summary>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <param name="filePath">位置。</param>
            <returns>读取的字节数。</returns>
        </member>
        <member name="M:Py.Text.IniFile.WriteValue(System.String,System.String,System.String,System.String)">
            <summary>
            向一个 INI 文件写入一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.WriteValueIf(System.String,System.String,System.String,System.String)">
            <summary>
            查找键值，如果不存在则写入一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.WriteValueIf(System.String,System.String,System.String,System.Object)">
            <summary>
            查找键值，如果不存在则写入一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.WriteValue(System.String,System.String,System.String,System.Object)">
            <summary>
            向一个 INI 文件写入一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadString(System.String,System.String,System.String,System.String)">
            <summary>
            读取 INI 文件的一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadString(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            读取 INI 文件的一个值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <param name="encoding">编码。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadInt(System.String,System.String,System.String,System.Int32)">
            <summary>
            读取一个 Int32 型的值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadBool(System.String,System.String,System.String,System.Boolean)">
            <summary>
            读取一个 Boolean 型的值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadDouble(System.String,System.String,System.String,System.Double)">
            <summary>
            读取一个 Double 型的值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadDateTime(System.String,System.String,System.String,System.DateTime)">
            <summary>
            读取一个 Double 型的值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <param name="dft">默认。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadDateTime(System.String,System.String,System.String)">
            <summary>
            读取一个 Double 型的值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadIntNull(System.String,System.String,System.String)">
            <summary>
            读取一个可空型的值，如果节点不存在，返回 null， 否则返回值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadBoolNull(System.String,System.String,System.String)">
            <summary>
            读取一个可空型的值，如果节点不存在，返回 null， 否则返回值。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">节点。</param>
            <param name="key">键。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadKeys(System.String,System.String)">
            <summary>
            读取 Ini 文件的一区域全部键。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section"></param>
            <returns>区域的集合。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadKeys(System.String,System.String,System.Text.Encoding)">
            <summary>
            读取 Ini 文件的一区域全部键。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section"></param>
            <param name="encoding">编码。</param>
            <returns>区域的集合。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadSections(System.String)">
            <summary>
            读取 Ini 文件的所有区域。
            </summary>
            <param name="filePath">位置。</param>
            <returns>区域的集合。</returns>
        </member>
        <member name="M:Py.Text.IniFile.ReadSections(System.String,System.Text.Encoding)">
            <summary>
            读取 Ini 文件的所有区域。
            </summary>
            <param name="filePath">位置。</param>
            <param name="encoding">编码。</param>
            <returns>区域的集合。</returns>
        </member>
        <member name="M:Py.Text.IniFile.RemoveSection(System.String,System.String)">
            <summary>
            删除 Ini 文件的一个区。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">区域位置。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.RemoveKey(System.String,System.String,System.String)">
            <summary>
            删除一个键。
            </summary>
            <param name="filePath">位置。</param>
            <param name="section">区域位置。</param>
            <param name="key">键。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.GetSection(System.String,System.String)">
            <summary>
            获取一个区域。
            </summary>
            <param name="filePath">位置。</param>
            <param name="name">区域名字。</param>
            <returns>区域。</returns>
        </member>
        <member name="M:Py.Text.IniFile.OpenFile(System.String)">
            <summary>
            打开指定的文件。
            </summary>
            <param name="filePath">位置。</param>
            <returns>一个 <see cref="T:Py.Text.IniFile"/> 实例，包含指定路径的 ini 文件信息。</returns>
        </member>
        <member name="M:Py.Text.IniFile.SaveFile(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            将指定的集合保存到文件。
            </summary>
            <param name="filePath">位置。</param>
            <param name="name">区域名。</param>
            <param name="collection">要读取的集合。</param>
        </member>
        <member name="M:Py.Text.IniFile.Init">
            <summary>
            创建一个新的文件。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.Create">
            <summary>
            当被子类重写时，实现创建一个新的文件。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.Open">
            <summary>
            打开当前文件。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:Py.Text.IniFile.Close">
            <summary>
            关闭当前文件。释放所有占用的句柄。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.Save">
            <summary>
            保存当前操作的文件。如果需要保存时指定路径，使用 <see cref="M:Py.Core.Base.FileBase.SaveAs(System.String)"/> 将当前文件另存为指定路径。
            </summary>
            <exception cref="T:System.InvalidOperationException">没有设置保存的文件路径。</exception>
        </member>
        <member name="M:Py.Text.IniFile.Save(System.String)">
            <summary>
            保存文件到相应位置。
            </summary>
            <param name="filePath">文件路径。</param>
            <seealso cref="M:Py.Core.Base.FileBase.SaveAs(System.String)"/>
        </member>
        <member name="M:Py.Text.IniFile.SaveSection(System.String)">
            <summary>
            保存指定区域到文件。
            </summary>
            <param name="name">区域名。</param>
        </member>
        <member name="P:Py.Text.IniFile.Sections">
            <summary>
            获取当前的所有区域。
            </summary>
        </member>
        <member name="P:Py.Text.IniFile.Extension">
            <summary>
            获取当前类支持的文件扩展名类型，包括点的小写形式，多个扩展名以|分开。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.Text.IniFile.Section">
            <summary>
            表示 Ini 文件的一个区域。
            </summary>
        </member>
        <member name="F:Py.Text.IniFile.Section._name">
            <summary>
            名字。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.Section.Remove(System.String)">
            <summary>
            移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"/> 实例中具有指定键的项。
            </summary>
            <param name="key">要移除的项的 <see cref="T:System.String"/> 键。键可以是 null。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Text.IniFile.Section.Clear">
            <summary>
            使缓存数组无效，并将所有项从 <see cref="T:System.Collections.Specialized.NameValueCollection"/> 中移除。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Py.Text.IniFile.Section.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Text.IniFile.Section"/> 的新实例。
            </summary>
            <param name="name">要操作的字符串。</param>
        </member>
        <member name="M:Py.Text.IniFile.Section.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            初始化 <see cref="T:Py.Text.IniFile.Section"/> 的新实例。
            </summary>
            <param name="name">要操作的字符串。</param>
            <param name="col">集合。</param>
        </member>
        <member name="M:Py.Text.IniFile.Section.#ctor(System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:Py.Text.IniFile.Section"/> 的新实例。
            </summary>
            <param name="name">节点名。</param>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="M:Py.Text.IniFile.Section.WriteToFile(System.String)">
            <summary>
            将当前节点写入 Ini 文件。
            </summary>
            <param name="filePath">位置。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.Add(System.String,System.String)">
            <summary>
            将具有指定名称和值的项添加到 <see cref="T:System.Collections.Specialized.NameValueCollection"/>。
            </summary>
            <param name="key">要添加的项的 <see cref="T:System.String"/> 键。</param>
            <param name="value">要添加的项的 <see cref="T:System.String"/> 值。该值可以为 null。</param>
            <exception cref="T:System.ArgumentNullException">键为空。 </exception>
        </member>
        <member name="M:Py.Text.IniFile.Section.Add(System.String,System.Object)">
            <summary>
            将具有指定名称和值的项添加到 <see cref="T:System.Collections.Specialized.NameValueCollection"/>。
            </summary>
            <param name="key">要添加的项的 <see cref="T:System.String"/> 键。</param>
            <param name="value">要添加的项的 <see cref="T:System.String"/> 值。该值可以为 null。</param>
            <exception cref="T:System.ArgumentNullException">键为空。 </exception>
        </member>
        <member name="M:Py.Text.IniFile.Section.WriteToFile(System.String,System.Text.StringBuilder)">
            <summary>
            将当前节点写入 Ini 文件。
            </summary>
            <param name="filePath">位置。</param>
            <param name="sb">构造的函数。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetString(System.String,System.String)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetInt(System.String,System.Int32)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetDouble(System.String,System.Double)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetBool(System.String,System.Boolean)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <param name="dft">默认值。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <param name="dft">返回默认值。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetDateTime(System.String)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetIntNull(System.String)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.GetBoolNull(System.String)">
            <summary>
            获取指定键值的值。
            </summary>
            <param name="key">键。</param>
            <returns>返回值。</returns>
        </member>
        <member name="M:Py.Text.IniFile.Section.SetIf(System.String,System.String)">
            <summary>
            如果节点不含值，设置为指定值。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="P:Py.Text.IniFile.Section.Name">
            <summary>
            获取单元的名字。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.Text.IniFile.SectionCollection">
            <summary>
            表示一个文件的全部区域的集合。
            </summary>
        </member>
        <member name="M:Py.Text.IniFile.SectionCollection.#ctor(Py.Text.IniFile)">
            <summary>
            初始化 <see cref="T:Py.Text.IniFile.SectionCollection"/> 的新实例。
            </summary>
            <param name="owner">当前的所有者。</param>
        </member>
        <member name="M:Py.Text.IniFile.SectionCollection.OnRemoveItem(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
            <returns>可以移除返回 true，否则不移除。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 等于或大于集合的元素的个数。</exception>
        </member>
        <member name="M:Py.Text.IniFile.SectionCollection.OnRemoveAll">
            <summary>
            从集合中移除所有元素。
            </summary>
            <returns>全部移除返回 true，否则不移除。</returns>
        </member>
        <member name="P:Py.Text.IniFile.SectionCollection.Item(System.String)">
            <summary>
            获取和设置name 对应的 <see cref="T:Py.Text.IniFile.Section"/>。
            </summary>
        </member>
        <member name="T:Py.Sql.DbHelper">
             <summary>
             为所有数据库辅助类提供一个抽象基类。
             </summary>
             <remarks>
             此类即数据库的辅助类。
             <list type="bullet">
                 <listheader>DbHelper 主要提供 3 个数据库操作方面的辅助函数。分别为: </listheader>
                 <item>基本的Sql和存储过程的执行。</item>
                 <item>自动生成简单的Sql语句。</item>
                 <item>提供数据适配器的简单操作函数，使其更方便使用。</item>
             </list>
             
             <para>
             DbHelper同时提供静态和非静态的操作方法。即可创建一个DbHelper的实例完成数据库操作，也可以通过提供的静态函数减小代码。<br />
             DbHelper是一个抽象基类，具体实现由争对不同数据库而组成的数据库辅助类组成。
             </para>
             
             <para>
             <list type="number">
                 <listheader> 数据库操作分阶段。</listheader>
                 <item>连接数据库</item>
                 <item>执行命令</item>
                 <item>处理返回结果</item>
                 <item>关闭连接</item>
             </list>
             </para>
            
             <para>
             下面以 SqlServer2005 为例分层介绍 DbHelper 如何操作这4步骤。
             <list type="number">
             <item>
                 <term>连接数据库</term>
                 <description>
                     <list type="number">
                         <listheader> 创建一个 DbHelper 实例。 </listheader>
                         <item>
                             <list type="bullet">
                                 <listheader>创建有3种方法:</listheader>
                                 <item>DbHelper sql = new SqlHelper();  // 如果您的数据库操作可以争对各数据库  (推荐)</item>
                                 <item>DbHelper sql = DbHelper.Create(Database.SqlServer);   // 如果您希望根据配置创建不同的数据库</item>
                                 <item>SqlHelper sql = new SqlHelper(); // 如果您的数据库只争对 SqlServer</item>
                             </list>
                         </item>
                         <item>
                             <list type="bullet">
                                 <listheader>设置连接字符串。</listheader>
                                 <item>在创建实例时，可直接输入连接字符串。</item>
                                 <item>sql.ConnectionString = "连接字符串";  // 这是最常用的方法</item>
                                 <item>sql.SetConnectionString("服务器","用户名","密码","数据库");  //  自动生成连接字符串</item>
                                 <item>在使用   sql.Open()  中，输入连接字符串。</item>
                             </list>
                         </item>
                         <item>
                             <term>打开数据库连接。</term>
                             <description>打开数据库连接的操作不是必需的，可以省略。打开后程序将占有连接资源，直到Close调用。如果没有执行打开操作，那么DbHelper将会在第一次执行的时候自动打开连接。
                             sql.Open();</description>
                         </item>
                     </list>
                 </description>
             </item>
             <item>
                 <term>设定命令</term>
                 <description>
                     <list type="number">
                         <item>
                             <list type="bullet">
                                 <listheader>设置SQL或存储过程的方法。</listheader>
                                 <item>sql.CommandText = "命令"; 同时指定 sql.CommandType 说明输入的是SQL或存储过程或表名。</item>
                                 <item>sql.Produce = "存储过程";</item>
                                 <item>sql.SetSql("update tablename    set a = '{0}', b = {1}", 1, 3);</item>
                                 <item>sql.Execute("命令");</item>
                             </list>
                             如果有参数:
                             <list type="bullet">
                                 <item>  sql.AddParameter("名", value); </item>  
                                 <item>  sql.Parameters.Add(new SqlParamter("名")).Value = value; </item>  
                             </list>
                         </item>
                         <item>
                             <list type="bullet">
                                 <listheader>执行。</listheader>
                                 <item>sql.Execute();  // 返回 IDataReader。</item>
                                 <item>sql.Execute("命令") // 返回 IDataReader 。</item>
                                 <item>sql.ExecuteNonQuery();   // 返回 int ,更新的条数 。</item>
                                 <item>sql.ExecuteScalar();   // 返回 object ,第一行，第一列的内容。</item>
                                 <item>sql.ExecuteCommit();   // 返回 bool ，说明非select 是否成功。</item>
                                 <item>sql.ExecuteReader();   // 同 Execute() 。</item>
                                 <item>sql.ExecutePagerInfo(1); // 执行分页查询。(需先指明 sql.SqlTable,  sql.SqlPageSize)  。</item>
                                 <item>sql.ExecuteDataTable();  // 返回 DataTable 。</item>
                                 <item>sql.ExecuteDataSet();    // 返回 DataSet 。</item>
                                 <item>sql.ExecuteArrayList();   // 返回数组 。</item>
                                 <item>sql.TryExecute();        // 更新数据库，如果失败撤销更新。</item>
                             </list>
                         </item>
                     </list>
                 </description>
             </item>
             <item>
                 <term>读取</term>
                 <description>
                     <list type="number">
                         <item>
                             <list type="bullet">
                                 <listheader>依次读取。</listheader>
                                 <item>sql.Read();</item>
                                 <item>sql.NextResult();</item>
                             </list>
                         </item>
                         <item>
                             <list type="bullet">
                                 <listheader>读取字段。</listheader>
                                 <item>sql.DataReader["名"];</item>
                                 <item>sql["名"];</item>
                                 <item>sql.GetString("名")</item>
                             </list>
                         </item>
                     </list>
                 </description>
             </item>
             <item>
                 <term>关闭连接</term>
                 <description>
                     <list type="number">
                         <item>
                             <list type="bullet">
                                 <listheader>以下操作可以不进行，在变量生命周期末尾自动运行。 </listheader>
                                 <item>sql.Close();</item>
                                 <item>sql.Dispose();</item>
                             </list>
                         </item>
                     </list>
                 </description>
             </item>
             <item>
                 <term>特殊功能</term>
                 <description>
                     <list type="number">
                         <item>
                             <term>数据源。</term>
                             <description>
                                 如果一个控件需一个 DataSource。
                                 sql.DataSource = [Control].DataSource;  // 更新回去 
                             </description>
                         </item>
                         <item>
                             <term>ForEach。</term>
                             <description>
                                 需设置命名<br/>
                                 sql.ForEach(f);<br/>  <br/>
                                 
                                 bool f(int index,DataReader d){<br/>
                                     Console.Write(DataReader[1].ToString());<br/>
                                     return true;  //表示继续运行下一个<br/>
                                 }
                             </description>
                         </item>
                         <item>
                             <term>数据适配器。</term>
                             <description>
                                 DbHelper.AdpterHelper a = sql.CreateAdpter(); <br/>
                                 a.Fill(); <br/>
                                 a.Update(); <br/>
                                 a.UpdateCommand = "命令";
                             </description>
                         </item>
                     </list>
                 </description>
             </item>
             </list>
             </para>
             </remarks>
             <example>
             下面例子演示了调用DbHelper完成数据库的操作。
             <code>
             using System;
             using Py.Sql;
            
             class Sample{
             
                 public static void Main(){
                     using(DbHelper Sql = DbHelper.Create(Database.SqlServer)){
                         Sql.SetConnectionString("(local)\\SqlServer", "userName", "password", "Database");
             
                         // 示例 1 - 最简单的基本操作
                         Sql.Execute("select * from table");  //执行
                         while(Sql.Read())
                             Console.Write(Sql.DataReader[1].ToString());             
             
                         Sql.CloseReader();
                         
                         // 示例 2 - 自动生成 SQL
                         Sql.SqlTable = "TableName";
                         Sql.SqlColumn = "Column1, [Column2], Column3";
                         Sql.CreateCommandText(SqlOperation.Insert);
                         Sql.AddParmeter("Column1", "s");  // String
                         Sql.AddParmeter("Column2", true); // Boolean
                         Sql.AddParmeter("Column3", null); // DBNull
                         Sql.ExexuteNonQuery();
                         
                         // 示例 3 - 数据源
                         Sql.CreateCommandText(SqlOperation.Select);
                         DataGridView d = new DataGridView();
                         d.DataSource = Sql.DataSource;
                         // ... //处理  d.DataSource (DataTable) 
                         Sql.DataSource = d.DataSource;  // 提交更改
                         
                     }
                 }
            
             }
            
            
             </code></example>
        </member>
        <member name="F:Py.Sql.DbHelper._commandBuilder">
            <summary>
            命令生成对象。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.#ctor">
            <summary> 
            初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.#ctor(System.String)">
            <summary> 
            使用指定的数据字符初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
            <param name="connectionString">连接字符串。</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.#ctor(System.String,System.String,System.String)">
            <summary> 
            使用指定的数据字符,用户名,密码初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param> 
            <param name="userName">登录数据库的用户名字。</param> 
            <param name="password">登录数据库的用户密码。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary> 
            使用指定的数据字符,用户名,密码初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
            <param name="dataSource">数据源。</param> 
            <param name="userName">登录数据库的用户名字。</param> 
            <param name="password">登录数据库的用户密码。</param>
            <param name="database">登录的数据库名。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.SetConnectionString(System.String)">
            <summary> 
            更改数据库连接字符串。
            </summary>  
            <param name="dataSource">数据源。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.SetConnectionString(System.String,System.String)">
            <summary> 
            更改数据库连接字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可等于null。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.LoadConnectionString(System.String)">
            <summary>
            从 .config 文件载入连接字符串。
            </summary>
            <param name="configSectionNodeName">要查找的配置节点名字。</param>
            <returns>载入的字符串。</returns>
            <remarks>
            <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <connectionStrings>
                    <add key="N" value="连接字符串" />
                </connectionStrings>
            </configuration>
            
            sql.LoadConnectionString("N");
            即使用对应的连接字符。
            ]]>
            </remarks>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">无法检索 System.Configuration.ConnectionStringSettingsCollection 对象。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.SetConnectionString(System.String,System.String,System.String,System.String)">
            <summary> 
            更改数据库连接字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">登录的数据库名。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.SetConnectionString(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            更改数据库连接字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">登录的数据库名。</param>
            <param name="openTimeout">打开连接超时的时间。默认 15 秒。</param>
            <param name="connTimeout">保持连接服务器超时的时间。 默认 0 秒。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetConnectionString(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            当被子类重写时，实现返回指定数据库连接的字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">默认使用的数据库。</param>
            <param name="connTimeout">连接服务器超时的时间。</param>
            <param name="openTimeout">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.LoadConnectionString(System.Int32)">
            <summary>
            从 Web.Config / App.Config 载入连接字符串。
            </summary>
            <param name="index">区域名。</param>
        </member>
        <member name="M:Py.Sql.DbHelper.Open(System.String,System.String,System.String,System.String)">
            <summary>
            使用有关信息打开数据库的连接。
            </summary>
            <param name="dataSource">数据源。</param> 
            <param name="userName">登录数据库的用户名字。</param> 
            <param name="password">登录数据库的用户密码。</param> 
            <param name="database">默认使用的数据库。</param>
            <returns>成功返回 true，失败返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.Open(System.String,System.String,System.String)">
            <summary>
            使用有关信息打开数据库的连接。
            </summary>
            <param name="dataSource">数据源。</param> 
            <param name="userName">登录数据库的用户名字。</param> 
            <param name="password">登录数据库的用户密码。</param> 
            <returns>成功返回 true，失败返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.Open">
            <summary> 
            使用输入的信息打开数据库的连接。
            </summary> 
            <returns>成功返回 true，失败返回 false。</returns> 
            <example><code>
            using System;
            using Py.Sql;
            
            class Sample{
                public static void Main(){
                
                    DbHelper Sql = new SqlDbHelper("~/App_Code/DbHelper.mdf");
                    Console.Write( Sql.Open() );
                }
            }
            
            </code></example>
            <exception cref="T:System.InvalidOperationException">无法打开连接,因为连接字符串为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.CreateConnection">
            <summary>
            当被子类重写时，初始化连接。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.CloseReader">
            <summary> 
            关闭当前的DataReader对象。
            </summary> 
            <remarks>只会关闭DataReader，不会影响Connection对象。关闭后,不能使用DataReader。</remarks>
            <seealso cref="M:Py.Sql.DbHelper.Close"/>
        </member>
        <member name="M:Py.Sql.DbHelper.Close">
            <summary> 
            关闭当前和数据库的连接。但不会释放连接资源。
            </summary> 
            <seealso cref="M:Py.Sql.DbHelper.CloseReader"/>
            <seealso cref="M:Py.Sql.DbHelper.Dispose"/>
            <example><code>
            using System;
            using Py.Sql;
            
            class Sample{
                static void Main(){
                
                    DbHelper Sql = new SqlDbHelper();
                    Sql.Open("连接字符串");
                    Sql.Close();
                    Console.Write(Sql.IsOpen);   // 输出  False
                }
            }
            
            </code></example>
        </member>
        <member name="M:Py.Sql.DbHelper.CreateCommandText(Py.Sql.SqlOperation)">
            <summary>
            生成Sql语句，并设置为当前要执行的命令。
            </summary>
            <param name="sqlOperation">生成的Sql的操作。</param>
            <remarks>
            根据<paramref name="sqlOperation"/> 得到不同的命令。
            在使用这个函数前必须先指明数据库的信息，如表名、列名。
            表名是最小的要求。
            如果需要删除，还需说明主键。
            如果需要更新/添加，还需说明列。
            如果需要TOP选择，需指明 PageSize 。
            如果需要分页，需指明 PageSize和CurrentPage(从 1 开始)。
            </remarks>
            <exception cref="T:System.InvalidOperationException">未设置操作的表。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.SetSql(System.String,System.Collections.IDictionary)">
            <summary> 
            设置当前Sql命名和参数。
            </summary> 
            <param name="sql">Sql语句。</param>
            <param name="ps">参数集合。</param>
        </member>
        <member name="M:Py.Sql.DbHelper.SetSql(System.String,System.Object[])">
            <summary> 
            设置当前Sql命名和参数。
            </summary> 
            <param name="sql">sql语句。</param>
            <param name="args">格式化的字符串。</param>
            <example>
            下面例子演示了  SetSql 的用法。
            <code>
            using System;
            using Py.Sql;
            
            class Sample{
                static void Main(){
                
                    DbHelper Sql = new OledbDbHelper("~/App_Code/DbHelper.mdb");
                    
                    Sql.SetSql("Select {0}, {1} from [TABLE]", "Column1", "Column2");
                }
            }
            
            </code></example>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)">
             <summary>
            添加命名参数。
             </summary>
             <param name="name">要查找的列的名字。</param>
             <param name="value">执行的命令的参数的值。</param>
             <returns>对所添加的参数的引用。</returns>
             <example><code>
             using System;
             using Py.Sql;
             
             class Sample{
                 static void Main(){
                 
                     DbHelper Sql = new OledbDbHelper("~/App_Code/DbHelper.mdb");
                     Sql.SetSql("Select * from [TABLE] where id>@id");
                     Sql.AddParameter("id", 200);
                     
                 }
             }
             
             </code></example>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.String)">
            <summary> 
            添加命名参数。
            </summary>       
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.Int32)">
            <summary> 
            添加命名参数。
            </summary>       
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.Int32,System.Int32)">
            <summary> 
            添加命名参数。
            </summary>       
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.String,System.Int32)">
            <summary> 
            添加命名参数。
            </summary>       
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object,System.Int32)">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param> 
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.Boolean)">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String)">
            <summary>
            添加命名参数，不添加值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter``1(System.String,System.Nullable{``0})">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param> 
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.String,System.DateTime)">
            <summary> 
            添加命名参数。
            </summary>   
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameters(System.Collections.IDictionary)">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="d">参数键/值的集合。</param> 
            <returns>对所添加的参数的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameters(System.String,System.Object[])">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="columns">添加的列，不同的列用 “,” 隔开。</param> 
            <param name="values">添加的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameter(System.Data.IDbDataParameter)">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="p">参数键/值的集合。</param> 
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AddParameters(System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary> 
            添加命名参数。
            </summary> 
            <param name="p">参数集合。</param> 
        </member>
        <member name="M:Py.Sql.DbHelper.ClearParameters">
            <summary> 
            删除所有命名参数。
            </summary> 
        </member>
        <member name="M:Py.Sql.DbHelper.RemoveParameter(System.String)">
            <summary>
            删除指定名字的命名参数。
            </summary> 
            <param name="name">要查找的列的名字。</param> 
        </member>
        <member name="M:Py.Sql.DbHelper.RemoveParameter(System.Int32)">
            <summary>
            删除指定索引的命名参数。
            </summary> 
            <param name="index">索引。</param> 
        </member>
        <member name="M:Py.Sql.DbHelper.PrepareCommand">
            <summary>
            准备命令
            </summary>
            <returns>如果取消准备返回 true。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.CreateCommand">
            <summary>
            创建并返回一个与当前使用的连接关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。
            </summary>
            <returns>创建的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteScalar">
            <summary> 
            执行命令并返回第一行第一列的对象。
            </summary> 
            <returns>对象。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteScalar(System.String)">
            <summary>
            执行一个命令并返回第一行第一列的对象
            </summary>
            <param name="commandText">执行的命令。</param>
            <returns>对象。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteScalar(System.Data.IDbCommand)">
            <summary> 
            执行命令并返回第一行第一列的对象。
            </summary> 
            <returns>对象。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteNonQuery">
            <summary> 
            执行命令,不返回SqlDataReader对象，返回影响的记录数。
            </summary> 
            <returns>被改的记录个数</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行一个命令，返回被改的记录个数。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <returns>被改的记录个数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            执行一个命令，返回被改的记录个数。
            </summary>
            <param name="command">需要执行的命令。</param>
            <returns>被改的记录个数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable">
            <summary> 
            执行命令，返回DataTable 。
            </summary> 
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.String)">
            <summary> 
            执行命令，返回DataTable 。
            </summary> 
            <param name="tableName">返回的表名。</param>
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.Data.DataTable,System.String)">
            <summary> 
            执行命令，返回DataTable 。
            </summary> 
            <param name="dataTable">原来的表。</param>
            <param name="tableName">返回的表名。</param>
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.String,System.String)">
            <summary> 
            执行一个命令，返回DataTable 。
            </summary> 
            <param name="commandText">执行的命令。</param> 
            <param name="tableName">返回的表名。</param>
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.Data.DataTable)">
            <summary> 
            执行命令，返回DataTable 。
            </summary> 
            <param name="dataTable">原来的表实例。</param>
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataTable"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.Data.IDbCommand)">
            <summary> 
            执行命令，返回DataTable 。
            </summary> 
            <param name="command">需要执行的命令。</param>
            <returns>一个 DataTable 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.Execute">
            <summary>
            执行命令，返回DataReader。
            </summary>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.Execute(System.String)">
            <summary>
            执行一个命令，返回DataReader。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteReader">
            <summary>
            执行命令，返回DataReader。
            </summary>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteReader(System.String)">
            <summary>
            执行一个命令，返回DataReader。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            执行命令，返回DataReader。
            </summary>
            <param name="command">需要执行的命令。</param>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteArrayList">
            <summary>
            执行命令，返回ArrayList。
            </summary>
            <returns>一个 ArrayList 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteArrayList(System.String)">
            <summary>
            执行命令，返回ArrayList。
            </summary>
            <param name="commandText">执行的命令。</param>
            <returns>一个 ArrayList 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteDataSet(System.String[])">
            <summary>
            执行命令，返回一个Table。
            </summary>
            <param name="tables">表名。</param>
            <returns>一个 DataSet 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteDataSet(System.String,System.String[])">
            <summary>
            执行一个命令，返回一个Table
            </summary>
            <param name="commandText">执行的命令。</param>
            <param name="tables">表名。</param>
            <returns>一个 DataSet 类实例。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteDataSet(System.Data.IDbCommand,System.String[])">
            <summary>
            执行一个命令，返回一个Table
            </summary>
            <param name="command">需要执行的命令。</param>
            <param name="tables">表名。</param>
            <returns>一个 DataSet 类实例。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="command"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteCommits">
            <summary>
            执行修改的命令（非select），返回是否成功。
            </summary>
            <returns>成功返回true。失败返回false。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteCommits(System.String)">
            <summary>
            执行一个修改的命令（非select），返回是否成功。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <returns>成功返回true。失败返回false。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteCommits(System.Data.IDbCommand)">
            <summary>
            执行一个修改的命令（非select），返回是否成功。
            </summary>
            <param name="command">需要执行的命令。</param>
            <returns>成功返回true。失败返回false。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="command"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteCount">
            <summary> 
            执行一个命令，统计Table所指内容的记录条数。
            </summary> 
            <returns>个数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteCount(System.String)">
            <summary> 
            执行一个命令，统计条数。
            </summary> 
            <param name="tableName">要统计的表名。</param>
            <returns>个数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
            <exception cref="T:System.ArgumentNullException">必须指明 Table, 以确认正在操作的表。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecutePageInfo(System.Int32,System.Int32@)">
            <summary> 
            执行命令，实现分页效果。 分页大小使用 PageSize 指定。
            </summary> 
            <param name="pageIndex">执行的页数。</param>
            <param name="total">输出记录数。</param>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecutePageInfo(Py.Core.PagerInfo)">
            <summary> 
            执行命令，实现分页效果。 分页大小使用参数来指定。
            </summary> 
            <param name="pagerInfo">分页内容。</param>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecutePageInfo(System.Int32,Py.Core.PagerInfo@)">
            <summary> 
            执行命令，实现分页效果。 分页大小使用 PageSize 指定。
            </summary> 
            <param name="pageIndex">执行的页数。</param>
            <param name="pagerInfo">分页内容。</param>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecutePageInfo(System.Int32)">
            <summary> 
            执行命令，实现分页效果。 分页大小使用 PageSize 指定。
            </summary> 
            <param name="pageIndex">执行的页数。</param>
            <returns>一个 DataReader 类实例。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ForEach(System.String,System.Action{System.Data.IDataReader})">
            <summary>
            对数据库每一个记录执行一个函数。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <param name="fn">处理记录的委托。</param>
            <returns>循环的次数。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ForEach(System.String,Py.Core.ForEachAction{System.Data.IDataReader})">
            <summary>
            对数据库每一个记录执行一个函数。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <param name="fn">处理记录的委托。</param>
            <returns>循环的次数。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ForEach(System.Action{System.Data.IDataReader})">
            <summary>
            对数据库每一个记录执行一个函数。
            </summary>
            <param name="fn">处理记录的委托。</param>
            <returns>循环的次数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ForEach(Py.Core.ForEachAction{System.Data.IDataReader})">
            <summary>
            对数据库每一个记录执行一个函数。
            </summary>
            <param name="fn">处理记录的委托。</param>
            <returns>循环的次数。</returns>
            <exception cref="T:System.InvalidOperationException">未设置执行的命令，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.TryExecute(System.String)">
            <summary>
            尝试执行一个命令语句。如果操作失败，将不对数据库做任何修改。
            </summary>
            <param name="commandText">执行的命令。</param> 
            <returns>被修改的记录数。如果出现错误，返回-1 。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="commandText"/> 空，无法继续。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.TryExecute">
            <summary>
            尝试执行一个命令语句。如果操作失败，将不对数据库做任何修改。
            </summary>
            <returns>被修改的记录数。如果出现错误，返回-1 。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.TryExecute(System.Data.IDbCommand)">
            <summary>
            尝试执行一个命令语句。如果操作失败，将不对数据库做任何修改。
            </summary>
            <param name="command">需要执行的命令。</param>
            <returns>被修改的记录数。如果出现错误，返回-1 。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.Cancel">
            <summary>
            试图取消命令执行。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.Read">
            <summary>
            读取下一个记录。并返回有无读到数据。
            </summary>
            <returns>如果读到数据，返回 true， 否则返回 false。</returns>
            <example><code>
            using System;
            using Py.Sql;
            
            class Sample{
                static void Main(){
                
                    DbHelper Sql = new OledbDbHelper("~/App_Code/DbHelper.mdb");
                    Sql.SetSql("Select * from [TABLE] where id>4");
                    Sql.Execute();
                    while(Sql.Read())  //通过循环，直到读完
                        Console.Write(Sql.DataReader["id"].toString());
                    
                }
            }
            
            </code></example>
        </member>
        <member name="M:Py.Sql.DbHelper.NextResult">
            <summary>
            当读取批处理 SQL 语句的结果时，使数据读取器前进到下一个结果。
            </summary>
            <returns>如果存在多个行，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetNullable``1(System.String)">
            <summary>
            读取可空型。默认 null。
            </summary>
            <typeparam name="T">结构。</typeparam>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的可空值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetNullable``1(System.String,System.Nullable{``0})">
            <summary>
            读取可空型。默认 null。
            </summary>
            <typeparam name="T">结构。</typeparam>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的可空值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetNullable``1(System.Int32)">
            <summary>
            读取可空型。默认 null。
            </summary>
            <typeparam name="T">结构。</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的可空值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetNullable``1(System.Int32,System.Nullable{``0})">
            <summary>
            读取可空型。默认 null。
            </summary>
            <typeparam name="T">结构。</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的可空值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetBool(System.String)">
            <summary>
            读取布尔值。默认 false。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的布尔值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetBool(System.String,System.Boolean)">
            <summary>
            读取布尔值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的布尔值。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetBool(System.Int32)">
            <summary>
            读取布尔值。默认为false。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的布尔值。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetBool(System.Int32,System.Boolean)">
            <summary>
            读取布尔值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的布尔值。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetString(System.String)">
            <summary>
            读取字符串值。默认空。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的字符串。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetString(System.String,System.String)">
            <summary>
            读取字符串值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的字符串。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetString(System.Int32)">
            <summary>
            读取字符串值。默认为空。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的字符串。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetString(System.Int32,System.String)">
            <summary>
            读取字符串值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的字符串。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetDateTime(System.String)">
            <summary>
            读取日期值。默认当前时间。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的日期。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetDateTime(System.String,System.DateTime)">
            <summary>
            读取日期值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的日期。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetDateTime(System.Int32)">
            <summary>
            读取日期值。默认当前时间。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的日期。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetDateTime(System.Int32,System.DateTime)">
            <summary>
            读取字符串值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的日期。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt(System.String)">
            <summary>
            读取整数值。默认0。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt(System.String,System.Int32)">
            <summary>
            读取整数值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt(System.Int32)">
            <summary>
            读取整数值。默认为0。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt(System.Int32,System.Int32)">
            <summary>
            读取整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetShort(System.String)">
            <summary>
            读取整数值。默认0。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetShort(System.String,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetShort(System.Int32)">
            <summary>
            读取整数值。默认为0。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetShort(System.Int32,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetLong(System.String)">
            <summary>
            读取整数值。默认0。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetLong(System.String,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetLong(System.Int32)">
            <summary>
            读取整数值。默认为0。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetLong(System.Int32,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt16(System.String)">
            <summary>
            读取整数值。默认0。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt16(System.String,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt16(System.Int32)">
            <summary>
            读取整数值。默认为0。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetInt16(System.Int32,System.Int16)">
            <summary>
            读取整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的整数。</returns>
            <exception cref="T:System.InvalidOperationException">数字超过最大索引。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue(System.String)">
            <summary>
            获取相应类型值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue(System.String,System.Object)">
            <summary>
            获取相应类型值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue(System.Int32)">
            <summary>
            获取相应类型值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue(System.Int32,System.Object)">
            <summary>
            获取相应类型值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue``1(System.String)">
            <summary>
            获取相应类型值。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue``1(System.String,``0)">
            <summary>
            获取相应类型值。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue``1(System.Int32)">
            <summary>
            获取相应类型值。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.GetValue``1(System.Int32,``0)">
            <summary>
            获取相应类型值。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.TryGetValue``1(System.Int32)">
            <summary>
            获取相应类型值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.TryGetValue``1(System.Int32,``0)">
            <summary>
            获取相应类型值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="i">要查找的字段的索引。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.TryGetValue``1(System.String)">
            <summary>
            获取相应类型值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">要查找的列的名字。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.TryGetValue``1(System.String,``0)">
            <summary>
            获取相应类型值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="name">要查找的列的名字。</param>
            <param name="dft">查找的列为DBNull时，返回的默认值。</param>
            <returns>返回查找的内容。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.ChangeDatabase(System.String)">
            <summary>
            为打开的 Connection 对象更改当前数据库。
            </summary>
            <param name="databaseName">要代替当前数据库进行使用的数据库的名称。</param>
        </member>
        <member name="M:Py.Sql.DbHelper.GetCommandTextBuilder">
            <summary>
            生成一个命令生成工具。
            </summary>
            <returns>返回类。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.CreateAdapter">
            <summary>
            生成适合当前的数据库适配器辅助类。
            </summary>
            <returns>数据库适配器的辅助实例。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="connection">数据库连接对象。</param>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="connection">数据库连接对象。</param>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="connection">数据库连接对象。</param>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteDataSet(System.Data.IDbConnection,System.String,System.Data.CommandType,System.String[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="connection">数据库连接对象。</param>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="tables">数据表。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="connection">数据库连接对象。</param>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.PrepareCommand(System.Data.IDbConnection,System.Data.IDbCommand,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            初始化命令。
            </summary>
            <param name="command">IDbCommand对象。</param>
            <param name="connection">数据库连接对象。</param>
            <param name="commandType">命令类型。</param>
            <param name="commandText">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数集合。</param>
            <returns>是否要关闭连接。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.Debug">
            <summary>
            显示调试用的字符串。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.Create(Py.Sql.Database)">
            <summary>
            创建用于操作指定数据库的辅助类的实例。
            </summary>
            <param name="db">数据库类型。</param>
            <returns>数据库操作类。</returns>
        </member>
        <member name="P:Py.Sql.DbHelper.Connection">
            <summary>
            获取当前正在使用的连接。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.Command">
            <summary>
            获取当前正在使用的命令。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.DataReader">
            <summary>
            获取当前正在使用的数据读取器。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.SqlTable">
            <summary> 
            获取或设置正在操作的数据表名。
            </summary> 
        </member>
        <member name="P:Py.Sql.DbHelper.SqlColumn">
            <summary> 
            获取或设置正在操作的数据列名。不同的列用逗号隔开。
            </summary> 
        </member>
        <member name="P:Py.Sql.DbHelper.SqlColumns">
            <summary> 
            获取或设置正在操作的数据列。以数组的形式表示。
            </summary> 
        </member>
        <member name="P:Py.Sql.DbHelper.SqlCondition">
            <summary>
            获取或设置正在操作的Sql的条件(即 WHERE 后面的部分)。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.SqlPrimaryKey">
            <summary>
            获取或设置正在操作的表主键。只能有一列。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.SqlPageSize">
            <summary>
            获取或设置正在操作的最大条数。即翻页的大小或选择的记录个数。不使用这个功能请设为 -1。默认 -1 。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.SqlCurrentPage">
            <summary>
            获取或设置正在操作的当前页。不使用分页功能请设为 0。页数从1开始。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.SqlOrderby">
            <summary>
            获取或设置正在操作的Sql的排序字符串(即 ORDER BY 后面的部分)。可在末尾增加 DESC/ASC 指示排序。
            </summary>
            <value>如 id DESC 。</value>
        </member>
        <member name="P:Py.Sql.DbHelper.IsOpen">
            <summary>
            获取一个值, 该值指示连接是否已打开。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.Parameters">
            <summary>
            获取命令的参数集合。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.CommandTimeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间。
            </summary>
            <returns>等待命令执行的时间（以秒为单位）。默认值为 30 秒。</returns>
            <exception cref="T:System.ArgumentException">所分配的属性值小于 0。</exception>
        </member>
        <member name="P:Py.Sql.DbHelper.ConnectionString">
            <summary>
            获取或设置当前使用的连接字符串。
            </summary>
            <remarks>
            连接字符串会自动隐藏内部的密码字段，即获取为不含密码的连接字符串。
            </remarks>
        </member>
        <member name="P:Py.Sql.DbHelper.Sql">
            <summary> 
            获取或设置当前Sql命名。
            </summary> 
            <remarks>
            Sql和Procedure共用存储空间，这意味着只能存储一个命令。当设置Sql时，自动把CommandType设为文本。
            </remarks>
            <example>
            以下例子演示将Sql存于Sql属性中，并执行。
            <code>
            using System;
            using Py.Sql;
            
            class Sample{
                static void Main(){
                
                    DbHelper sql = new OledbDbHelper("~/App_Code/DbHelper.mdb");
                    sql.Sql = "Select * from [TABLE]";
                    sql.ExecuteNonQuery();
                }
            }
            
            </code></example>
            <seealso cref="P:Py.Sql.DbHelper.Procedure"/>
        </member>
        <member name="P:Py.Sql.DbHelper.Procedure">
            <summary>
            获取或设置目前的存储过程。
            </summary>
            <remarks>
            Sql和Procedure共用存储空间，这意味着只能存储一个命令。当设置Procedure时，自动把CommandType设为存储过程。
            </remarks>
            <seealso cref="P:Py.Sql.DbHelper.Sql"/>
        </member>
        <member name="P:Py.Sql.DbHelper.CommandType">
            <summary>
            获取或设置当前的命令类型。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.CommandText">
            <summary>
            获取和获得当前执行的命令内容。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.CanRead">
            <summary>
            获取一个值，该值指示当前的读取器是否已打开并可读取。
            </summary>
            <remarks>如果CanRead 为 false， Read() 将抛出异常。</remarks>
        </member>
        <member name="P:Py.Sql.DbHelper.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.Item(System.String)">
            <summary>
            当CanRead为true时，获取具有指定名称的列。否则，设置指定列的参数。
            </summary>
            <param name="columnName">要查找的列的名称。</param>
            <returns>名称指定为 System.Object 的列的值。</returns>
        </member>
        <member name="P:Py.Sql.DbHelper.CommandBuilder">
            <summary>
            获取当前的命令生成工具。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.DataSource">
            <summary>
            代表当前数据库所提供的数据源。获取可返回表示当前表内容的 DataTable ， 设置可更新DataTable等形式数据至数据库。
            </summary>
            <exception cref="T:System.ArgumentException">设置属性时，不支持此格式的数据源， 仅支持 DataTable，DataSet，DataRow[]。</exception>
            /// <exception cref="T:System.ArgumentException">设置属性时，<paramref name="value"/> 为空。</exception>
        </member>
        <member name="P:Py.Sql.DbHelper.DefaultConnectionString">
            <summary>
            获取或设置静态的连接字符串。
            </summary>
        </member>
        <member name="T:Py.Sql.DbHelper.CommandTextBuilder">
            <summary>
            Sql 生成类。
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.Table">
            <summary> 
            指明表名。
            </summary> 
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.Column">
            <summary> 
            指明列名。
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.Condition">
            <summary>
            指明条件。
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.PrimaryKey">
            <summary>
            指明主键。将用于生成删除和更新时的关键字段。
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.PageSize">
            <summary>
            指明生成语句的最大条数
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.CurrentPage">
            <summary>
            指明当前页
            </summary>
        </member>
        <member name="F:Py.Sql.DbHelper.CommandTextBuilder.Orderby">
            <summary>
            指明设置排序
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.CommandTextBuilder.ToString(Py.Sql.SqlOperation)">
            <summary>
            获取生成的 Sql。
            </summary>
            <param name="operation">生成的操作。</param>
            <returns>Sql</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.CommandTextBuilder.GetDescOrderBy">
            <summary>
            返回反向的 OrderBy 。
            </summary>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.CommandTextBuilder.CreateCondition">
            <summary>
            制作条件。
            </summary>
            <returns>成功返回true。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.CommandTextBuilder.Format(System.String,System.String)">
            <summary>
            格式化字符串格式。
            </summary>
            <param name="column">列。</param>
            <param name="format">参数源。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="P:Py.Sql.DbHelper.CommandTextBuilder.Columns">
            <summary>
            获取或设置所有列。使用","分开所有列。
            </summary>
        </member>
        <member name="T:Py.Sql.DbHelper.AdapterHelper">
            <summary> 
            数据库适配器辅助类。
            </summary>
            <remarks>用于批量操纵数据。</remarks>
            <example><code>
            using System;
            using Py.Sql;
            
            class Sample{
                static void Main(){
                
                    DbHepler sql = new DbHepler("~/App_Code/DbHelper.mdb");
                    sql.SqlTable = "ss";
                    sql.CreateCommandText(SqlOperation.Select);
                    DataSet ds = new DataSet();
                    DbHelper.AdapterHelper a = sql.CreateAdapter();
                    a.Fill(ds);
                    Console.Write(ds.Tables[0].Rows[0][1]);
                }
            }
            
            </code></example>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.CreateCommand(System.String)">
            <summary>
            被子类重写时，实现生成一个命令。
            </summary>
            <param name="cmdText">命令文本。</param>
            <returns>一个命令实例。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.PrepareCommands">
            <summary>
            准备更新。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Initialize">
            <summary>
            被子类重写时，实现初始化当前集合。
            </summary>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.RecordSet_FillError(System.Object,System.Data.FillErrorEventArgs)">
            <summary>
            默认填充错误的事件。
            </summary>
            <param name="sender">源。</param>
            <param name="e">参数。</param>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Fill(System.Data.DataSet)">
            <summary>
            在 System.Data.DataSet 中添加或刷新行以与数据源中的行匹配。
            </summary>
            <param name="dataSet">要用记录和架构（如果必要）填充的 System.Data.DataSet。</param>
            <returns>已在 System.Data.DataSet 中成功添加或刷新的行数。这不包括受不返回行的语句影响的行。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Fill(System.Data.DataSet,System.String)">
            <summary>
            在 System.Data.DataSet 中添加或刷新行以与数据源中的行匹配。
            </summary>
            <param name="dataSet">要用记录和架构（如果必要）填充的 System.Data.DataSet。</param>
            <param name="srcTable">用于表映射的源表的名称。</param>
            <returns>已在 System.Data.DataSet 中成功添加或刷新的行数。这不包括受不返回行的语句影响的行。</returns>
            <exception cref="T:System.SystemException">System.Data.DataSet 无效。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
            <summary>
            在 System.Data.DataTable 中添加或刷新行，以与从指定的记录开始一直检索到指定的最大数目的记录的数据源中的行匹配。
            </summary>
            <param name="startRecord">从其开始的从零开始的记录号。</param>
            <param name="maxRecord">要检索的最大记录数。</param>
            <param name="dataTable">要用记录和架构（如果必要）填充的 System.Data.DataTable。</param>
            <returns>已在 System.Data.DataTable 中成功添加或刷新的行数。此值不包括受不返回行的语句影响的行。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Fill(System.Data.DataTable)">
            <summary>
            在 System.Data.DataTable 中添加或刷新行，以与从指定的记录开始一直检索到指定的最大数目的记录的数据源中的行匹配。
            </summary>
            <param name="dataTable">要用记录和架构（如果必要）填充的 System.Data.DataTable。</param>
            <returns>已在 System.Data.DataTable 中成功添加或刷新的行数。此值不包括受不返回行的语句影响的行。</returns>
            <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Update(System.Data.DataSet)">
            <summary>
            为指定 System.Data.DataSet 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。
            </summary>
            <param name="dataSet">用于更新数据源的 System.Data.DataSet。</param>
            <returns>System.Data.DataSet 中成功更新的行数。</returns>
            <exception cref="T:System.ArgumentNullException">System.Data.DataSet 无效。</exception>
            <exception cref="T:System.InvalidOperationException">源表无效。</exception>
            <exception cref="T:System.Data.DBConcurrencyException">试图执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Update(System.Data.DataTable)">
            <summary>
            为指定 System.Data.DataTable 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。
            </summary>
            <param name="dataTable">用于更新数据源的 System.Data.DataTable。</param>
            <returns>System.Data.DataTable 中成功更新的行数。</returns>
            <exception cref="T:System.ArgumentNullException">System.Data.DataSet 无效。</exception>
            <exception cref="T:System.InvalidOperationException">源表无效,或查询的列不含主键。</exception>
            <exception cref="T:System.SystemException">不存在要更新的 System.Data.DataRow。- 或 - 不存在要更新的 System.Data.DataTable。- 或 - 不存在要用作源的 System.Data.DataSet。</exception>
            <exception cref="T:System.Data.DBConcurrencyException">试图执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Update(System.Data.DataRow[])">
            <summary>
            为指定的 System.Data.DataRow 对象数组中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。
            </summary>
            <param name="dataRows">用于更新数据源的 System.Data.DataRow 对象的数组。</param>
            <returns>System.Data.DataSet 中成功更新的行数。</returns>
            <exception cref="T:System.ArgumentNullException">System.Data.DataSet 无效。</exception>
            <exception cref="T:System.InvalidOperationException">源表无效。</exception>
            <exception cref="T:System.SystemException">不存在要更新的 System.Data.DataRow。- 或 - 不存在要更新的 System.Data.DataTable。- 或 - 不存在要用作源的 System.Data.DataSet。</exception>
            <exception cref="T:System.Data.DBConcurrencyException">试图执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Update(System.Data.DataSet,System.String)">
            <summary>
            为具有指定 System.Data.DataTable 名称的 System.Data.DataSet 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。
            </summary>
            <param name="dataSet">用于更新数据源的 System.Data.DataSet。</param>
            <param name="srcTable">用于表映射的源表的名称。</param>
            <returns>System.Data.DataSet 中成功更新的行数。</returns>
            <exception cref="T:System.ArgumentNullException">System.Data.DataSet 无效。</exception>
            <exception cref="T:System.InvalidOperationException">源表无效,或查询的列不含主键。</exception>
            <exception cref="T:System.Data.DBConcurrencyException">试图执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.op_Implicit(Py.Sql.DbHelper.AdapterHelper)~System.Data.DataSet">
            <summary>
            实现操作符 operator DataSet。
            </summary>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.op_Explicit(Py.Sql.DbHelper.AdapterHelper)~System.Data.DataTable">
            <summary>
            实现操作符 operator DataSet。
            </summary>
            <returns>操作的结果。</returns>
            <exception cref="T:System.InvalidOperationException">源表无效。</exception>
        </member>
        <member name="M:Py.Sql.DbHelper.AdapterHelper.Dispose">
            <summary>
            释放当前类使用的所有资源。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.DataAdapter">
            <summary>
            获取当前正在使用的 数据适配器。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.DbHelper">
            <summary>
            获取当前正在使用的 数据库辅助类。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.CommandBuilder">
            <summary>
            获取命令生成类。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.IsReady">
            <summary>
            获取或设置一个值，该值指定是否已准备。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.ContinueUpdateOnError">
            <summary>
            获取或设置一个值，该值指定在行更新过程中遇到错误时是否生成异常。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.SelectCommand">
            <summary>
            获取或设置选择的命令文本。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.DeleteCommand">
            <summary>
            获取或设置更新删除命令文本。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.InsertCommand">
            <summary>
            获取或设置更新插入命令。
            </summary>
        </member>
        <member name="P:Py.Sql.DbHelper.AdapterHelper.UpdateCommand">
            <summary>
            获取或设置更新编辑命令。
            </summary>
        </member>
        <member name="T:Py.Algorithm.Encryption">
            <summary>
            提供字符串加密解密的算法。
            </summary>
            <remarks>
            <list type="bullet">
                <listheader>本类包含以下加密算法:</listheader>
                <item>None(无加密)</item>
                <item>MD5</item>
                <item>DES</item>
                <item>AES</item>
                <item>TripleDES</item>
                <item>SHA1</item>
                <item>字符串移位简单加密</item>
            </list>
            <para>
            此类的所有加密解密函数都满足 <see cref="T:Py.Algorithm.Encryption.Algorithm"/> 委托，因此可以实现根据不同选项选择不同的加密算法。
            </para>
            </remarks>
            <example>
            以下示例演示了如何获得一个字符串经 MD5 加密后的字符串。
            <code>
            using Py.Algorithm;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    string input = "abc";
                    string md5 = Encryption.MD5(input);
                    Logger.Write(md5);
                }
                
            }
            </code>
            </example>
        </member>
        <member name="M:Py.Algorithm.Encryption.None(System.String)">
            <summary>
            表示不加密的算法。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
        </member>
        <member name="M:Py.Algorithm.Encryption.MD5(System.String,System.Boolean)">
            <summary>
            使用 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">加密是16位还是32位；如果为true则为16位。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.SHA1(System.String)">
            <summary>
            使用 SHA1 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptTripleDES(System.String,System.String)">
            <summary>
            使用 TripleDES 解密字符串。
            </summary>
            <param name="input">待解密的字符串。</param>
            <param name="decryptKey">用来解密的密钥。</param>
            <returns>解密后字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptTripleDES(System.String,System.String)">
            <summary>
            使用 TripleDES 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="encryptKey">密钥。</param>
            <returns>加密后字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncodeBase64(System.String)">
            <summary>
            转换为 Base64 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecodeBase64(System.String)">
            <summary>
            转换 Base64 加密字符串到普通字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被解密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.MD5t(System.String,System.Boolean)">
            <summary>
            简单 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">加密是16位还是32位；如果为true则为16位。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.MD5d(System.String)">
            <summary>
            使用 双MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.MD5x(System.String)">
            <summary>
            使用 加密MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptString(System.String)">
            <summary>
            使用 移位方式 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptString(System.String)">
            <summary>
            使用 移位方式 解密字符串。
            </summary>
            <param name="input">待解密的字符串。</param>
            <returns>被解密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptString(System.String,System.Int32)">
            <summary>
            使用 移位方式 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="key">键。 必须是 0 - 15 。 默认为 2 。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptString(System.String,System.Int32)">
            <summary>
            使用 移位方式 解密字符串。
            </summary>
            <param name="input">待解密的字符串。</param>
            <param name="key">键。</param>
            <returns>被解密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.GetHash``1(System.String)">
            <summary>
            计算文件的哈希值。
            </summary>
            <typeparam name="T">所有HashAlgorithm的非抽象子类，指示哈希的算法。</typeparam>
            <param name="filePath">要计算的文件位置。</param>
            <returns>字符串。表示获得的哈希值。</returns>
            <remarks>
            默认提供的可用的算法列表  (System.Security.Cryptography)
            <list>
            <item>MD5CryptoServiceProvider  MD5 </item>
            <item>SHA1CryptoServiceProvider  SHA1 </item>
            <item>SHA256Managed  SHA256 </item>
            <item>SHA384Managed  SHA384 </item>
            <item>SHA512Managed  SHA512 </item>
            </list>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.GetHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            通过一个方法获得一个文件的哈希值。
            </summary>
            <param name="ha">算法。</param>
            <param name="filePath">要计算的文件位置。</param>
            <returns>字符串。表示获得的哈希值。</returns>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.GetHash(System.String)">
            <summary>
            获取一个文件的 MD5 检验码。
            </summary>
            <param name="filePath">文件名。</param>
            <returns>MD5值。</returns>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptAES(System.String,System.String,System.String)">
            <summary>
            使用 AES 加密字符串。
            </summary>
            <param name="encryptString">待加密的字符串。</param>
            <param name="encryptKey">钥匙。</param>
            <param name="encryptIV">用来加密的初始化向量。可以用任何一个字符串。</param>
            <returns>字符</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptString"/> 或 <paramref name="encryptKey"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptAES(System.String,System.String,System.String)">
            <summary>
            使用 AES 解密字符串。
            </summary>
            <param name="decryptString">待解密的字符串。</param>
            <param name="decryptKey">钥匙, 和加密密钥相同。</param>
            <param name="decryptIV">用来解密的初始化向量。可以用任何一个字符串。</param>
            <returns>解密成功返回解密后的字符串,失败则返回 null。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptString"/> 或 <paramref name="decryptKey"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptDES(System.String,System.String,System.String)">
            <summary>
            使用 DES 加密字符串。
            </summary>
            <param name="encryptString">待加密的字符串。</param>
            <param name="encryptKey">加密密钥,要求为8位。</param>
            <param name="encryptIV">用来加密的初始化向量。可以用任何一个字符串。</param>
            <returns>加密成功返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptString"/> 或 <paramref name="encryptKey"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.EncryptDES(System.String,System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES加密。
            </summary>
            <param name="sourceFile">待加密的文件绝对路径。</param>
            <param name="destFile">加密后的文件保存的绝对路径。</param>
            <param name="encryptKey">用来加密的键。</param>
            <param name="encryptIV">用来加密的初始化向量。可以用任何一个字符串。</param>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptDES(System.String,System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES解密。
            </summary>
            <param name="sourceFile">待解密的文件绝对路径。</param>
            <param name="destFile">解密后的文件保存的绝对路径。</param>
            <param name="decryptKey">用来解密的键 不支持中文。</param>
            <param name="decryptIV">用来解密的初始化向量。可以用任何一个字符串。</param>
        </member>
        <member name="M:Py.Algorithm.Encryption.DecryptDES(System.String,System.String,System.String)">
            <summary>
            使用 DES 解密字符串。
            </summary>
            <param name="decryptString">待解密的字符串。</param>
            <param name="decryptKey">解密密钥,和加密密钥相同。</param>
            <param name="decryptIV">用来解密的初始化向量。可以用任何一个字符串。</param>
            <returns>解密成功返回解密后的字符串,失败则返回 null。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptString"/> 或 <paramref name="decryptKey"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Encryption.ToBit(System.String,System.Int32)">
            <summary>
            将数组固定为 8 的长度。
            </summary>
            <param name="value">缓存。</param>
            <param name="length">长度。</param>
            <returns>处理的缓存。</returns>
        </member>
        <member name="T:Py.Algorithm.Encryption.Algorithm">
            <summary>
            表示一个加密的算法函数。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="T:Py.Algorithm.Encryption.MD5Encryption">
            <summary>
            使用 传统MD5 处理字符串。
            </summary>
            <remarks>
            目前仅支持 Md5OLD=1 的情况，也就是不对输入的字串进行ansi编码。绝大部分asp程序都是用这种方式获得md5编码。
            作者：DarkRain.cn [heroworld.net, taihainet.com] 2007
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Encryption.MD5Encryption.MD5(System.String,System.Boolean)">
            <summary>
            简单 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">加密是16位还是32位；如果为true则为16位。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="T:Py.Core.Scanner">
            <summary>
            表示一个用于读取字符串或控制台的工具。
            </summary>
            <remarks>
            这个类实现了基本的控制台输入功能。
            </remarks>
            <example>
            以下示例演示了如何使用 Scanner 类实现输入2个整数，然后输出和 。
            <code>
            using Py.Core;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    int a, b;
                    Scanner cin = new Scanner();
                    while(cin.Read(out a).Read(out b))
                        Logger.Write( a + b );
                }
                
            }
            </code>
            </example>
        </member>
        <member name="F:Py.Core.Scanner.FLOW">
            <summary>
            停止输入记号。
            </summary>
        </member>
        <member name="F:Py.Core.Scanner._position">
            <summary>
            位置。
            </summary>
        </member>
        <member name="F:Py.Core.Scanner._cache">
            <summary>
            缓存字符串。
            </summary>
        </member>
        <member name="M:Py.Core.Scanner.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Core.Scanner"/> 的新实例。
            </summary>
            <param name="cache">缓存。</param>
            <param name="position">位置。</param>
        </member>
        <member name="M:Py.Core.Scanner.ReadCache(System.Boolean@)">
            <summary>
            准备缓存。
            </summary>
            <param name="flag">是否为负数。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadCache">
            <summary>
            准备缓存。
            </summary>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Core.Scanner.OnRead">
            <summary>
            获取一个 Unicode 字符。
            </summary>
            <returns>一个 Unicode 字符。</returns>
        </member>
        <member name="M:Py.Core.Scanner.OnReadLine">
            <summary>
            获取一行字符串。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadChar">
            <summary>
            获取一个 Unicode 字符。
            </summary>
            <returns>一个 Unicode 字符。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadLine">
            <summary>
            获取一行字符串。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadInt">
            <summary>
            获取一个整数。
            </summary>
            <returns>整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadLong">
            <summary>
             获取一个64位有符号的整数。
            </summary>
            <returns>  一个64位有符号的整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadShort">
            <summary>
            获取一个16位有符号的整数。
            </summary>
            <returns>一个16位有符号的整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadSByte">
            <summary>
            获取一个8位有符号整数。
            </summary>
            <returns>一个8位有符号整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadByte">
            <summary>
            获取一个8位无符号整数。
            </summary>
            <returns>一个8位无符号整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadUInt">
            <summary>
            获取一个32位无符号整数。
            </summary>
            <returns>一个32位无符号整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadULong">
            <summary>
            获取一个64位无符号整数。
            </summary>
            <returns>一个64位无符号整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadUShort">
            <summary>
            获取一个16位无符号整数。
            </summary>
            <returns>一个16位无符号整数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadFloat">
            <summary>
            获取一个单精度浮点数字。
            </summary>
            <returns>一个单精度浮点数字。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadDouble">
            <summary>
            获取一个双精度浮点数。
            </summary>
            <returns>一个双精度浮点数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadString">
            <summary>
            获取一个字符串。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadDecimal">
            <summary>
            获取一个十进制数。
            </summary>
            <returns>十进制数。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadDateTime">
            <summary>
            获取一个日期。
            </summary>
            <returns>日期。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadBool">
            <summary>
            获取一个布尔值。
            </summary>
            <returns>一个布尔值。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadTimeSpan">
            <summary>
            获取一个时间间隔。
            </summary>
            <returns>时间间隔。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Boolean@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadLine(System.String@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Char@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Int32@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Int16@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Int64@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.SByte@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Byte@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.UInt64@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.UInt32@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Single@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.UInt16@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Decimal@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.Double@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.TimeSpan@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.DateTime@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.Read(System.String@)">
            <summary>
            读取一个值。
            </summary>
            <param name="v">输出的变量名。</param>
            <returns>读取器，用于连续操作。</returns>
        </member>
        <member name="M:Py.Core.Scanner.op_Implicit(Py.Core.Scanner)~System.Boolean">
            <summary>
            实现从 <see cref="T:Py.Core.Scanner"/> 到 <see cref="T:System.Boolean"/> 的隐性的转换。
            </summary>
            <param name="scanner">读取器。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadString(System.String,System.Int32@)">
            <summary>
            从一个字符串中读取有效的字符串。
            </summary>
            <param name="input">输入的值。</param>
            <param name="startIndex">开始出现引号的位置。</param>
            <returns>一个字符串。如有错误，则返回空。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadNumber(System.String,System.Int32@)">
            <summary>
            从一个字符串中读取有效的数字。
            </summary>
            <param name="input">输入的值。</param>
            <param name="startIndex">开始出现引号的位置。</param>
            <returns>一个字符串。如有错误，则返回空。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadLiteral(System.String,System.Int32@)">
            <summary>
            从一个字符串中读取有效的数字。
            </summary>
            <param name="input">输入的值。</param>
            <param name="startIndex">开始出现引号的位置。</param>
            <returns>一个字符串。如有错误，则返回空。</returns>
        </member>
        <member name="M:Py.Core.Scanner.ReadValue(System.String,System.Int32@,System.Predicate{System.Char})">
            <summary>
            从一个字符串中读取有效的数字。
            </summary>
            <param name="input">输入的值。</param>
            <param name="startIndex">开始出现引号的位置。</param>
            <param name="predicate">判断是否继续读的委托。</param>
            <returns>一个字符串。如有错误，则返回空。</returns>
        </member>
        <member name="T:Py.Logging.LogEntry">
            <summary>
            代表一个日志项。
            </summary>
        </member>
        <member name="F:Py.Logging.LogEntry._time">
            <summary>
            代表日前生成时间。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor">
            <summary>
            生成一个新的 Py.Logging.LogEntry 实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor(System.String)">
            <summary>
            使用指定的信息生成一个新的 Py.Logging.LogEntry 实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor(System.String,Py.Logging.LogLevel)">
            <summary>
            使用指定的信息生成一个新的 Py.Logging.LogEntry 实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor(System.String,Py.Logging.LogLevel,Py.Logging.LogEventType)">
            <summary>
            使用指定的信息生成一个新的 Py.Logging.LogEntry 实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor(System.String,Py.Logging.LogEventType)">
            <summary>
            使用指定的信息生成一个新的 Py.Logging.LogEntry 实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LogEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用序列化信息初始化 <see cref="T:Py.Logging.LogEntry"/> 的新实例。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
        </member>
        <member name="M:Py.Logging.LogEntry.ToString">
            <summary>
            返回包含 <see cref="T:System.ComponentModel.Component"/> 的名称的 <see cref="T:System.String"/>（如果有）。不应重写此方法。
            </summary>
            <returns>
            包含 <see cref="T:System.ComponentModel.Component"/> 的名称的 <see cref="T:System.String"/>（如果有）；如果 <see cref="T:System.ComponentModel.Component"/> 未命名，则为 null。
            </returns>
        </member>
        <member name="M:Py.Logging.LogEntry.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:Py.Logging.LogEntry.Equals(Py.Logging.LogEntry)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>
            如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Logging.LogEntry.Level">
            <summary>
            获取或设置当前日志项的类型。
            </summary>
        </member>
        <member name="P:Py.Logging.LogEntry.Message">
            <summary>
            获取或设置当前信息。
            </summary>
        </member>
        <member name="P:Py.Logging.LogEntry.Tag">
            <summary>
            获取或设置日志其他信息。
            </summary>
        </member>
        <member name="P:Py.Logging.LogEntry.EventType">
            <summary>
            获取或设置当前日志来源类型。
            </summary>
        </member>
        <member name="P:Py.Logging.LogEntry.Time">
            <summary>
            获取或设置当前日志发生时间。
            </summary>
        </member>
        <member name="T:Py.Logging.StreamLogListener">
            <summary>
            将日志输出到流。
            </summary>
        </member>
        <member name="T:Py.Logging.TextLogListener">
            <summary>
            为所有以文本方式存储日志的监听器提供 abstract 基类。
            </summary>
        </member>
        <member name="M:Py.Logging.TextLogListener.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.TextLogListener"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Logging.TextLogListener.#ctor(Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.TextLogListener"/> 的新实例。
            </summary>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.TextLogListener.OnLog(System.String)">
            <summary>
            当被子类重写时，将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.TextLogListener.ConvertLogEntry(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，将日志转为字符串。
            </summary>
            <param name="entry">日志。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Logging.TextLogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            实现保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="P:Py.Logging.TextLogListener.IndentLevel">
            <summary>
            获取或设置缩进级别。
            </summary>
            <value>缩进级别。默认值为零。</value>
        </member>
        <member name="P:Py.Logging.TextLogListener.IndentSize">
            <summary>
            获取或设置缩进的空格数。
            </summary>
            <value>缩进的空格数。默认值为四。</value>
            <remarks>
            如果不缩进，这个值为 1 。
            </remarks>
        </member>
        <member name="F:Py.Logging.StreamLogListener._writer">
            <summary>
            使用的写工具。
            </summary>
        </member>
        <member name="M:Py.Logging.StreamLogListener.#ctor(System.IO.Stream)">
            <summary>
            初始化 <see cref="T:Py.Logging.StreamLogListener"/> 的新实例。
            </summary>
            <param name="writer">流写入工具。</param>
        </member>
        <member name="M:Py.Logging.StreamLogListener.#ctor(System.IO.StreamWriter)">
            <summary>
            初始化 <see cref="T:Py.Logging.StreamLogListener"/> 的新实例。
            </summary>
            <param name="writer">流写入工具。</param>
        </member>
        <member name="M:Py.Logging.StreamLogListener.#ctor(System.IO.StreamWriter,Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.StreamLogListener"/> 的新实例。
            </summary>
            <param name="writer">流写入工具。</param>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.StreamLogListener.OnLog(System.String)">
            <summary>
            当被子类重写时，将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.StreamLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.StreamLogListener.Close">
            <summary>
            关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.StreamLogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="P:Py.Logging.StreamLogListener.Writer">
            <summary>
            获取或设置使用的写工具。
            </summary>
        </member>
        <member name="P:Py.Logging.StreamLogListener.AutoFlush">
            <summary>
            获取或设置是否在增加日志后自动使用 Flush() 输出缓存。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.Logging.WebLogListener">
            <summary>
            将日志输出到 HttpContext.Response
            </summary>
        </member>
        <member name="M:Py.Logging.WebLogListener.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.WebLogListener"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Logging.WebLogListener.#ctor(Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.TextLogListener"/> 的新实例。
            </summary>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.WebLogListener.ConvertLogEntry(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，将日志转为字符串。
            </summary>
            <param name="entry">日志。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Logging.WebLogListener.OnLog(System.String)">
            <summary>
            当被子类重写时，将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.WebLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.WebLogListener.Close">
            <summary>
            刷新输出缓冲区，关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="P:Py.Logging.WebLogListener.Response">
            <summary>
            获取当前的响应。
            </summary>
        </member>
        <member name="P:Py.Logging.WebLogListener.IndentLevel">
            <summary>
            获取或设置缩进级别。
            </summary>
            <value>缩进级别。默认值为零。</value>
        </member>
        <member name="T:Py.Html.HtmlDocument">
            <summary>
            表示 HTML 文档。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocument.#ctor">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlDocument" /> 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocument.#ctor(Py.Html.HtmlNameTable)">
            <summary>
            用指定的 <see cref="T:Py.Html.HtmlNameTable"/> 初始化 HtmlDocument 类的新实例。
            </summary>
            <param name="nameTable">要使用的 HtmlNameTable。</param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <returns>
            克隆的 HtmlDocument 节点。
            </returns>
            <param name="deep">
            如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            创建具有指定 <see cref="P:Py.Html.HtmlDocument.Name" /> 的 <see cref="T:Py.Html.HtmlAttribute" />。
            </summary>
            <returns>
            新的 HtmlAttribute。
            </returns>
            <param name="name">
            属性的限定名。如果名称包含冒号，则 <see cref="P:Py.Html.HtmlNode.Prefix" /> 属性反映名称中第一个冒号之前的部分，<see cref="P:Py.Html.HtmlDocument.LocalName" /> 属性反映名称中第一个冒号之后的部分。<see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 保持为空，除非该前缀是一个可识别的内置前缀，例如 xmlns。在这种情况下，NamespaceURI 具有值 http://www.w3.org/2000/xmlns/。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            创建具有指定限定名和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlAttribute" />。
            </summary>
            <returns>
            新的 HtmlAttribute。
            </returns>
            <param name="qualifiedName">
            属性的限定名。如果名称包含冒号，则 <see cref="P:Py.Html.HtmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:Py.Html.HtmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。
            </param>
            <param name="namespaceURI">
            属性的 namespaceURI。如果限定名包含前缀 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateAttribute(System.String,System.String,System.String)">
            <summary>
            创建一个具有指定的 <see cref="P:Py.Html.HtmlNode.Prefix" />、<see cref="P:Py.Html.HtmlDocument.LocalName" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlAttribute" />。
            </summary>
            <returns>
            新的 HtmlAttribute。
            </returns>
            <param name="prefix">
            属性的前缀（如果有的话）。String.Empty 与 null 等效。
            </param>
            <param name="localName">
            属性的本地名称。
            </param>
            <param name="namespaceURI">
            属性的命名空间 URI（如果有的话）。String.Empty 与 null 等效。如果 <paramref name="prefix" /> 为 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/；否则将引发异常。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateCDataSection(System.String)">
            <summary>
            创建包含指定数据的 <see cref="T:Py.Html.HtmlCDataSection" />。
            </summary>
            <returns>
            新的 HtmlCDataSection。
            </returns>
            <param name="data">
            新 HtmlCDataSection 的内容。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateComment(System.String)">
            <summary>
            创建包含指定数据的 <see cref="T:Py.Html.HtmlComment" />。
            </summary>
            <returns>
            新的 HtmlComment。
            </returns>
            <param name="data">
            新 HtmlComment 的内容。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateDocumentFragment">
            <summary>
            创建 <see cref="T:Py.Html.HtmlDocumentFragment" />。
            </summary>
            <returns>
            新的 HtmlDocumentFragment。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateDocumentType(System.String,System.String,System.String)">
            <summary>
            返回新的 <see cref="T:Py.Html.HtmlDocumentType"/> 对象。
            </summary>
            <param name="name">此文档类型的名称。</param>
            <param name="publicId">此文档类型的公共标识符或 null。可以指定公共 URI 以及系统标识符，以标识外部 DTD 子集的位置。</param>
            <param name="systemId">此文档类型的系统标识符或 null。指定外部 DTD 子集的文件位置的 URL。</param>
            <returns>新的 HtmlDocumentType。</returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateElement(System.String)">
            <summary>
            创建具有指定名称的元素。
            </summary>
            <returns>
            新的 HtmlElement。
            </returns>
            <param name="name">
            元素的限定名。如果名称包含冒号，则 <see cref="P:Py.Html.HtmlNode.Prefix" /> 属性反映名称中位于冒号之前的部分，<see cref="P:Py.Html.HtmlDocument.LocalName" /> 属性反映名称中位于冒号之后的部分。限定名不能包含“xmlns”前缀。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateElement(System.String,System.String)">
            <summary>
            创建具有限定名和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlElement" />。
            </summary>
            <returns>
            新的 HtmlElement。
            </returns>
            <param name="qualifiedName">
            元素的限定名。如果名称包含冒号，则 <see cref="P:Py.Html.HtmlNode.Prefix" /> 属性将反映名称中位于冒号前的部分，而 <see cref="P:Py.Html.HtmlDocument.LocalName" /> 属性将反映名称中位于冒号后的部分。限定名不能包含“xmlns”前缀。
            </param>
            <param name="namespaceURI">
            元素的命名空间 URI。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            创建具有指定 <see cref="P:Py.Html.HtmlNode.Prefix" />、<see cref="P:Py.Html.HtmlDocument.LocalName" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的元素。
            </summary>
            <returns>
            新的 <see cref="T:Py.Html.HtmlElement" />。
            </returns>
            <param name="prefix">
            新元素的前缀（如果有的话）。String.Empty 与 null 等效。
            </param>
            <param name="localName">
            新元素的本地名称。
            </param>
            <param name="namespaceURI">
            新元素的命名空间 URI（如果有的话）。String.Empty 与 null 等效。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateNode(System.String,System.String,System.String)">
            <summary>
            创建具有指定的节点类型、<see cref="P:Py.Html.HtmlDocument.Name" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>
            新的 HtmlNode。
            </returns>
            <param name="nodeTypeString">
            新节点的 <see cref="T:Py.Html.HtmlNodeType" /> 的字符串版本。该参数必须是下表中列出的值之一。
            </param>
            <param name="name">
            新节点的限定名。如果名称包含一个冒号，则将它解析为 <see cref="P:Py.Html.HtmlNode.Prefix" /> 和 <see cref="P:Py.Html.HtmlDocument.LocalName" /> 两部分。
            </param>
            <param name="namespaceURI">
            新节点的命名空间 URI。
            </param>
            <exception cref="T:System.ArgumentException">
            未提供名称，但 HtmlNodeType 需要名称；或者 <paramref name="nodeTypeString" /> 不是下面列出的字符串之一。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateNode(Py.Html.HtmlNodeType,System.String,System.String)">
            <summary>
            创建一个具有指定的 <see cref="T:Py.Html.HtmlNodeType" />、<see cref="P:Py.Html.HtmlDocument.Name" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>
            新的 HtmlNode。
            </returns>
            <param name="type">
            新节点的 HtmlNodeType。
            </param>
            <param name="name">
            新节点的限定名。如果名称包含一个冒号，则将其解析为 <see cref="P:Py.Html.HtmlNode.Prefix" /> 和 <see cref="P:Py.Html.HtmlDocument.LocalName" /> 两部分。
            </param>
            <param name="namespaceURI">
            新节点的命名空间 URI。
            </param>
            <exception cref="T:System.ArgumentException">
            未提供名称，而 HtmlNodeType 需要名称。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateNode(Py.Html.HtmlNodeType,System.String,System.String,System.String)">
            <summary>
            创建一个具有指定的 <see cref="T:Py.Html.HtmlNodeType" />、<see cref="P:Py.Html.HtmlNode.Prefix" />、<see cref="P:Py.Html.HtmlDocument.Name" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>
            新的 HtmlNode。
            </returns>
            <param name="type">
            新节点的 HtmlNodeType。
            </param>
            <param name="prefix">
            新节点的前缀。
            </param>
            <param name="name">
            新节点的本地名称。
            </param>
            <param name="namespaceURI">
            新节点的命名空间 URI。
            </param>
            <exception cref="T:System.ArgumentException">
            未提供名称，而 HtmlNodeType 需要名称。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            创建具有指定文本的 <see cref="T:Py.Html.HtmlText" />。
            </summary>
            <returns>
            新的 HtmlText 节点。
            </returns>
            <param name="text">
            Text 节点的文本。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementById(System.String)">
            <summary>
            获取具有指定 ID 的 <see cref="T:Py.Html.HtmlElement"/>。
            </summary>
            <param name="elementId">要匹配的属性 ID。</param>
            <returns>
            具有匹配 ID 的 HtmlElement；如果未找到匹配的元素，则为 null。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsByTagName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name" /> 匹配的所有子代元素的列表。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeList" />，包含所有匹配节点的列表。如果没有任何节点与 <paramref name="name" /> 匹配，则返回的集合将为空。
            </returns>
            <param name="name">
            要匹配的限定名。它针对匹配节点的 Name 属性进行匹配。特殊值“*”匹配所有标记。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsByName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name" /> 匹配的所有子代元素的列表。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeList" />，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="name" /> 匹配，则返回的集合将为空。
            </returns>
            <param name="name">
            要匹配的 Name。特殊值“*”匹配所有标记。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsBy(System.Predicate{Py.Html.HtmlElement})">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="predicate">要匹配的判断。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="predicate"/> 匹配，则返回的集合将为空。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsByAttribute(System.String,System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlDocument.Name"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="name">要匹配的 Name。特殊值“*”匹配所有标记。</param>
            <param name="value">查找的属性，特殊值 null 返回所有定义此属性的节点。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="name"/> 匹配，则返回的集合将为空。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsByClassName(System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList"/>，它包含与指定 <see cref="P:Py.Html.HtmlElement.ClassName"/> 匹配的所有子代元素的列表。
            </summary>
            <param name="className">要匹配的名称标记。这是限定名。它针对匹配节点的 Name 属性进行匹配。星号 (*) 是一个匹配所有标记的特殊值。</param>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeList"/>，包含所有匹配节点的列表。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.GetElementsByTagName(System.String,System.String)">
            <summary>
            返回一个 <see cref="T:Py.Html.HtmlNodeList" />，它包含与指定 <see cref="P:Py.Html.HtmlDocument.LocalName" /> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 匹配的所有子代元素的列表。
            </summary>
            <returns>
            <see cref="T:Py.Html.HtmlNodeList" />，包含所有匹配节点的列表。如果没有任何节点与指定的 <paramref name="localName" /> 和 <paramref name="namespaceURI" /> 匹配，则返回的集合将为空。
            </returns>
            <param name="localName">
            要匹配的 LocalName。特殊值“*”匹配所有标记。
            </param>
            <param name="namespaceURI">
            要匹配的 NamespaceURI。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.ImportNode(Py.Html.HtmlNode,System.Boolean)">
            <summary>
            将节点从另一个文档导入到当前文档。
            </summary>
            <returns>
            导入的 <see cref="T:Py.Html.HtmlNode" />。
            </returns>
            <param name="node">
            正在被导入的节点。
            </param>
            <param name="deep">
            如果执行深层克隆，则为 true；否则为 false。
            </param>
            <exception cref="T:System.InvalidOperationException">
            在一个不能被导入的节点类型上调用了该方法。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateProcessingInstruction(System.String,System.String)">
            <summary>
            创建 <see cref="T:Py.Html.HtmlProcessingInstruction" />。
            </summary>
            <param name="name">指令名。</param>
            <param name="value">节点的内容。</param>
            <returns>生成的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.CreateWhitespace(System.String)">
            <summary>
            创建 <see cref="T:Py.Html.HtmlText" />。
            </summary>
            <param name="p">内容。</param>
            <returns>生成的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.String)">
            <summary>
            从指定的 URL 加载 HTML 文档。
            </summary>
            <param name="filename">文件的 URL，该文件包含要加载的 HTML 文档。URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="filename"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="filename"/> 为 null。
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            指定的路径无效（例如，它位于未映射的驱动器上）。
            </exception>
            <exception cref="T:System.IO.IOException">
            打开文件时发生了 I/O 错误。
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            	<paramref name="filename"/> 指定了一个只读文件。
            - 或 -
            在当前平台上不支持此操作。
            - 或 -
            <paramref name="filename"/> 指定了一个目录。
            - 或 -
            调用方没有所要求的权限。
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            未找到在 <paramref name="filename"/> 中指定的文件。
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="filename"/> 的格式无效。
            </exception>
            <exception cref="T:System.Security.SecurityException">
            调用方没有所要求的权限。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.Uri)">
            <summary>
            从指定的地址加载 HTML 文档。
            </summary>
            <param name="uri">载入的地址。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.Uri,System.Text.Encoding)">
            <summary>
            从指定的地址加载 HTML 文档。
            </summary>
            <param name="uri">载入的地址。</param>
            <param name="encoding">指定网站编码。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.IO.Stream)">
            <summary>
            从指定的流加载 HTML 文档。
            </summary>
            <param name="inStream">包含要加载的 HTML 文档的流。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从指定的流加载 HTML 文档。
            </summary>
            <param name="inStream">包含要加载的 HTML 文档的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(Py.IO.TextBuffer)">
            <summary>
            从指定的 <see cref="T:System.IO.TextReader" /> 加载 HTML 文档。
            </summary>
            <param name="txtReader">
            用于将 HTML 数据输送到文档中的 TextReader。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(Py.Html.HtmlReader)">
            <summary>
            从指定的 <see cref="T:Py.Html.HtmlReader" /> 加载 HTML 文档。
            </summary>
            <param name="reader">
            用于将 HTML 数据输送到文档中的 HtmlReader。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Load(System.IO.TextReader)">
            <summary>
            从指定的 <see cref="T:System.IO.TextReader"/> 加载 HTML 文档。
            </summary>
            <param name="reader">
            用于将 HTML 数据输送到文档中的 TextReader。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.RemoveAll">
            <summary>
            移除当前节点的所有子节点和/或属性。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocument.LoadHtml(System.String)">
            <summary>
            从指定的字符串加载 HTML 文档。
            </summary>
            <param name="html">包含要加载的 HTML 文档的字符串。</param>
            <exception cref="T:Py.Html.HtmlException">
            HTML 中有加载或分析错误。这种情况下，文档保持为空。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.ReadNode(System.String)">
            <summary>
            根据字符串内容创建一个 <see cref="T:Py.Html.HtmlNode" /> 对象。读取器必须定位在节点或属性上。
            </summary>
            <returns>
            新的 HtmlNode；如果不存在其他节点，则为 null。
            </returns>
            <param name="html">
            HTML 源 。
            </param>
            <exception cref="T:System.NullReferenceException">
            读取器定位在一个不能转换为有效 DOM 节点的节点类型上（例如 EndElement 或 EndEntity）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.ReadNode(Py.Html.HtmlReader)">
            <summary>
            根据 <see cref="T:Py.Html.HtmlReader" /> 中的信息创建一个 <see cref="T:Py.Html.HtmlNode" /> 对象。读取器必须定位在节点或属性上。
            </summary>
            <returns>
            新的 HtmlNode；如果不存在其他节点，则为 null。
            </returns>
            <param name="reader">
            HTML 源
            </param>
            <exception cref="T:System.NullReferenceException">
            读取器定位在一个不能转换为有效 DOM 节点的节点类型上（例如 EndElement 或 EndEntity）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Save(System.IO.Stream)">
            <summary>
            将 HTML 文档保存到指定的流。
            </summary>
            <param name="outStream">
            要保存到其中的流。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            此操作不产生格式良好的 HTML 文档（例如，没有文档元素或重复的 HTML 声明）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Save(System.IO.TextWriter)">
            <summary>
            将 HTML 文档保存到指定的 <see cref="T:System.IO.TextWriter" />。
            </summary>
            <param name="writer">
            要保存到其中的 TextWriter。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            此操作不产生格式良好的 HTML 文档（例如，没有文档元素或重复的 HTML 声明）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Save(System.String)">
            <summary>
            将 HTML 文档保存到指定的文件。
            </summary>
            <param name="filename">
            要将文档保存到其中的文件的位置。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            此操作不产生格式良好的 HTML 文档（例如，没有文档元素或重复的 HTML 声明）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.Save(System.Web.UI.HtmlTextWriter)">
            <summary>
            将 HTML 文档保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/>。
            </summary>
            <param name="w">
            要保存到其中的 HtmlWriter。
            </param>
            <exception cref="T:Py.Html.HtmlException">
            此操作不产生格式良好的 HTML 文档（例如，没有文档元素或重复的 HTML 声明）。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlDocument.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将 HtmlDocument 节点的所有子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">
            要保存到其中的 HtmlWriter。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将 HtmlDocument 节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/>。
            </summary>
            <param name="w">
            要保存到其中的 HtmlWriter。
            </param>
        </member>
        <member name="M:Py.Html.HtmlDocument.Close">
            <summary>
            关闭所有连接。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocument.Write(System.String)">
            <summary>
            写入一段 HTML 。
            </summary>
            <param name="html">字符串。</param>
        </member>
        <member name="M:Py.Html.HtmlDocument.Open(System.Uri)">
            <summary>
            打开一个 HTML 。
            </summary>
            <param name="uri">地址。</param>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeChanged">
            <summary>
            当属于该文档的节点的 <see cref="P:Py.Html.HtmlNode.Value" /> 已被更改时发生。
            </summary>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeChanging">
            <summary>
            当属于该文档的节点的 <see cref="P:Py.Html.HtmlNode.Value" /> 将被更改时发生。
            </summary>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeInserted">
            <summary>
            当属于该文档的节点已被插入另一个节点时发生。
            </summary>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeInserting">
            <summary>
            当属于该文档的节点将被插入另一个节点时发生。
            </summary>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeRemoved">
            <summary>
            当属于该文档的节点已被从其父级移除时发生。
            </summary>
        </member>
        <member name="E:Py.Html.HtmlDocument.NodeRemoving">
            <summary>
            当属于该文档的节点将被从文档中移除时发生。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.HtmlEncode">
            <summary>
            获取或设置是否处理实体字符。 
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.BaseURI">
            <summary>
            获取当前节点的基 URI。
            </summary>
            <returns>
            从其加载节点的位置。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.DocumentElement">
            <summary>
            获取文档的根 <see cref="T:Py.Html.HtmlElement" />。
            </summary>
            <returns>
            表示 HTML 文档树的根的 HtmlElement。如果不存在根，则返回 null。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.DocumentType">
            <summary>
            获取包含 DOCTYPE 声明的节点。
            </summary>
            <returns>
            包含 DocumentType（DOCTYPE 声明）的 <see cref="T:Py.Html.HtmlNode" />。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.DocType">
            <summary>
            获取包含 DOCTYPE 声明的节点。
            </summary>
            <returns>
            包含 DocumentType（DOCTYPE 声明）的 <see cref="T:Py.Html.HtmlNode" />。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.InnerHtml">
            <summary>
            获取或设置表示当前节点子级的标记。
            </summary>
            <returns>
            当前节点子级的标记。
            </returns>
            <exception cref="T:Py.Html.HtmlException">
            设置此属性时指定的 HTML 不是格式良好的。
            </exception>
        </member>
        <member name="P:Py.Html.HtmlDocument.IsReadOnly">
            <summary>
            获取一个值，该值指示当前节点是否是只读的。
            </summary>
            <returns>
            如果当前节点是只读的，则为 true；否则为 false。HtmlDocument 节点总是返回 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>
            对于 HtmlDocument 节点，本地名称是 #document。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>
            对于 HtmlDocument 节点，该名称是 #document。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.NameTable">
            <summary>
            获取与此实现关联的 <see cref="T:Py.Html.HtmlNameTable" />。
            </summary>
            <returns>HtmlNameTable，它使您能够获取该文档中字符串的原子化版本。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>
            节点类型。对于 HtmlDocument 节点，该值是 HtmlNodeType.Document。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.OwnerDocument">
            <summary>
            获取当前节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>
            对于 HtmlDocument 节点（<see cref="P:Py.Html.HtmlDocument.NodeType" /> 等于 HtmlNodeType.Document），该属性总是返回 null。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.ParentNode">
            <summary>
            获取该节点（对于可以具有父级的节点）的父级。
            </summary>
            <returns>
            始终返回 null。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.PreserveWhitespace">
            <summary>
            获取或设置一个值，该值指示是否在元素内容中保留空白。
            </summary>
            <returns>true 表示保留空白；否则为 false。默认为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlDocument.Forms">
            <summary>
            获取当前页面所有的表单集合。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Body">
            <summary>
            获取当前文档的 body 元素。 如果不存在 body 元素 或 body 未在正确的位置出现， 返回 null 。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Title">
            <summary>
            获取或设置当前 Document 的标题。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Images">
            <summary>
            获取当前文档所有图片集合。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Anchors">
            <summary>
            获取当前文档所有超链接的集合。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Links">
            <summary>
            获取当前文档所有超链接的集合。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Browser">
            <summary>
            获取打开当前页面的浏览器。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Location">
            <summary>
            获取或设置当前的位置。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlDocument.Charset">
            <summary>
            获取由网页内容指明的编码。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlTextareaElement">
            <summary>
            表示一个 textarea 标签。
            </summary>
        </member>
        <member name="T:Py.Html.IHtmlInput">
            <summary>
            一个输入控件。 HtmlInputElement , HtmlTextaeroElement,  HtmlSelectElement 实现了此接口。
            </summary>
        </member>
        <member name="P:Py.Html.IHtmlInput.Name">
            <summary>
            获取或设置当前元素的名字。
            </summary>
        </member>
        <member name="P:Py.Html.IHtmlInput.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.IHtmlInput.Type">
            <summary>
            获取节点的类型。
            </summary>
        </member>
        <member name="P:Py.Html.IHtmlInput.Id">
            <summary>
            获取或设置当前元素的标识符。
            </summary>
        </member>
        <member name="P:Py.Html.IHtmlInput.Form">
            <summary>
            获取元素所在的表单。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextareaElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlInputElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="P:Py.Html.HtmlTextareaElement.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlTextareaElement.Form">
            <summary>
            获取当前元素所在的表单。
            </summary>
        </member>
        <member name="T:Py.Windows.FormHelper">
            <summary>
            辅助表单完成各种功能。
            </summary>
        </member>
        <member name="M:Py.Windows.FormHelper.Animate(System.Windows.Forms.Form,Py.Windows.AW,System.Int32)">
            <summary>
            显示与隐藏窗口时能产生特殊的效果。有两种类型的动画效果：滚动动画和滑动动画。
            </summary>
            <param name="form">要展示的窗口。</param>
            <param name="method">指定动画类型。</param>
            <param name="times">指明动画持续的时间（以微秒计），完成一个动画的标准时间为200微秒。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="form"/> 为空 。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">times 超过范围。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.AddFormDragHandle(System.Windows.Forms.Form,System.Windows.Forms.Control)">
            <summary>
            添加窗口内的控件，使其成为窗口拖动事件来源。
            </summary>
            <param name="form">要处理的窗口。</param>
            <param name="control">要成为来源的控件，此后此控件可拥有标题栏的功能: 拖得窗口。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="form"/> 或 <paramref name="control"/> 为空 。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.ClipInReactange(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            限定一个控件只能于指定的位置移动。
            </summary>
            <param name="control">要确定的控件。</param>
            <param name="rect">指定的区域。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> 为空 。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.Slide(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Int32)">
            <summary>
            在指定时间中改变控件大小，位置。
            </summary>
            <param name="control">控件。</param>
            <param name="rect">目标大小位置。</param>
            <param name="times">使用的时间。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> 为空 。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">times 超过范围。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.Flash(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            加亮任务栏。这意味着窗口的标题和说明文字会发生变化，似乎从活动切换到非活动状态、或反向切换。通常对不活动的窗口应用这个函数，引起用户的注意。
            </summary>
            <param name="form">要闪烁显示的窗口。</param>
            <param name="bInvert">表示切换窗口标题；FALSE返回最初状态。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="form"/> 为空 。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.MoveToCenter(System.Windows.Forms.Form)">
            <summary>
            使窗口移到屏幕中。
            </summary>
            <param name="form">要居中的窗口。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="form"/> 为空 。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.SlideX(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            修改控件大小，位置，处理用户的操作。
            </summary>
            <param name="control">控件。</param>
            <param name="rect">目标大小位置。</param>
            <param name="times">每次改变间隔。</param>
            <param name="speed">移动速度。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> 为空 。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">times 超过范围。</exception>
        </member>
        <member name="M:Py.Windows.FormHelper.ToFullScreen(System.Windows.Forms.Form)">
            <summary>
            使窗口全屏显示。
            </summary>
            <param name="form">要显示的对象。</param>
        </member>
        <member name="M:Py.Windows.FormHelper.Shake(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            抖动某个窗口。
            </summary>
            <param name="control">窗口句柄。</param>
            <param name="s">抖动速度。</param>
            <param name="l">抖动范围。</param>
            <param name="t">持续时间。</param>
        </member>
        <member name="M:Py.Windows.FormHelper.SetPromptWhenClosing(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            设置窗口关闭时显示一个提示确认后再允许关闭。
            </summary>
            <param name="form">要设置的窗口。</param>
            <param name="caption">标题。</param>
            <param name="value">提示。</param>
        </member>
        <member name="M:Py.Windows.FormHelper.AttachToSide(System.Windows.Forms.Form,System.Int32@)">
            <summary>
            将窗口依附于边缘。
            </summary>
            <param name="form">要依附的窗体。</param>
            <param name="formHeight">窗体的高度。</param>
        </member>
        <member name="M:Py.Windows.FormHelper.AttachToSide(System.Windows.Forms.Form,System.Int32@,System.Windows.Forms.Timer)">
            <summary>
            将窗口依附于边缘。
            </summary>
            <param name="form">要依附的窗体。</param>
            <param name="formHeight">窗体的高度。</param>
            <param name="timer">定时器控件。</param>
        </member>
        <member name="T:Py.Drawing.CaptchaHandler">
            <summary>
            用于生产验证码的工具。
            </summary>
            <remarks>
            新建Handler.ashx 并复制以下内容，即可实现一个验证码页。
            &lt;%@ WebHandler Language="C#" Class="Py.Drawing.CaptchaHandler" %&gt;
            </remarks>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.#ctor">
            <summary>
            初始化 <see cref="T:Py.Drawing.CaptchaHandler"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.#ctor(System.Web.HttpContext)">
            <summary>
            初始化 <see cref="T:Py.Drawing.CaptchaHandler"/> 的新实例。
            </summary>
            <param name="context">请求。</param>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.ProcessRequest">
            <summary>
            生成验证图片。
            </summary>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            生成验证图片。
            </summary>
            <param name="context">Http请求正文</param>
            <exception cref="T:System.NullReferenceException">未实现 IRequiresSessionState 。 导致无法使用 Session。</exception>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.GetCheckCode(System.Web.HttpContext)">
            <summary>
            获取验证码，并存入 Session 。
            </summary>
            <param name="context">请求。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Drawing.CaptchaHandler.GetImage(System.String)">
            <summary>
            生成验证图片。
            </summary>
            <param name="checkCode">字符串。</param>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.Length">
            <summary>
            获取生成的长度。
            </summary>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.Colors">
            <summary>
            返回可用的内容颜色。
            </summary>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.Fonts">
            <summary>
            返回可用的内容字体。
            </summary>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.ImageFormat">
            <summary>
            获取当前图片的格式。
            </summary>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.SessionName">
            <summary>
            获取字段名。
            </summary>
        </member>
        <member name="P:Py.Drawing.CaptchaHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 <see cref="T:System.Web.IHttpHandler"/> 实例。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Web.IHttpHandler"/> 实例可再次使用，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Py.Logging.WinFormControlLogListener">
            <summary>
            将日志输出到控件。
            </summary>
        </member>
        <member name="F:Py.Logging.WinFormControlLogListener._control">
            <summary>
            当前使用的控件。
            </summary>
        </member>
        <member name="M:Py.Logging.WinFormControlLogListener.#ctor(System.Windows.Forms.Control)">
            <summary>
            初始化 <see cref="T:Py.Logging.WinFormControlLogListener"/> 的新实例。
            </summary>
            <param name="control">The control。</param>
        </member>
        <member name="M:Py.Logging.WinFormControlLogListener.OnLog(System.String)">
            <summary>
            将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.WinFormControlLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="T:Py.Json.JsonValue`1">
            <summary>
            表示Json中的一个常量值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonValue`1._value">
            <summary>
            当前的值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonValue`1.#ctor(`0)">
            <summary>
            初始化 Py.Json.JsonValue&lt;T&gt; 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonValue`1.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.Parse(System.Object)">
            <summary>
            转换一个对象为JsonObject。
            </summary>
            <param name="value">值。</param>
            <returns>IJsonObject。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonArray(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonObject(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonValue(System.Int32)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonArray(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonObject(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.GetJsonValue(System.String)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonValue`1.op_Implicit(Py.Json.JsonValue{`0})~`0">
            <summary>
            实现从 T 到指定类型的隐形转换。
            </summary>
            <param name="i">实例。</param>
            <returns>转换后的结果。</returns>
        </member>
        <member name="P:Py.Json.JsonValue`1.Value">
            <summary>
            获取当前对象的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonValue`1.Json">
            <summary>
            获取当前的Json值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonValue`1.Py#Json#IJsonObject#Value">
            <summary>
            获取当前对象的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonValue`1.Item(System.Int32)">
            <summary>
            获取或设置指定位置的值。
            </summary>
            <returns>IJsonObject。</returns>
        </member>
        <member name="P:Py.Json.JsonValue`1.Item(System.String)">
            <summary>
            获取或设置指定名字的值。
            </summary>
            <returns>IJsonObject。</returns>
        </member>
        <member name="T:Py.Json.JsonString">
            <summary>
            表示Json中的一个字符串。
            </summary>
        </member>
        <member name="M:Py.Json.JsonString.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonString 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonString.#ctor(System.String,System.Char)">
            <summary>
            初始化 Py.Json.JsonString 的新实例。
            </summary>
            <param name="value">值。</param>
            <param name="quote">符。</param>
        </member>
        <member name="P:Py.Json.JsonString.Quote">
            <summary>
            获取或设置当前的字符串的引号。'/"
            </summary>
        </member>
        <member name="P:Py.Json.JsonString.Json">
            <summary>
            获取当前的Json值。
            </summary>
        </member>
        <member name="T:Py.Json.JsonBoolean">
            <summary>
            表示Json中的一个布尔值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonBoolean.#ctor(System.Boolean)">
            <summary>
            初始化 Py.Json.JsonBoolean 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="F:Py.Json.JsonBoolean.True">
            <summary>
            表示true的值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonBoolean.False">
            <summary>
            表示false的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonBoolean.Json">
            <summary>
            获取当前的Json值。
            </summary>
        </member>
        <member name="T:Py.Json.JsonInt">
            <summary>
            表示Json中的一个整数。
            </summary>
        </member>
        <member name="M:Py.Json.JsonInt.#ctor(System.Int32)">
            <summary>
            初始化 Py.Json.JsonInt 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="T:Py.Json.JsonDouble">
            <summary>
            表示Json中的一个整数。
            </summary>
        </member>
        <member name="M:Py.Json.JsonDouble.#ctor(System.Double)">
            <summary>
            初始化 Py.Json.JsonDouble 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="T:Py.Json.JsonValue">
            <summary>
            表示Json中的一个常量值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonValue.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonValue&lt;T&gt; 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="F:Py.Json.JsonValue.Null">
            <summary>
            表示null的值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonValue.Undefined">
            <summary>
            表示一个 undefined的值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonValue.NaN">
            <summary>
            表示一个 undefined的值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonValue.Infinity">
            <summary>
            表示一个 undefined的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonValue.Json">
            <summary>
            获取当前的Json值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.IO.TextBuffer">
            <summary>
            表示可读取连续字符系列的缓存。
            </summary>
            <remarks>
            TextBuffer 是 TextReader 的补充。TextBuffer 本质其实是一个 TextReader 。但 TextBuffer 开放了更多信息，仅适合于高级场所使用。一般的应用应使用 TextReader ，但以下情况适合使用 TextBuffer :
                1. 需要对缓存操作，而不是新建缓存。
                2. 需要改变缓存指针。
                3. 需要读取缓存中一部分内容。
            </remarks>
        </member>
        <member name="F:Py.IO.TextBuffer.Null">
            <summary>
            提供一个无数据可供读取的 TextReader。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.#ctor(System.Char[],System.Int32)">
            <summary>
            初始化 <see cref="T:Py.IO.TextBuffer"/> 类的新实例。
            </summary>
            <param name="buffer">缓存。</param>
            <param name="capacity">容量。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为空。</exception>
        </member>
        <member name="M:Py.IO.TextBuffer.#ctor(System.Int32)">
            <summary>
            初始化 <see cref="T:Py.IO.TextBuffer"/> 类的新实例。
            </summary>
            <param name="capacity">容量。</param>
        </member>
        <member name="M:Py.IO.TextBuffer.#ctor">
            <summary>
            初始化 <see cref="T:Py.IO.TextBuffer"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.Close">
            <summary>
            关闭 <see cref="T:Py.IO.TextBuffer"/> 并释放与该 TextReader 关联的所有系统资源。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.Dispose">
            <summary>
            释放由此 <see cref="T:Py.IO.TextBuffer"/> 对象使用的所有资源。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:Py.IO.TextBuffer"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.IO.TextBuffer.Peek">
            <summary>
            返回下一个可用的字符，但不使用它。
            </summary>
            <returns>
            一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.Read">
            <summary>
            读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <returns>
            输入流中表示为 <see cref="T:System.Int32"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.Read(System.Char@)">
            <summary>
            读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <returns>
            输入流中表示为 <see cref="T:System.Int32"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.ReadBuffer">
            <summary>
            当被子类重写时，实现从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.IO.TextBuffer.ReadToEnd">
            <summary>
            从流的当前位置到末尾读取流。
            </summary>
            <returns>
            字符串形式的流的其余部分（从当前位置到末尾）。如果当前位置位于流的末尾，则返回空字符串 ("")。
            </returns>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。 </exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.ReadAndSkipWhitespace">
            <summary>
            读取输入流中的下一个字符并使该字符的位置提升一个字符。忽略空白字符。（' ' '\t' '\r' '\n'） 。
            </summary>
            <returns>
            输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。默认实现将返回 -1。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:Py.IO.TextBuffer"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.IO.TextBuffer.ReadIf(System.Char[])">
            <summary>
            一直读取输入流中的下一个字符并使该字符的位置提升一个字符到指定字符。
            </summary>
            <param name="values">读取的字符串内容。不包含第一个和最后一个。</param>
            <returns>
            是否找到符合的。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:Py.IO.TextBuffer"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkReadIf(System.Char[])">
            <summary>
            一直读取输入流中的下一个字符并使该字符的位置提升一个字符到指定字符。
            </summary>
            <param name="values">读取的字符串内容。不包含第一个和最后一个。</param>
            <returns>
            是否找到符合的。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:Py.IO.TextBuffer"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="F:Py.IO.TextBuffer._value">
            <summary>
            缓存。
            </summary>
        </member>
        <member name="F:Py.IO.TextBuffer._start">
            <summary>
            开始索引。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.Markup">
            <summary>
            将当前位置标记，将以此位置开始截获字符串。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.Markup(System.Int32,System.String)">
            <summary>
            将当前位置标记，将以此位置开始截获字符串。
            </summary>
            <param name="offset">偏移的地址。</param>
            <param name="value">缓存的值。</param>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkPeek">
            <summary>
            返回下一个可用的字符，但不使用它。
            </summary>
            <returns>
            一个表示下一个要读取的字符的整数；如果没有更多可读取的字符或该流不支持查找，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkReadAndSkipWhitespace">
            <summary>
            读取输入流中的下一个字符并使该字符的位置提升一个字符。忽略空白字符。（' ' '\t' '\r' '\n'） 。
            </summary>
            <returns>
            输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。默认实现将返回 -1。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:Py.IO.TextBuffer"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkReadTo(System.Char)">
            <summary>
            带标记读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <returns>
            输入流中表示为 <see cref="T:System.Int32"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.ReadTo(System.Char)">
            <summary>
            带标记读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <returns>
            输入流中表示为 <see cref="T:System.Int32"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkRead">
            <summary>
            带标记读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <returns>
            输入流中表示为 <see cref="T:System.Int32"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkReadBuffer">
            <summary>
            带标记从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.IO.TextBuffer.MarkRead(System.Char@)">
            <summary>
            带标记读取输入流中的下一个字符并使该字符的位置提升一个字符。
            </summary>
            <param name="c">输入流中表示为 <see cref="T:System.Char"/> 对象的下一个字符。如果不再有可用的字符，则为 -1。。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。 </exception>
        </member>
        <member name="M:Py.IO.TextBuffer.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Py.IO.TextBuffer.Capacity">
            <summary>
            获取当前缓存的大小。
            </summary>
        </member>
        <member name="P:Py.IO.TextBuffer.Position">
            <summary>
            获取或设置当前的位置。
            </summary>
        </member>
        <member name="P:Py.IO.TextBuffer.Buffer">
            <summary>
            获取当前的缓存。
            </summary>
        </member>
        <member name="P:Py.IO.TextBuffer.Value">
            <summary>
            获取当前的缓存。
            </summary>
        </member>
        <member name="P:Py.IO.TextBuffer.Start">
            <summary>
            获取或设置开始位置。
            </summary>
        </member>
        <member name="P:Py.IO.TextBuffer.Current">
            <summary>
            获取或设置当前位置的字符内容。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.NullTextBuffer.#ctor">
            <summary>
            初始化 <see cref="T:Py.IO.TextBuffer.NullTextBuffer"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.IO.TextBuffer.NullTextBuffer.ReadBuffer">
            <summary>
            当被子类重写时，实现从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="T:Py.Html.HtmlNodeType">
            <summary>
             指定节点的类型。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.None">
            <summary>
            如果未调用 Read 方法，则由 Py.Html.HtmlReader 返回。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Element">
            <summary>
            元素（例如，&lt;item&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Attribute">
            <summary>
            属性（例如，id='123'）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Text">
            <summary>
            节点的文本内容。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.CDATA">
            <summary>
            CDATA 节（例如，&lt;![CDATA[my escaped text]]&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.EntityReference">
            <summary>
            实体引用（例如，&amp;num;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Entity">
            <summary>
            实体声明（例如，&lt;!ENTITY...&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.ProcessingInstruction">
            <summary>
            处理指令（例如，&lt;?pi test?&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Comment">
            <summary>
            注释（例如，&lt;!-- my comment --&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Document">
            <summary>
            作为文档树的根的文档对象提供对整个 XML 文档的访问。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.DocumentType">
            <summary>
            由以下标记指示的文档类型声明（例如，&lt;!DOCTYPE...&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.DocumentFragment">
            <summary>
            文档片段。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Notation">
            <summary>
            文档类型声明中的表示法（例如，&lt;!NOTATION...&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.Whitespace">
            <summary>
            标记间的空白。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.SignificantWhitespace">
            <summary>
            混合内容模型中标记间的空白或 xml:space="preserve" 范围内的空白。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.EndElement">
            <summary>
            末尾元素标记（例如，&lt;/item&gt;）。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.EndEntity">
            <summary>
            由于调用 System.Xml.XmlReader.ResolveEntity() 而使 XmlReader 到达实体替换的末尾时返回。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeType.XmlDeclaration">
            <summary>
            XML 声明（例如，&lt;?xml version='1.0'?&gt;）。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlException">
            <summary>
            返回有关最后一个异常的详细信息。
            </summary>
        </member>
        <member name="T:Py.Core.SyntaxException">
            <summary>
            语法错误产生的异常。继承此类实现更完整的异常（如包含位置，所操作的操作符）。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxException._type">
            <summary>
            表示错误类型。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxException._line">
            <summary>
            发生错误的行。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxException._linePosition">
            <summary>
            发生错误的列。
            </summary>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor">
            <summary>
            初始化 Py.Core.SyntaxException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(Py.Core.SyntaxErrorType)">
            <summary>
            初始化 Py.Core.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(System.String,Py.Core.SyntaxErrorType)">
            <summary>
            初始化 Py.Core.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(System.String,Py.Core.SyntaxErrorType,System.Int32,System.Int32)">
            <summary>
            初始化 Py.Core.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
            <param name="line">发生错误的行。</param>
            <param name="column">发生错误的列。</param>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(System.String,Py.Core.SyntaxErrorType,System.Exception,System.Int32,System.Int32)">
            <summary>
            初始化 Py.Core.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
            <param name="line">发生错误的行。</param>
            <param name="column">发生错误的列。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Core.SyntaxException"/> 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Core.SyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 和 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 对象中的信息初始化 <see cref="T:Py.Core.SyntaxException"/> 类的新实例。
            </summary>
            <param name="info">SerializationInfo 对象，包含 <see cref="T:Py.Core.SyntaxException"/> 的所有属性。
            </param>
            <param name="context">StreamingContext 对象，包含上下文信息。
            </param>
        </member>
        <member name="M:Py.Core.SyntaxException.ToString">
            <summary>
            创建并返回当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Py.Core.SyntaxException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对于给定的 <see cref="T:System.Runtime.Serialization.StreamingContext" />，将所有的 HtmlException 属性流式写入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类。
            </summary>
            <param name="info">SerializationInfo 对象。
            </param>
            <param name="context">StreamingContext 对象。
            </param>
        </member>
        <member name="P:Py.Core.SyntaxException.Type">
            <summary>
            获取错误类型。
            </summary>
        </member>
        <member name="P:Py.Core.SyntaxException.LineNumber">
            <summary>
            获取指示错误发生位置的行号。
            </summary>
            <returns>
            指示错误发生位置的行号。
            </returns>
        </member>
        <member name="P:Py.Core.SyntaxException.LinePosition">
            <summary>
            获取指示错误发生位置的行位置。
            </summary>
            <returns>
            指示错误发生位置的行位置。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor">
            <summary>
            初始化 HtmlException 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.String)">
            <summary>
            用指定的错误信息初始化 HtmlException 类的一个新实例。
            </summary>
            <param name="message">错误说明。</param>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象中的信息初始化 HtmlException 类的新实例。
            </summary>
            <param name="info">SerializationInfo 对象，包含 HtmlException 的所有属性。
            </param>
            <param name="context">StreamingContext 对象，包含上下文信息。
            </param>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 HtmlException 类的新实例。
            </summary>
            <param name="message">错误条件的说明。</param>
            <param name="innerException">引发 HtmlException 的 <see cref="T:System.Exception"/>（如果有的话）。此值可为 null。</param>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
            <summary>
            用指定的消息、内部异常、行号和行位置初始化 HtmlException 类的新实例。
            </summary>
            <param name="message">错误说明。</param>
            <param name="innerException">导致当前异常的异常。此值可为 null。</param>
            <param name="lineNumber">指示错误发生位置的行号。</param>
            <param name="linePosition">指示错误发生位置的行位置。</param>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.String,Py.Core.SyntaxErrorType,System.Int32,System.Int32)">
            <summary>
            用指定的消息、行号和行位置初始化 HtmlException 类的新实例。
            </summary>
            <param name="message">错误说明。</param>
            <param name="errorType">错误类型。</param>
            <param name="lineNumber">指示错误发生位置的行号。</param>
            <param name="linePosition">指示错误发生位置的行位置。</param>
        </member>
        <member name="M:Py.Html.HtmlException.#ctor(System.String,Py.Core.SyntaxErrorType,System.Exception,System.Int32,System.Int32)">
            <summary>
            用指定的消息、内部异常、行号和行位置初始化 HtmlException 类的新实例。
            </summary>
            <param name="errorType">错误类型。</param>
            <param name="message">错误说明。</param>
            <param name="innerException">导致当前异常的异常。此值可为 null。</param>
            <param name="lineNumber">指示错误发生位置的行号。</param>
            <param name="linePosition">指示错误发生位置的行位置。</param>
        </member>
        <member name="T:Py.Net.FtpWebException">
            <summary>
            操作一个 FTP 出错时引发的异常。
            </summary>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor">
            <summary>
            初始化 Py.Net.FtpWebException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.Net.FtpStatusCode)">
            <summary>
            初始化 Py.Net.FtpWebException 的新实例。
            </summary>
            <param name="status">当前状态代码。</param>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.String,System.Net.FtpStatusCode)">
            <summary>
            初始化 Py.Net.FtpWebException 的新实例。
            </summary>
            <param name="status">当前状态代码。</param>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.Net.FtpStatusCode,System.Exception)">
            <summary>
            初始化 Py.Net.FtpWebException 的新实例。
            </summary>
            <param name="status">当前状态代码。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.String,System.Net.FtpStatusCode,System.Exception)">
            <summary>
            初始化 Py.Net.FtpWebException 的新实例。
            </summary>
            <param name="status">当前状态代码。</param>
            <param name="message">信息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Net.FtpWebException"/> 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Net.FtpWebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 和 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 对象中的信息初始化 <see cref="T:Py.Net.FtpWebException"/> 类的新实例。
            </summary>
            <param name="info">SerializationInfo 对象，包含 <see cref="T:Py.Net.FtpWebException"/> 的所有属性。
            </param>
            <param name="context">StreamingContext 对象，包含上下文信息。
            </param>
        </member>
        <member name="M:Py.Net.FtpWebException.ToString">
            <summary>
            创建并返回当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Py.Net.FtpWebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对于给定的 <see cref="T:System.Runtime.Serialization.StreamingContext" />，将所有的 HtmlException 属性流式写入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类。
            </summary>
            <param name="info">SerializationInfo 对象。
            </param>
            <param name="context">StreamingContext 对象。
            </param>
        </member>
        <member name="P:Py.Net.FtpWebException.Status">
            <summary>
            获取返回的状态代码。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlSelectElement">
            <summary>
            表示一个 select 标签。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlSelectElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlInputElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.SelectOption">
            <summary>
            获取当前选择的选项。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.SelectOptions">
            <summary>
            获取当前选择的选项集合。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.Multiple">
            <summary>
            获取或设置选择卡是否多选。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.Options">
            <summary>
            获取所有的选项。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.Form">
            <summary>
            获取当前元素所在的表单。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlSelectElement.Py#Html#IHtmlInput#Type">
            <summary>
            获取节点的类型。
            </summary>
        </member>
        <member name="T:Py.Algorithm.Numerics.BigInteger">
            <summary>
            表示任意大的带符号整数。
            </summary>
            <remarks>
            见 <see href="http://msdn.microsoft.com/zh-cn/library/system.numerics.biginteger.aspx"/> 。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.IsPowerOfTwo(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            指示当前 BigInteger 对象的值是否是 2 的幂。
            </summary>
            <value>如果 BigInteger 对象的值是 2 的幂，则为 true；否则为 false。</value>
            <remarks>
            此属性确定 BigInteger 值是否具有一个非零位集。这意味着如果当前 BigInteger 对象的值为 1（即 20）或 2 的任意较大幂，则它返回 true。如果当前 BigInteger 对象的值为 0，则返回 false。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.IsZero(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            指示当前 BigInteger 对象的值是否是 BigInteger.Zero。
            </summary>
            <value>BigInteger 对象的值是 BigInteger.Zero，则为 true；否则为 false。</value>
            <remarks>
            此属性提供的性能明显优于 BigInteger.Equals(BigInteger.Zero)。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.IsOne(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            指示当前 BigInteger 对象的值是否是 BigInteger.One。
            </summary>
            <value>如果 BigInteger 对象的值是 BigInteger.One，则为 true；否则为 false。</value>
            <remarks>
            此属性提供的性能明显优于其他比较方法，例如 thisBigInteger.Equals(BigInteger.One)。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.IsEven(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            指示当前 BigInteger 对象的值是否是偶数。
            </summary>
            <value>如果 BigInteger 对象的值是偶数，则为 true；否则为 false。</value>
            <remarks>
            此属性是一个便利功能，指示 BigInteger 值是否能被 2 整除。它等效于以下表达式：[c#]value % 2 == 0;
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Equals(System.Object)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="obj">要比较的另一个对象。</param>
            <returns>
            如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
            <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Equals(System.Int64)">
            <summary>
            返回一个值，该值指示当前实例与 64 位带符号整数是否具有相同的值。
            </summary>
            <param name="other">要比较的 64 位带符号整数值。</param>
            <returns>如果 64 位带符号整数与当前实例具有相同的值，则为 true；否则为 false。</returns>
            <remarks>
            如果 other 是 Byte、Int16、Int32、SByte、UInt16 或 UInt32 值，则在调用方法时，它将被隐式转换为 Int64 值。若要确定两个对象之间的关系，而不是测试其相等性，请调用 BigInteger.CompareTo(Int64) 方法。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Equals(System.UInt64)">
            <summary>
            将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。
            </summary>
            <param name="other">要比较的 64 位无符号整数。</param>
            <returns>一个带符号整数，指示此实例和 other 的相对值。返回值小于零说明当前实例小于 other。返回值零说明当前实例等于 other。返回值大于零说明当前实例大于 other。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Equals(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回一个值，该值指示当前实例与指定的 BigInteger 对象是否具有相同的值。
            </summary>
            <param name="other">要比较的对象。</param>
            <returns>如果此 BigInteger 对象与 other 具有相同的值，则为 true；否则为 false。</returns>
            <remarks>
            此方法实现 IEquatable&lt;T&gt; 接口，并且执行效果略好于 Equals(Object)，这是因为它不必将 other 参数转换为 BigInteger 对象。若要确定两个 BigInteger 对象之间的关系，而不是测试其相等性，请调用 BigInteger.CompareTo(BigInteger) 方法。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.CompareTo(System.Int32)">
            <summary>
            将此实例与另一个 BigInteger 进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。
            </summary>
            <param>要比较的对象。</param>
            <returns>一个带符号整数值，指示此实例与 other 的关系，如下表所示。返回值小于零说明当前实例小于 other。返回值零说明当前实例等于 other。返回值大于零说明当前实例大于 other。</returns>
            <remarks>
            CompareTo 方法的此重载将实现 IComparable.CompareTo 方法。它被泛型集合对象使用以整理集合中的项。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.CompareTo(System.Int64)">
            <summary>
            将此实例与 64 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位带符号整数的值。
            </summary>
            <param name="other">要比较的 64 位带符号整数。返回值</param>
            <returns>
            一个带符号整数值，指示此实例与 other 的关系。返回值小于零说明当前实例小于 other。返回值零说明当前实例等于 other。返回值大于零说明当前实例大于 other。
            </returns>
            <remarks>
            如果 other 是 Byte、Int16、Int32、SByte、UInt16 或 UInt32 值，则在调用 CompareTo(Int64) 方法时，它将被隐式转换为 Int64 值。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.CompareTo(System.UInt64)">
            <summary>
            将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。
            </summary>
            <param name="other">要比较的 64 位无符号整数。</param>
            <returns>一个带符号整数，指示此实例和 other 的相对值。返回值小于零说明当前实例小于 other。返回值零说明当前实例等于 other。返回值大于零说明当前实例大于 other。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.CompareTo(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            将此实例与另一个 BigInteger 进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。
            </summary>
            <param name="other">System.Numerics.BigInteger要比较的对象。</param>
            <returns>一个带符号整数值，指示此实例与 other 的关系。返回值小于零说明当前实例小于 other。 返回值零说明当前实例等于 other。返回值大于零说明当前实例大于 other。
            </returns>
            <remarks>
            CompareTo 方法的此重载将实现 IComparable&lt;T&gt;.CompareTo 方法。它被泛型集合对象使用以整理集合中的项。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.CompareTo(System.Object)">
            <summary>
            将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。
            </summary>
            <param name="obj">要比较的对象。</param>
            <returns>一个带符号整数，指示当前实例与 obj 参数的关系，如下表所示。返回值小于零说明当前实例小于 obj。返回值零说明当前实例等于 obj。 返回值大于零说明当前实例大于 obj，或者 obj 参数为 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> 不是 BigInteger。</exception>
            <remarks>CompareTo 方法的此重载将实现 IComparable.CompareTo 方法。它被非泛型集合对象使用以整理集合中的项。obj 参数必须是以下之一：运行时类型为 BigInteger 的对象。值为 null 的 Object 变量。如果 obj 参数的值是 null，则该方法返回 1，这说明当前实例大于 obj。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ToByteArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ToString">
            <summary>
            将当前 BigInteger 对象的数值转换为其等效的字符串表示形式。
            </summary>
            <returns>
            包含完全限定类型名的 <see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ToString(System.IFormatProvider)">
            <summary>
            使用指定的区域性特定格式设置信息将当前 BigInteger 对象的数值转换为它的等效字符串表示形式。
            </summary>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>当前 BigInteger 值的字符串表示形式，该值使用 provider 参数指定的格式。</returns>
            <value>
            返回的字符串使用通用格式说明符 ("G") 进行格式设置。ToString(IFormatProvider) 方法支持 50 位十进制数字的精度。也就是说，如果 BigInteger 值中的数字位数超过 50，则只有 50 个最高有效位保留在输出字符串中；所有其他数字都被替换为零。provider 参数是 IFormatProvider 实现。其 GetFormat 方法返回一个 NumberFormatInfo 对象，该对象提供有关此方法返回的字符串格式的区域性特定信息。如果 provider 为 null，则使用当前区域性的 NumberFormatInfo 对象对 BigInteger 值进行格式设置。控制使用一般格式说明符的 BigInteger 值的字符串表示形式的 NumberFormatInfo 对象的唯一属性是 NumberFormatInfo.NegativeSign，它定义表示负号的字符。provider 参数可以是以下项之一：提供格式设置信息的 NumberFormatInfo 对象。一个实现 IFormatProvider 的自定义对象。其 GetFormat 方法返回提供格式设置信息的 NumberFormatInfo 对象。
            </value>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ToString(System.String)">
            <summary>
            使用指定的格式将当前 BigInteger 对象的数值转换为它的等效字符串表示形式。
            </summary>
            <param name="format">标准或自定义的数值格式字符串。</param>
            <returns>
            类型：System.String当前 BigInteger 值的字符串表示形式，该值使用 format 参数指定的格式。
            </returns>
            <exception>异常,FormatException format。条件，format 不是有效的格式字符串。</exception>          
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
            <summary>
            使用指定的格式和区域性特定格式信息将当前 BigInteger 对象的数值转换为它的等效字符串表示形式。
            </summary>
            <param name="format">标准或自定义的数值格式字符串。</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>由 format 和 provider 参数指定的当前 BigInteger 值的字符串表示形式。</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/> 不是有效的格式字符串。</exception>
            <remarks>
            format 参数可以是任何有效标准数值格式说明符，或者是自定义数值格式说明符的任何组合。如果 format 等于 String.Empty 或者为 null，则当前 BigInteger 对象的返回值用通用数值格式说明符（"G"）进行格式设置。如果 format 是任何其他值，则该方法将引发 FormatException。在大多数的情况下，ToString 方法支持 50 位十进制数字的精度。也就是说，如果 BigInteger 值中的数字位数超过 50，则只有 50 个最高有效位保留在输出字符串中；所有其他数字都被替换为零。然而，BigInteger 支持“R”标准格式说明符，用于往返的数值。使用 "R" 格式字符串的 ToString(String) 方法返回的字符串保留整个 BigInteger 值，然后可以使用 Parse 或 TryParse 方法解析以恢复原始值而不会有任何数据损失。.NET Framework 提供了广泛的格式设置支持，下面的格式设置主题中对此有更详细的描述：有关数值格式说明符的更多信息，请参见标准数字格式字符串和自定义数字格式字符串。有关对 .NET Framework 中的格式设置支持的更多信息，请参见格式化类型。provider 参数是 IFormatProvider 实现。其 GetFormat 方法返回一个 NumberFormatInfo 对象，该对象提供有关此方法返回的字符串格式的区域性特定信息。在调用 ToString(String, IFormatProvider) 方法时，它会调用 provider 参数的 GetFormat 方法，并向其传递一个表示 NumberFormatInfo 类型的 Type 对象。该 GetFormat 方法然后返回 NumberFormatInfo 对象，该对象提供用于设置 value 参数的格式的信息，例如负号、组分隔符或小数点符号。有三种使用 provider 参数向 ToString(String, IFormatProvider) 方法提供格式设置信息的方式：您可以传递一个 CultureInfo 对象，表示提供格式设置信息的区域性。其 GetFormat 方法返回 NumberFormatInfo 对象，该对象提供针对该区域性的数值格式设置信息。可以传递提供数值格式设置信息的实际 NumberFormatInfo 对象。（其 GetFormat 实现仅返回它自身。）可以传递一个实现 IFormatProvider 的自定义对象。其 GetFormat 方法实例化并返回提供格式设置信息的 NumberFormatInfo 对象。如果 provider 为 null，则返回的字符串的格式设置基于当前区域性的 NumberFormatInfo 对象。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Int32)">
            <summary>
            使用 32 位带符号整数值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value"> 32位带符号整数。</param>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.UInt32)">
            <summary>
            使用 32 位无符号整数值初始化 BigInteger 结构的新实例。此 API 不兼容 CLS。 兼容 CLS 的替代 API 为 BigInteger(Int64)。
            </summary>
            <param name="value">32无符号整数值。</param>
            <remarks>
            使用此构造函数实例化 BigInteger 时没有精度损失。调用此构造函数所产生的 BigInteger 值与将 UInt32 值赋值给 BigInteger 的结果相同。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Int64)">
            <summary>
            使用 64 位带符号整数值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value">64位带符号整数。</param>
            <remarks>
            使用此构造函数实例化 BigInteger 对象时没有精度损失。调用此构造函数所产生的 BigInteger 值与将 Int64 值赋值给 BigInteger 的结果相同。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.UInt64)">
            <summary>
            使用 64 位无符号整数值初始化 BigInteger 结构的新实例。此 API 不兼容 CLS。 兼容 CLS 的替代 API 为 BigInteger(Double)。
            </summary>
            <param name="value">64 位无符号整数。</param>
            <remarks>
            使用此构造函数实例化 BigInteger 时没有精度损失。调用此构造函数所产生的 BigInteger 值与将 UInt64 值赋值给 BigInteger 的结果相同。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Single)">
            <summary>
            使用单精度浮点值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value">单精度浮点值。</param>
            <exception cref="T:System.OverflowException"> <paramref name="value"/>  的值为 Single.NaN。- 或 -<paramref name="value"/> 的值为 Single.NegativeInfinity。- 或 -<paramref name="value"/> 的值为 Single.PositiveInfinity。</exception>
            <remarks>
            value 参数的小数部分在实例化 BigInteger 对象时被截断。因为缺少 Single 数据类型的精度，调用此构造函数可能导致数据丢失。调用此构造函数所产生的 BigInteger 值与将 Single 值显式赋值给 BigInteger 的结果相同。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Double)">
            <summary>
            使用双精度浮点值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value">一个双精度浮点值。</param>
            <exception cref="T:System.OverflowException"><paramref name="value"/> 的值为 Double.NaN。- 或 -<paramref name="value"/> 的值为 Double.NegativeInfinity。- 或 -<paramref name="value"/> 的值为 Double.PositiveInfinity。</exception>
            <remarks>
            参数的小数部分在实例化 BigInteger 对象时被截断。因为缺少 Double 数据类型的精度，调用此构造函数可能导致数据丢失。调用此构造函数所产生的 BigInteger 值与将 Double 值显式赋值给 BigInteger 的结果相同。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Decimal)">
            <summary>
            使用 Decimal 值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value">一个小数。</param>
            <remarks>
            调用此构造函数的结果与将 Decimal 值显式赋给 BigInteger 变量相同。调用此构造函数可能导致数据丢失；实例化 BigInteger 对象时，将截断 value 的所有小数部分。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.#ctor(System.Byte[])">
            <summary>
            使用字节数组中的值初始化 BigInteger 结构的新实例。
            </summary>
            <param name="value">顺序为 little-endian 的字节值的数组。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> 为 null。</exception>
            <remarks>
            value 数组中的各个字节应该为 little-endian 顺序，从最低序位字节到最高序位字节。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Parse(System.String)">
            <summary>
            将数字的字符串表示形式转换为它的等效 BigInteger 表示形式。
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <returns>一个值，等于 value 参数中指定的数字。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> 为空。</exception>
            <exception cref="T:System.FormatException"><paramref name="value"/> 的格式不正确。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Compare(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            比较两个 BigInteger 值，并返回一个整数，该整数指示第一个值是小于、等于还是大于第二个值。
            </summary>
            <param name="left">要比较的第一个值。</param>
            <param name="right">要比较的第二个值。</param>
            <returns>一个带符号整数，指示 left 与 right 的相对值，如下表所示。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Abs(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            获取 BigInteger 对象的绝对值。 
            </summary>
            <param name="value">数字。</param>
            <returns>value 的绝对值。</returns>
            <remarks>
            数字的绝对值是该数字去掉其符号后的数字，如下表所示。
            </remarks>
            <example>
            下面的示例使用 Abs 方法将 BigInteger 值从 2 的补码表示形式转换为符号数值表示形式，然后再将其序列化到文件。 对文件中的数据进行反序列化，并将其分配给新 BigInteger 对象。 
            </example>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Add(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            将两个 BigInteger 值相加，并返回结果。
            </summary>
            <param name="left">要相加的第一个值。</param>
            <param name="right">要相加的第二个值。</param>
            <returns>left 与 right 的和。</returns>
            <remarks>
            不支持运算符重载或自定义运算符的语言可以使用 Add 方法执行使用 BigInteger 值的加法。
            在通过赋值加法的和的方法来实例化 BigInteger 变量时，Add 方法是加法运算符一个有用替代，这将在下面的示例中介绍。
            <example>
            <code lang="C#">
            // The statement:
            //    BigInteger number = Int64.MaxValue + Int32.MaxValue;
            // produces compiler error CS0220: The operation overflows at compile time in checked mode.
            // The alternative:
            BigInteger number = BigInteger.Add(Int64.MaxValue, Int32.MaxValue);
            </code>
            <code lang="VB.net">
            ' The statement
            '    Dim number As BigInteger = Int64.MaxValue + Int32.MaxValue
            ' produces compiler error BC30439: Constant expression not representable in type 'Long'.
            ' The alternative:
            Dim number As BigInteger = BigInteger.Add(Int64.MaxValue, Int32.MaxValue)
            
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Subtract(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            从另一个值中减去一个 BigInteger 值并返回结果。
            </summary>
            <param name="left">要从中减去的值（被减数）。</param>
            <param name="right">要减去的值（减数）。</param>
            <returns>right 减 left 所得的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Multiply(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回两个 BigInteger 值的乘积。
            </summary>
            <param name="left">要相乘的第一个数字。</param>
            <param name="right">要相乘的第二个数字。</param>
            <returns>left 与 right 参数的乘积。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Divide(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            用另一个值除 BigInteger 值并返回结果。
            </summary>
            <param name="dividend">要作为被除数的值。</param>
            <param name="divisor">要作为除数的值。</param>
            <returns>相除后的商。</returns>
            <exception cref="T:System.DivideByZeroException">divisor为 0 （零）。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Remainder(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            对两个 BigInteger 值执行整除并返回余数。
            </summary>
            <param name="dividend">要作为被除数的值。</param>
            <param name="divisor">要作为除数的值。</param>
            <returns>将 dividend 除以 divisor 后所得的余数。</returns>
            <exception cref="T:System.DivideByZeroException">divisor为 0 （零）。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.DivRem(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger@)">
            <summary>
            用另一个值除一个 BigInteger 值，返回结果，并在输出参数中返回余数。
            </summary>
            <param name="dividend">要作为被除数的值。</param>
            <param name="divisor">要作为除数的值。</param>
            <param name="remainder">当此方法返回时，包含一个表示相除余数的 BigInteger 值。该参数未经初始化即被传递。</param>
            <returns>相除后的商。</returns>
            <exception cref="T:System.DivideByZeroException">divisor为 0 （零）。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Negate(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            对指定的 BigInteger 值求反。
            </summary>
            <param name="value">要求反的值。</param>
            <returns>value 参数乘以负一 (-1) 的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Log(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回指定数字的自然对数（底为 e）。
            </summary>
            <param name="value">要查找其对数的数字。</param>
            <returns>value 的自然对数（底为 e），如“备注”部分中的表所示。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 的对数超出了 Double 数据类型的范围。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Log(Py.Algorithm.Numerics.BigInteger,System.Double)">
            <summary>
            返回指定数字在使用指定底时的对数。
            </summary>
            <param name="value">要查找其对数的数字。</param>
            <param name="baseValue">对数的底。</param>
            <returns>value 的以 baseValue 为底的对数，如“备注”部分中的表所示。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 的对数超出了 Double 数据类型的范围。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Log10(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回指定数字的自然对数（底为 10）。
            </summary>
            <param name="value">要查找其对数的数字。</param>
            <returns>value 的自然对数（底为 10），如“备注”部分中的表所示。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">value 的对数超出了 Double 数据类型的范围。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.GreatestCommonDivisor(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            查找两个 BigInteger 值的最大公约数
            </summary>
            <param name="left">第一个值。</param>
            <param name="right">第二个值。</param>
            <returns>left 和 right 的最大公约数。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Max(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回两个 BigInteger 值中的较大者。
            </summary>
            <param name="left">要比较的第一个值。</param>
            <param name="right">要比较的第二个值。</param>
            <returns>left 或 right 参数中较大的一个。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Min(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            返回两个 BigInteger 值中的较小者。
            </summary>
            <param name="left">要比较的第一个值。</param>
            <param name="right">要比较的第二个值。</param>
            <returns>left 或 right 参数中较小的一个。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.ModPow(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            对以某个数为底、以另一个数为指数的幂执行模数除法。
            </summary>
            <param name="value">要计算 exponent 次幂的数字。</param>
            <param name="exponent">对 value 进行幂运算的指数。</param>
            <param name="modulus">将 value指数除以的值。</param>
            <returns>将 value指数除以 modulus 后的余数。</returns>
            <exception cref="T:System.DivideByZeroException">modulus 是零。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">exponent 为负数。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.Pow(Py.Algorithm.Numerics.BigInteger,System.Int32)">
            <summary>
            求以 BigInteger 值为底、以指定的值为指数的幂。
            </summary>
            <param name="value">要计算 exponent 次幂的数字</param>
            <param name="exponent">value 的 exponent 次幂的计算结果。</param>
            <returns>value 的 exponent 次幂的计算结果。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">exponent 参数的值为负。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.Byte)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Byte"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.SByte)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.SByte"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.Int16)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Int16"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.UInt16)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.UInt16"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.Int32)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Int32"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.UInt32)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.UInt32"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.Int64)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Int64"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.UInt64)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.UInt64"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(System.Single)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Single"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(System.Double)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Double"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(System.Decimal)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.Decimal"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Implicit(System.String)~Py.Algorithm.Numerics.BigInteger">
            <summary>
            实现从 <see cref="T:System.String"/> 到 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Byte">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Byte"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.SByte">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.SByte"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Int16">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Int16"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.UInt16">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.UInt16"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Int32">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Int32"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
            <exception cref="T:System.OverflowException">值太大或者太小。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.UInt32">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.UInt32"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
            <exception cref="T:System.OverflowException">值太大或者太小。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Int64">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Int64"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
            <exception cref="T:System.OverflowException">值太大或者太小。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.UInt64">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.UInt64"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
            <exception cref="T:System.OverflowException">值太大或者太小。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Single">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Single"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Double">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Double"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.Decimal">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.Decimal"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
            <exception cref="T:System.OverflowException">值太大或者太小。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Explicit(Py.Algorithm.Numerics.BigInteger)~System.String">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:System.String"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_BitwiseAnd(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &amp; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_BitwiseOr(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 | 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_ExclusiveOr(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 ^ 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LeftShift(Py.Algorithm.Numerics.BigInteger,System.Int32)">
            <summary>
            实现操作 &lt;&lt; 。
            </summary>
            <param name="value">值。</param>
            <param name="shift">The shift。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_RightShift(Py.Algorithm.Numerics.BigInteger,System.Int32)">
            <summary>
            实现操作 &gt;&gt; 。
            </summary>
            <param name="value">值。</param>
            <param name="shift">The shift。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_OnesComplement(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 ~ 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_UnaryNegation(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 - 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_UnaryPlus(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 + 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Increment(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 ++ 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Decrement(Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 -- 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Addition(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 + 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Subtraction(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 - 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Multiply(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 * 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Division(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 / 。
            </summary>
            <param name="dividend">结束位置。</param>
            <param name="divisor">The divisor。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Modulus(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 % 。
            </summary>
            <param name="dividend">结束位置。</param>
            <param name="divisor">The divisor。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThan(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThanOrEqual(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThan(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThanOrEqual(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Equality(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Inequality(Py.Algorithm.Numerics.BigInteger,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThan(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 &lt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThanOrEqual(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 &lt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThan(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 &gt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThanOrEqual(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 &gt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Equality(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Inequality(Py.Algorithm.Numerics.BigInteger,System.Int64)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThan(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThan(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Equality(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Inequality(System.Int64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThan(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 &lt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThanOrEqual(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 &lt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThan(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 &gt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThanOrEqual(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 &gt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Equality(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Inequality(Py.Algorithm.Numerics.BigInteger,System.UInt64)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThan(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &lt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThan(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt; 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 &gt;= 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Equality(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.BigInteger.op_Inequality(System.UInt64,Py.Algorithm.Numerics.BigInteger)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="P:Py.Algorithm.Numerics.BigInteger.Zero">
            <summary>
            获取一个表示数字 0（零）的值。
            </summary>
            <value>其值为 0（零）的整数。</value>
            <remarks>
            由此属性返回的 BigInteger 对象提供一个方便的零值源，供在赋值和比较中使用。
            </remarks>
        </member>
        <member name="P:Py.Algorithm.Numerics.BigInteger.One">
            <summary>
            获取一个表示数字一 (1) 的值。
            </summary>
            <value>其值为一 (1) 的对象。</value>
            <remarks>
            One 属性通常用于将 BigInteger 值与 1 比较以及将 1 赋值给 BigInteger 对象。
            </remarks>
        </member>
        <member name="P:Py.Algorithm.Numerics.BigInteger.MinusOne">
            <summary>
            获取一个表示数字负一 (-1) 的值。
            </summary>
            <value>其值为负一 (-1) 的整数。</value>
            <remarks>
            MinusOne 属性用于将 BigInteger 值与 -1 比较以及将 -1 赋值给 BigInteger 对象
            </remarks>
        </member>
        <member name="P:Py.Algorithm.Numerics.BigInteger.Sign">
            <summary>
            获取一个数字，该数字指示当前 BigInteger 对象的符号（负、正或零）。
            </summary>
            <value>一个指示 BigInteger 对象的符号的数字，如下表所示。</value>
            <remarks>
            Sign 属性与用于基元数值类型的 Math.Sign 方法等效。
            </remarks>
        </member>
        <member name="T:Py.Zip.ZipFileEntry">
            <summary>
            表示在 Zip 文件的一个 zip单元。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFileEntry.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipFileEntry"/> 的新实例。
            </summary>
            <param name="file">所有者。</param>
        </member>
        <member name="M:Py.Zip.ZipFileEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
            设置并返回输入流和长度。
            </summary>
            <param name="input">输入的流。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.ZipFileEntry.Write(System.IO.Stream)">
            <summary>
            将当前单元写入流。
            </summary>
            <param name="s">要写的流。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> 为空。</exception>
        </member>
        <member name="P:Py.Zip.ZipFileEntry.Password">
            <summary>
            设置单元密码。
            </summary>
            <value></value>
            <seealso cref="P:Py.Zip.ZipEntry.Encryption"/>
            <seealso cref="P:Py.Zip.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="T:Py.Zip.OpenDelegate">
            <summary>
            打开流的委托。
            </summary>
            <param name="entryName">单元名。</param>
            <returns>已打开的流。</returns>
        </member>
        <member name="T:Py.Zip.EntryDelegate">
            <summary>
            处理一个单元流的委托。
            </summary>
            <param name="entryName">单元名。</param>
            <param name="stream">写入的流。</param>
        </member>
        <member name="T:Py.Zip.ProgressChangedEventArgs">
            <summary>
            Zip文件的处理进度改变的事件参数。
            </summary>
        </member>
        <member name="T:Py.Core.CancelableEventArgs">
            <summary>
            可取消的事件的参数。
            </summary>
        </member>
        <member name="P:Py.Core.CancelableEventArgs.Cancel">
            <summary>
            获取或设置一个值,该值指示是否撤销事件。
            </summary>
        </member>
        <member name="M:Py.Zip.ProgressChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化 Py.Zip.ProgressChangedEventArgs 的新实例。
            </summary>
        </member>
        <member name="P:Py.Zip.ProgressChangedEventArgs.Target">
            <summary>
            获取或设置发生事件的目标。保存文件时为保存的文件名。解压时为解压到的文件夹。
            </summary>
        </member>
        <member name="P:Py.Zip.ProgressChangedEventArgs.Entry">
            <summary>
            获取发生事件的单元。
            </summary>
        </member>
        <member name="P:Py.Zip.ProgressChangedEventArgs.EntryCount">
            <summary>
            获取全部文件单元的数量或字节数。
            </summary>
        </member>
        <member name="P:Py.Zip.ProgressChangedEventArgs.CurrentIndex">
            <summary>
            获取操作的索引或已传输的字节数。
            </summary>
        </member>
        <member name="P:Py.Zip.ProgressChangedEventArgs.Percent">
            <summary>
            获取当前操作的百分比。
            </summary>
        </member>
        <member name="T:Py.Zip.StartProgressChangedEventArgs">
            <summary>
            开始处理的事件参数。
            </summary>
        </member>
        <member name="M:Py.Zip.StartProgressChangedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Zip.StartProgressChangedEventArgs"/> 的新实例。
            </summary>
            <param name="path">要操作的字符串。</param>
            <param name="entriesTotal">全部的单元。</param>
        </member>
        <member name="T:Py.Zip.CompleteProgressChangedEventArgs">
            <summary>
            完成工作的事件参数。
            </summary>
        </member>
        <member name="M:Py.Zip.CompleteProgressChangedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Zip.CompleteProgressChangedEventArgs"/> 的新实例。
            </summary>
            <param name="path">要操作的字符串。</param>
            <param name="entriesTotal">全部的单元。</param>
        </member>
        <member name="P:Py.Zip.CompleteProgressChangedEventArgs.Cancel">
            <summary>
            获取或设置一个值,该值指示是否撤销事件。
            </summary>
        </member>
        <member name="T:Py.Zip.EntryProcessingEventArgs">
            <summary>
            表示已处理一个单元的参数。
            </summary>
        </member>
        <member name="M:Py.Zip.EntryProcessingEventArgs.#ctor(Py.Zip.ZippedEntry,System.Int32,System.Int32)">
            <summary>
            初始化 Py.Zip.AddEntryEventArgs 的新实例。
            </summary>
            <param name="zipEntry">单元。</param>
            <param name="entriesTotal">处理的单元。</param>
            <param name="currentIndex">当前的单元。</param>
        </member>
        <member name="T:Py.Zip.BlockWritenEventArgs">
            <summary>
            块处理后的事件参数。
            </summary>
        </member>
        <member name="M:Py.Zip.BlockWritenEventArgs.#ctor(Py.Zip.ZippedEntry,System.Int64,System.Int64)">
            <summary>
            初始化 <see cref="T:Py.Zip.BlockWritenEventArgs"/> 的新实例。
            </summary>
            <param name="zipEntry">当前单元。</param>
            <param name="bytesTotol">总传输的单元。</param>
            <param name="bytesWriten">已写入的单元。</param>
        </member>
        <member name="P:Py.Zip.BlockWritenEventArgs.EntryCount">
            <summary>
            获取当前单元总数。
            </summary>
        </member>
        <member name="P:Py.Zip.BlockWritenEventArgs.CurrentIndex">
            <summary>
            获取当前已处理的块的个数。
            </summary>
        </member>
        <member name="P:Py.Zip.BlockWritenEventArgs.BytesTotal">
            <summary>
            获取全部字节数。
            </summary>
        </member>
        <member name="P:Py.Zip.BlockWritenEventArgs.BytesWriten">
            <summary>
            获取已处理的字节数。
            </summary>
        </member>
        <member name="P:Py.Zip.BlockWritenEventArgs.Percent">
            <summary>
            获取处理的百分比。
            </summary>
        </member>
        <member name="T:Py.Zip.EntryEventArgs">
            <summary>
            与单元有关的事件参数。
            </summary>
        </member>
        <member name="M:Py.Zip.EntryEventArgs.#ctor(Py.Zip.ZippedEntry)">
            <summary>
            初始化 <see cref="T:Py.Zip.EntryEventArgs"/> 的新实例。
            </summary>
            <param name="entry">发生的单元。</param>
        </member>
        <member name="P:Py.Zip.EntryEventArgs.Entry">
            <summary>
            获取当前发生事件的单元。
            </summary>
        </member>
        <member name="T:Py.Zip.EntryExistedEventArgs">
            <summary>
            表示处理存在的单元参数。
            </summary>
        </member>
        <member name="M:Py.Zip.EntryExistedEventArgs.#ctor(Py.Zip.ZippedEntry,System.String)">
            <summary>
            初始化 Py.Zip.EntryExistedEventArgs 的新实例。
            </summary>
            <param name="entry">文件。</param>
            <param name="target">目标。</param>
        </member>
        <member name="M:Py.Zip.EntryExistedEventArgs.#ctor(Py.Zip.ZippedEntry,System.String,Py.Core.OverwriteType)">
            <summary>
            初始化 Py.Zip.EntryExistedEventArgs 的新实例。
            </summary>
            <param name="entry">文件。</param>
            <param name="target">目标。</param>
            <param name="overwrite">覆盖方式。</param>
        </member>
        <member name="P:Py.Zip.EntryExistedEventArgs.Result">
            <summary>
            获取或设置处理的结果。该值指示将这个文件保存到指定的位置。
            </summary>  
        </member>
        <member name="P:Py.Zip.EntryExistedEventArgs.Target">
            <summary>
            获取当前解压的目标。
            </summary>
        </member>
        <member name="T:Py.Zip.ErrorEventArgs">
            <summary>
            产生错误的事件参数。
            </summary>
        </member>
        <member name="M:Py.Zip.ErrorEventArgs.#ctor(Py.Zip.ZippedEntry,System.Exception)">
            <summary>
            初始化 <see cref="T:Py.Zip.ErrorEventArgs"/> 的新实例。
            </summary>
            <param name="entry">单元。</param>
            <param name="e">发生错误的异常。</param>
        </member>
        <member name="P:Py.Zip.ErrorEventArgs.Result">
            <summary>
            获取或设置错误的处理。
            </summary>
        </member>
        <member name="P:Py.Zip.ErrorEventArgs.Error">
            <summary>
            获取产生错误的原因。
            </summary>
        </member>
        <member name="P:Py.Zip.ErrorEventArgs.ErrorMessage">
            <summary>
            获取发生的错误描述。
            </summary>
        </member>
        <member name="T:Py.Windows.MemoryInfo">
            <summary>
            获取当前计算机的内存信息。
            </summary>
        </member>
        <member name="M:Py.Windows.MemoryInfo.Update">
            <summary>
            更新数据缓存。
            </summary>
        </member>
        <member name="M:Py.Windows.MemoryInfo.#ctor">
            <summary>
            初始化 <see cref="T:Py.Windows.MemoryInfo"/> 的新实例。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.TotalPhys">
            <summary>
            获取当前的总内存。单位 M 。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.UsedPercent">
            <summary>
            获取内存使用率。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.Length">
            <summary>
            返回当前内存的大小。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.AvailPhys">
            <summary>
            获取当前的可用内存。单位 M 。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.TotalPageFile">
            <summary>
            获取全部的虚拟缓存的文件空间。单位 M 。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.AvailPageFile">
            <summary>
            获取可用的虚拟缓存的文件空间。 单位 M 。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.TotalVirtual">
            <summary>
            获取总的虚拟内存。单位 M 。
            </summary>
        </member>
        <member name="P:Py.Windows.MemoryInfo.AvailVirtual">
            <summary>
            获取可用的虚拟内存。
            </summary>
        </member>
        <member name="T:Py.IO.StreamHelper">
            <summary>
            流操作的工具。
            </summary>
        </member>
        <member name="M:Py.IO.StreamHelper.ReadInt(System.IO.Stream)">
            <summary>
            读取一个整数。
            </summary>
            <param name="s">流。</param>
            <exception cref="T:System.IO.EndOfStreamException">无数据。</exception>
            <returns>整数。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.DetectEncoding(System.IO.Stream)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="s">缓存。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.DetectEncoding(System.Byte[])">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="buffer">缓存。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.DetectEncoding(System.IO.Stream,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="s">缓存。</param>
            <param name="numBom">输出的标志头大小。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.DetectEncoding(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="buffer">缓存。</param>
            <param name="len">缓存大小。</param>
            <param name="numBom">输出的标志头大小。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.InitStream(System.IO.Stream)">
            <summary>
            初始化一个流，同时返回编码。
            </summary>
            <param name="s">流。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="buffer">缓存数组。</param>
            <returns>如果是 utf8 返回true。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.Write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            将一个 Int32 整数写入到一个字节数组。
            </summary>
            <param name="value">数据。</param>
            <param name="buffer">缓存。</param>
            <param name="offset">位置。</param>
        </member>
        <member name="M:Py.IO.StreamHelper.Write(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            读取流，写入到另一个流。
            </summary>
            <param name="source">源。</param>
            <param name="index">位置。</param>
            <param name="dest">目标。</param>
            <param name="destIndex">目标位置。</param>
            <param name="count">数目。</param>
            <param name="dftBufferSize">缓存大小。</param>
        </member>
        <member name="M:Py.IO.StreamHelper.Write(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            读取流，写入到另一个流。
            </summary>
            <param name="source">源。</param>
            <param name="dest">目标。</param>
            <param name="dftBufferSize">缓存大小。</param>
        </member>
        <member name="M:Py.IO.StreamHelper.GetStream(System.String)">
            <summary>
            根据地址返回流。
            </summary>
            <param name="uri">地址。</param>
            <returns>流。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.GetPeekStream(System.String)">
            <summary>
            根据地址返回可设置流。
            </summary>
            <param name="uri">地址。</param>
            <returns>流。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.GetStream(System.Uri)">
            <summary>
            根据地址返回流。
            </summary>
            <param name="uri">地址。</param>
            <returns>流。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.GetStream(System.Uri,System.String,System.Int32)">
            <summary>
            下载指定地址的文件，并返回打开的文件流。
            </summary>
            <param name="uri">地址。</param>
            <param name="folder">缓存文件夹。</param>
            <param name="dftBufferSize">读取缓存。</param>
            <returns>流。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.ToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读取一个流所有数据。并返回相关字符串内容。
            </summary>
            <param name="s">流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.ToString(System.IO.Stream)">
            <summary>
            读取一个流所有数据。并返回相关字符串内容。
            </summary>
            <param name="s">流。 </param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:Py.IO.StreamHelper.WriteFrom(System.IO.Stream,System.String,System.Int32)">
            <summary>
            读取一个文件，并写入流。
            </summary>
            <param name="dest">目标流。</param>
            <param name="source">来源文件。</param>
            <param name="dftBufferSize">缓存的大小。</param>
        </member>
        <member name="T:Py.Json.ReadState">
            <summary>
            指定读取器的状态。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Initial">
            <summary>
            未调用 Read 方法。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Key">
            <summary>
            读取一个键。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Value">
            <summary>
            读取一个值。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.ObjectStart">
            <summary>
            读取一个对象。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.ObjectEnd">
            <summary>
            读取一个对象。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Comment">
            <summary>
            读取一个注释。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.ArrayStart">
            <summary>
            正在完成读取数组。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.ArrayEnd">
            <summary>
            正在完成读取数组。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Closed">
            <summary>
             已调用 Close() 方法。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.Error">
            <summary>
            出现错误，阻止读取操作继续进行。
            </summary>
        </member>
        <member name="F:Py.Json.ReadState.EndOfFile">
            <summary>
            已成功到达文件结尾。
            </summary>
        </member>
        <member name="T:Py.Json.JsonReaderSettings">
            <summary>
            指定在 Overload:Py.Json.JsonTextReader.Create 方法创建的 Py.Json.JsonReader 对象上支持的一组功能。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReaderSettings.#ctor">
            <summary>
            初始化 Py.Json.JsonReaderSettings 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReaderSettings.Reset">
            <summary>
            将设置类的成员重置为各自的默认值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReaderSettings.Clone">
            <summary>
             创建 Py.Json.JsonReaderSettings 实例的副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Py.Json.JsonReaderSettings.Encoding">
            <summary>
            获取或设置使用的编码。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReaderSettings.IgnoreComments">
            <summary>
            获取或设置一个值，该值指示是否忽略注释。默认为false。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReaderSettings.IgnoreWhitespace">
            <summary>
            获取或设置一个值，该值指示是否忽略无关紧要的空白。默认为true。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReaderSettings.LineNumberOffset">
            <summary>
            获取或设置 Py.Json.JsonTextReader 对象的行号偏移量。默认 0 。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReaderSettings.LinePositionOffset">
            <summary>
            获取或设置 Py.Json.JsonTextReader 对象的行位置偏移量。默认 0 。
            </summary>
        </member>
        <member name="T:Py.Json.JsonReader">
            <summary>
            表示提供对 Json 数据进行快速、非缓存、只进访问的读取器。
            </summary>
        </member>
        <member name="F:Py.Json.JsonReader._quoteChar">
            <summary>
            当前引号的字符。
            </summary>
        </member>
        <member name="F:Py.Json.JsonReader._settings">
            <summary>
            表示当前读取的状态。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReader.Read">
            <summary>
            当在派生类中被重写时，从流中读取下一个节点。
            </summary>
            <returns>如果成功读取了下一个节点，则为 true；如果没有其他节点可读取，则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonReader.ReadAsBytes">
            <summary>
            当在派生类中被重写时，从流中读取指定字节。 
            </summary>
            <returns>一个字节数组。</returns>
        </member>
        <member name="M:Py.Json.JsonReader.Skip">
            <summary>
            跳过当前节点的子级。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReader.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            释放当前实例占用的资源。
            </summary>
            <param name="disposing">为 <c>true</c> 则释放所有资源; <c>false</c> 则只释放托管资源。</param>
        </member>
        <member name="M:Py.Json.JsonReader.Close">
            <summary>
            当在派生类中被重写时，将 Py.Json.JsonReader.ReadState 更改为 Closed。
            </summary>
        </member>
        <member name="M:Py.Json.JsonReader.MoveToArray">
            <summary>
            移动到一个数组。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonReader.MoveToObject">
            <summary>
            移动到一个对象。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonReader.MoveToValue">
            <summary>
            移动到一个值。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.IO.Stream)">
            <summary>
            使用指定的流和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="input">包含 Json 数据的流。Py.Json.JsonReader 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">input 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.Uri)">
            <summary>
            使用指定的 URI 和 Py.Json.JsonReaderSettings 创建一个新的实例。
            </summary>
            <param name="inputUri"> 包含 Json 数据的文件的 URI。</param>
            <returns>用于读取 XML 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">inputUri 值为 null。</exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到由该 URI 指定的文件。</exception>
            <exception cref="T:System.UriFormatException">URI 格式不正确。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.IO.TextReader)">
            <summary>
            使用指定的流和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="input">要从中读取 Json 数据的 System.IO.TextReader。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">input 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.IO.Stream,Py.Json.JsonReaderSettings)">
            <summary>
            使用指定的流和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="input">包含 Json 数据的流。Py.Json.JsonReader 对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。</param>
            <param name="settings">用于配置新的 Py.Json.JsonReader 实例的 Py.Json.JsonReaderSettings 对象。该值可为 null。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">input 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.Uri,Py.Json.JsonReaderSettings)">
            <summary>
            使用指定的 URI 和 Py.Json.JsonReaderSettings 创建一个新的实例。
            </summary>
            <param name="inputUri"> 包含 Json 数据的文件的 URI。</param>
            <param name="settings">用于配置新的 Py.Json.JsonReader 实例的 Py.Json.JsonReaderSettings 对象。该值可为 null。</param>
            <returns>用于读取 XML 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">inputUri 值为 null。</exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到由该 URI 指定的文件。</exception>
            <exception cref="T:System.UriFormatException">URI 格式不正确。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.IO.TextReader,Py.Json.JsonReaderSettings)">
            <summary>
            使用指定的流和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="input">要从中读取 Json 数据的 System.IO.TextReader。</param>
            <param name="settings">用于配置新的 Py.Json.JsonReader 的 Py.Json.JsonReaderSettings 对象。该值可为 null。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">input 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(Py.Json.JsonReader,Py.Json.JsonReaderSettings)">
            <summary>
            使用指定的 Py.Json.JsonReader 和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="reader">要用作基础读取器的 Py.Json.JsonReader 对象。</param>
            <param name="settings">Py.Json.JsonReaderSettings 对象用于配置新的 Py.Json.JsonReader 实例。Py.Json.JsonReaderSettings 对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 Py.Json.ConformanceLevel.Auto。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">reader 值为 null。</exception>
            <exception cref="T:System.InvalidOperationException">Py.Json.JsonReaderSettings 对象指定的一致性级别与基础读取器的一致性级别不一致。- 或 -基础 Py.Json.JsonReader 处于 Py.Json.ReadState.Error 或 Py.Json.ReadState.Closed 状态。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.String)">
            <summary>
            使用指定的 Py.Json.JsonReader 和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="value">要用作基础读取器的 Py.Json.JsonReader 对象。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">value 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonReader.Create(System.String,Py.Json.JsonReaderSettings)">
            <summary>
            使用指定的 Py.Json.JsonReader 和 Py.Json.JsonReaderSettings 对象创建一个新的 Py.Json.JsonReader 实例。
            </summary>
            <param name="value">要用作基础读取器的 Py.Json.JsonReader 对象。</param>
            <param name="settings">Py.Json.JsonReaderSettings 对象用于配置新的 Py.Json.JsonReader 实例。Py.Json.JsonReaderSettings 对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 Py.Json.ConformanceLevel.Auto。</param>
            <returns>用于读取 Json 数据的 Py.Json.JsonReader 对象。</returns>
            <exception cref="T:System.ArgumentNullException">value 值为 null。</exception>
        </member>
        <member name="P:Py.Json.JsonReader.ReadState">
            <summary>
            获得当前读取的状态。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReader.Settings">
            <summary>
            获取用于创建此 Py.Json.JsonTextReader 实例的 Py.Json.JsonTextReaderSettings 对象。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReader.QuoteChar">
            <summary>
            当在派生类中被重写时，获取用于括住字符的引号字符。
            </summary>
            <value>用于括住属性节点值的引号字符（" 或 '）。</value>
        </member>
        <member name="P:Py.Json.JsonReader.Value">
            <summary>
            获取当前节点的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReader.Depth">
            <summary>
            当在派生类中被重写时，获取 Json 文档中当前节点的深度。
            </summary>
        </member>
        <member name="P:Py.Json.JsonReader.EOF">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
            </summary>
        </member>
        <member name="T:Py.Json.JsonTextReader">
            <summary>
            表示提供对 Json 数据进行快速、非缓存、只进访问的读取器。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._reader">
            <summary>
            当前使用的读取器。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._lastChar">
            <summary>
            表示最后一个字符。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._currentLinePosition">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._currentLineNumber">
            <summary>
            当前行号。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._depth">
            <summary>
            当前的深度。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._readStates">
            <summary>
            读取状态。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._value">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextReader._currentState">
            <summary>
            当前正解释的状态。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextReader.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonTextReader 的新实例。
            </summary>
            <param name="input">读取者。 </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            初始化 Py.Json.JsonTextReader 的新实例。
            </summary>
            <param name="input">读取者。 </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Json.JsonTextReader.#ctor(System.Uri)">
            <summary>
            初始化 Py.Json.JsonTextReader 的新实例。
            </summary>
            <param name="uri">地址。</param>
        </member>
        <member name="M:Py.Json.JsonTextReader.#ctor(System.IO.Stream)">
            <summary>
            初始化 Py.Json.JsonTextReader 的新实例。
            </summary>
            <param name="input">流。</param>
        </member>
        <member name="M:Py.Json.JsonTextReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            初始化 Py.Json.JsonTextReader 的新实例。
            </summary>
            <param name="input">流。</param>
            <param name="e">编码。</param>
        </member>
        <member name="M:Py.Json.JsonTextReader.MoveNext">
            <summary>
            移动至下个字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.Peek">
            <summary>
            预读下个字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.Read">
            <summary>
            从流中读取下一个节点。
            </summary>
            <returns>
            如果成功读取了下一个节点，则为 true；如果没有其他节点可读取，则为 false。
            </returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.ParseWhitespace(System.Char)">
            <summary>
            处理空白字符。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextReader.ReadAsBytes">
            <summary>
            当在派生类中被重写时，从流中读取指定字节。
            </summary>
            <returns>一个字节数组。</returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.ParseLiteral(System.Char)">
            <summary>
            转换一个普通变量或数字。
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.ParseComment">
            <summary>
            处理注释。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextReader.ParseString(System.Char)">
            <summary>
            转换字符串。
            </summary>
            <param name="quote">当前引号。</param>
        </member>
        <member name="M:Py.Json.JsonTextReader.Close">
            <summary>
            当在派生类中被重写时，将 Py.Json.JsonReader.ReadState 更改为 Closed。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextReader.Dispose(System.Boolean)">
            <summary>
            释放当前实例占用的资源。
            </summary>
            <param name="disposing">为 <c>true</c> 则释放所有资源; <c>false</c> 则只释放托管资源。</param>
        </member>
        <member name="M:Py.Json.JsonTextReader.MoveTo(Py.Json.ReadState)">
            <summary>
            移到一个状态。
            </summary>
            <param name="s">一个状态。</param>
            <returns>是否能继续移动。</returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.MoveToArray">
            <summary>
            移动到一个数组。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.MoveToObject">
            <summary>
            移动到一个对象。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Json.JsonTextReader.MoveToValue">
            <summary>
            移动到一个值。
            </summary>
            <returns>如果找到了属性，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Json.JsonTextReader.Settings">
            <summary>
            获取用于创建此 Py.Json.JsonTextReader 实例的 Py.Json.JsonTextReaderSettings 对象。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.EOF">
            <summary>
            获取一个值，该值指示此读取器是否定位在流的结尾。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.LineNumber">
            <summary>
            获取当前行号。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.LinePosition">
            <summary>
            获取当前列。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.ReadState">
            <summary>
            获得当前读取的状态。
            </summary>
            <value></value>
        </member>
        <member name="P:Py.Json.JsonTextReader.Value">
            <summary>
            获取当前节点的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.Depth">
            <summary>
            当在派生类中被重写时，获取 Json 文档中当前节点的深度。
            </summary>
            <value></value>
        </member>
        <member name="P:Py.Json.JsonTextReader.IgnoreComments">
            <summary>
            获取或设置一个值，该值指示是否忽略注释。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextReader.IgnoreWhitespace">
            <summary>
            获取或设置一个值，该值指示是否忽略无关紧要的空白。默认为true。
            </summary>
        </member>
        <member name="T:Py.Core.OverwriteType">
            <summary>
            指示文件或文件夹覆盖形式。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Default">
            <summary>
            默认。对于文件则抛出异常，对文件夹忽略。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Replace">
            <summary>
            覆盖已经存在的文件，合并存在的文件夹。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Skip">
            <summary>
            忽略，保留当前文件和文件夹。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Rename">
            <summary>
            重命名要复制的文件和文件夹。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Throw">
            <summary>
            抛出异常， 引发一个 System.IO.FileExistsException 的异常。
            </summary>
        </member>
        <member name="F:Py.Core.OverwriteType.Ignore">
            <summary>
            忽视文件或文件夹的存在，继续操作。一般表示文件覆盖方式由程序提供。
            </summary>
        </member>
        <member name="T:Py.Html.EmptyEnumerator">
            <summary>
            空迭代。
            </summary>
        </member>
        <member name="T:Py.Windows.Binder">
            <summary>
            提供绑定的工具。
            </summary>
        </member>
        <member name="M:Py.Windows.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeNode,System.Converter{Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeNode})">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeViewNode">控件。</param>
            <param name="converter">将树节点转换为控件节点的委托。</param>
        </member>
        <member name="M:Py.Windows.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeView,System.Converter{Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeNode})">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeView">控件。</param>
            <param name="converter">将树节点转换为控件节点的委托。</param>
        </member>
        <member name="M:Py.Windows.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeNode)">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeViewNode">控件。</param>
        </member>
        <member name="M:Py.Windows.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Windows.Forms.TreeView)">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeView">控件。</param>
        </member>
        <member name="M:Py.Windows.Binder.Bind(System.Windows.Forms.ComboBox,System.Collections.IEnumerable)">
            <summary>
            将一个可枚举对象绑定到控件。
            </summary>
            <param name="cb">控件。</param>
            <param name="value">值。</param>
        </member>
        <member name="T:Py.Zip.InflateBlocks">
            <summary>
            表示 Inflate 块。不可继承此类。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.BUFFER">
            <summary>
            默认树的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._border">
            <summary>
            用来表示解压的数据表。
            </summary>
            <remarks>
            来自 PKZIP 的 appnote.txt 。
            </remarks>
        </member>
        <member name="F:Py.Zip.InflateBlocks._mode">
            <summary>
            当前的模式。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._left">
            <summary>
            需要读取的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._table">
            <summary>
            表的长度。 （14）
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._index">
            <summary>
            索引。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._blens">
            <summary>
            代码长度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._bb">
            <summary>
            树高度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._tb">
            <summary>
            解码树的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._codes">
            <summary>
            当前解压的代码。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._last">
            <summary>
            指示这个块是否为最后一个。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.Codec">
            <summary>
            解码器。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.Bitk">
            <summary>
            字节缓存中的字缓存长度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.Bitb">
            <summary>
            字节缓存大小。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._hufts">
            <summary>
            树节点。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.Window">
            <summary>
            移动的窗口。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.End">
            <summary>
            移动窗口长度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.ReadAt">
            <summary>
            窗口的读取位置。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.WriteAt">
            <summary>
            窗口的写入位置。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._checkfn">
            <summary>
            是否检查内容。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._check">
            <summary>
            检查输出。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks._inftree">
            <summary>
            解压树。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateBlocks.#ctor(Py.Zip.Zlib.ZlibCodec,System.Boolean,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Zip.InflateBlocks"/> 的新实例。
            </summary>
            <param name="codec">解码器。</param>
            <param name="checkfn">是否检查。</param>
            <param name="w">窗口的大小。</param>
        </member>
        <member name="M:Py.Zip.InflateBlocks.Reset">
            <summary>
            重新设置变量。
            </summary>
            <returns>检验码。</returns>
        </member>
        <member name="M:Py.Zip.InflateBlocks.Process(Py.Zip.Zlib.ZlibState@)">
            <summary>
            处理块。
            </summary>
            <param name="r">返回状态。</param>
            <returns>返回处理状态。</returns>
        </member>
        <member name="M:Py.Zip.InflateBlocks.Dispose">
            <summary>
            清除空间。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateBlocks.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            设置字典。
            </summary>
            <param name="d">字节数组。</param>
            <param name="start">开始的位置。</param>
            <param name="count">长度。</param>
        </member>
        <member name="M:Py.Zip.InflateBlocks.SyncPoint">
            <summary>
            指示位置是否在尾部。
            </summary>
            <returns>如果尾部，则返回 true 。</returns>
        </member>
        <member name="M:Py.Zip.InflateBlocks.Flush(Py.Zip.Zlib.ZlibState@)">
            <summary>
            输出当前内容。
            </summary>
            <param name="r">返回结果。</param>
            <returns>结果。</returns>
        </member>
        <member name="T:Py.Zip.InflateBlocks.InflateBlockMode">
            <summary>
            表示块类型。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Lens">
            <summary>
            已存储长度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Stored">
            <summary>
            处理存储的块。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Table">
            <summary>
            表长。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Btree">
            <summary>
            树长。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Dtree">
            <summary>
            树节点距离。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Codes">
            <summary>
            动态或固定块。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Dry">
            <summary>
            保留输出。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Done">
            <summary>
            完成。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateBlocks.InflateBlockMode.Bad">
            <summary>
            出现错误。
            </summary>
        </member>
        <member name="T:Py.Zip.InflateCodes">
            <summary>
            代表 Inflate 代码。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateCodes.InflateMask">
            <summary>
            压缩遮罩表。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateCodes.Init(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            初始化。
            </summary>
            <param name="bl"></param>
            <param name="bd"></param>
            <param name="tl"></param>
            <param name="tl_index"></param>
            <param name="td"></param>
            <param name="td_index"></param>
        </member>
        <member name="M:Py.Zip.InflateCodes.Process(Py.Zip.InflateBlocks,Py.Zip.Zlib.ZlibState@)">
            <summary>
            处理。
            </summary>
            <param name="blocks">一个块。</param>
            <param name="r">状态。</param>
            <returns></returns>
        </member>
        <member name="T:Py.Zip.InflateManager">
            <summary>
            用于操作 Inflate 的类。不可继承此类。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.PRESET_DICT">
            <summary>
            预设字典标记头长度。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.Z_DEFLATED">
            <summary>
            压缩比特。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._mode">
            <summary>
            模式枚举。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._codec">
            <summary>
            使用当前管理者的解码器。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._method">
            <summary>
            如果模式为 InflateManagerMode.Member 有效。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._computedCheck">
            <summary>
            计算返回的检验码。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._expectedCheck">
            <summary>
            期待的检验码。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._marker">
            <summary>
            标记。如果模式为 InflateManagerMode.Bad 有效。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._handleRfc1950HeaderBytes">
            <summary>
            指示是否含 Rfc1950 头字节。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._wbits">
            <summary>
            宽字节。8 - 15  。默认 15 。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager._blocks">
            <summary>
            当前块。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateManager.#ctor">
            <summary>
            初始化 <see cref="T:Py.Zip.InflateManager"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateManager.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Zip.InflateManager"/> 的新实例。
            </summary>
            <param name="expectRfc1950HeaderBytes">如果 true ，则保留Rfc1950头 。</param>
        </member>
        <member name="M:Py.Zip.InflateManager.Reset">
            <summary>
            重置当前管理者的状态。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateManager.End">
            <summary>
            结束压缩操作。
            </summary>
            <returns>结果。</returns>
        </member>
        <member name="M:Py.Zip.InflateManager.Initialize(Py.Zip.Zlib.ZlibCodec,System.Int32)">
            <summary>
            初始化。
            </summary>
            <param name="codec">解码器。</param>
            <param name="w">长度。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:Py.Zip.InflateManager.Inflate(Py.Zip.Zlib.FlushType)">
            <summary>
            压缩。
            </summary>
            <param name="flush">类型。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:Py.Zip.InflateManager.SetDictionary(System.Byte[])">
            <summary>
            设置字典内容。
            </summary>
            <param name="dictionary">字节字典。</param>
            <returns>表示成功码。</returns>
        </member>
        <member name="F:Py.Zip.InflateManager.mark">
            <summary>
            标记数组。
            </summary>
        </member>
        <member name="M:Py.Zip.InflateManager.Sync">
            <summary>
            执行异步。
            </summary>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.InflateManager.SyncPoint(Py.Zip.Zlib.ZlibCodec)">
            <summary>
            异步编码。
            </summary>
            <param name="z">解码器。</param>
            <returns>如果 inflate是块尾，返回trye。</returns>
            <remarks>
            Z_SYNC_FLUSH 或 Z_FULL_FLUSH用于指向块尾。 这个函数由 PPP 实现并提供安全的 检验。 PPP 使用 Z_SYNC_FLUSH 但会在解压时移除空块 , PPP 检查输入数据, inflate 等待帧长度计算然后继续。
            </remarks>
        </member>
        <member name="T:Py.Zip.InflateManager.InflateManagerMode">
            <summary>
            表示一个模式枚举。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Member">
            <summary>
            等待函数。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Flag">
            <summary>
            等待标记。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Dict4">
            <summary>
            字典4个检验。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Dict3">
            <summary>
            字典3个检验。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Dict2">
            <summary>
            字典2个检验。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Dict1">
            <summary>
            字典1个检验。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Dict0">
            <summary>
            等待 inflatesetDictionary
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Blocks">
            <summary>
            块。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Check4">
            <summary>
            检查4。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Check3">
            <summary>
            检查3。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Check2">
            <summary>
            检查2。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Check1">
            <summary>
            检查1。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Done">
            <summary>
            完成。
            </summary>
        </member>
        <member name="F:Py.Zip.InflateManager.InflateManagerMode.Bad">
            <summary>
            错误。
            </summary>
        </member>
        <member name="T:Py.Algorithm.Searcher">
            <summary>
            包含对集合的搜索算法。
            </summary>
            <remarks>
            <list type="bullet">
                <listheader>此类提供的查找包括:</listheader>
                <item>线性搜索</item>
                <item>二分搜索</item>
                <item>优先搜索(深搜、广搜)</item>
            </list>
            </remarks>
            <example>
            以下示例演示了如何使用 Searcher 类实现二分查找数组中的一个元素 。
            <code>
            using Py.Algorithm;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    string[] array = new string[]{"a", "b", "c"};
                    int p = Searcher.BinarySearch(array, "b");
                    Logger.Write("元素的位置为:  {0}", p);
                }
                
            }
            </code>
            </example>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IEnumerable{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">查找的索引。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">查找的索引。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">搜索的个数。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">查找的数目。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">The comp。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.TryFindFirstOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <param name="value">用来返回找到的项。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的队列一一对应相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="dests">The dests。</param>
            <param name="comp">The comp。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dests"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstNotOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            查找第一个和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindFirstNotOf``1(System.Collections.Generic.IEnumerable{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IEnumerable{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.TryFindLastOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0@)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <param name="value">用来返回找到的项。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">The index。</param>
            <param name="value">用来返回找到的项。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>  为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">查找的位置。</param>
            <param name="value">用来返回找到的项。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">查找的位置。</param>
            <param name="count">个数。</param>
            <param name="value">用来返回找到的项。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="index">The index。</param>
            <param name="count">个数。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindLastOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.TryFindLastOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <param name="value">用来返回找到的项。</param>
            <returns>如果在整个集合中找到匹配项，则返回 true；否则返回 false 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            查找从左边开始第指定个数和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从左边开始第指定个数和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthNotOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            查找从左边开始第指定个数和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthNotOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从左边开始第指定个数和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从右边开始第指定个数和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找从右边开始第指定个数和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从右边开始第指定个数和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">The NTH。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastNotOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从右边开始第指定个数和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastNotOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找从右边开始第指定个数和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindNthLastNotOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,Py.Core.EqualityComparison{``0})">
            <summary>
            查找从右边开始第指定个数和指定的对象不相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="nth">要查找的位置。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            返回满足条件的所有项的迭代器。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>用于迭代结果的新的集合。</returns>
        </member>
        <member name="M:Py.Algorithm.Searcher.AdjacentSearch``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,Py.Core.EqualityComparison{``0})">
            <summary>
            搜索连续相同的值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="count">连续次数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>返回第一个项的位置。如果找不到返回 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.AdjacentSearch``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Py.Core.EqualityComparison{``0})">
            <summary>
            搜索连续相同的值。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="count">连续次数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>返回第一个项的位置。如果找不到返回 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="start">开始查找的位置。</param>
            <param name="end">结束位置。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0，否则返回相差的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="value">要查找的值。</param>
            <param name="start">开始查找的位置。</param>
            <param name="end">结束位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0，否则返回相差的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,Py.Core.Func{``0,System.Int32})">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的集合。</param>
            <param name="start">开始查找的位置。</param>
            <param name="end">结束位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0，否则返回相差的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.Algorithm.Searcher.DepthFirstSearch``1(``0,Py.Core.Func{``0,System.Collections.Generic.IList{``0}},System.Action{``0})">
            <summary>
            执行 深度优先搜索 (DFS)。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的树根。</param>
            <param name="children">用于根据当前节点返回字节点的委托。</param>
            <param name="doAction">用于对每个节点进行一操作的委托。</param>
        </member>
        <member name="M:Py.Algorithm.Searcher.DepthFirstSearch``1(``0,Py.Core.Func{``0,System.Collections.Generic.IList{``0}},System.Action{``0},System.Collections.Generic.List{``0})">
            <summary>
            内部执行 深度优先搜索 (DFS)。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的树根。</param>
            <param name="children">用于根据当前节点返回字节点的委托。</param>
            <param name="doAction">用于对每个节点进行一操作的委托。</param>
            <param name="hash">已经访问过的记录缓存。</param>
        </member>
        <member name="M:Py.Algorithm.Searcher.BreadthFirstSearch``1(``0,Py.Core.Func{``0,System.Collections.Generic.IList{``0}},System.Action{``0})">
            <summary>
            执行 广度优先搜索 (BFS)。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的树根。</param>
            <param name="children">用于根据当前节点返回字节点的委托。</param>
            <param name="doAction">用于对每个节点进行一操作的委托。</param>
        </member>
        <member name="T:Py.Core.Rand">
            <summary>
            生成一个随机数/字符串的工具。
            </summary>
        </member>
        <member name="F:Py.Core.Rand._Letters">
            <summary>
            所有字母。
            </summary>
        </member>
        <member name="F:Py.Core.Rand._UserName">
            <summary>
            获取用户名中合法的字符。
            </summary>
        </member>
        <member name="F:Py.Core.Rand._FileName">
            <summary>
            获取文件名的合法字符串。
            </summary>
        </member>
        <member name="F:Py.Core.Rand._Password">
            <summary>
            密码中合法的字符串。
            </summary>
        </member>
        <member name="F:Py.Core.Rand._random">
            <summary>
            当前的随机数生成器。
            </summary>
        </member>
        <member name="M:Py.Core.Rand.Int">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <returns>一个非负整数。</returns>
        </member>
        <member name="M:Py.Core.Rand.Int(System.Int32)">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <param name="maxValue">最大值。</param>
            <returns>一个非负整数。</returns>
        </member>
        <member name="M:Py.Core.Rand.Int(System.Int32,System.Int32)">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。</param>
            <returns>一个正整数或零。</returns>
            <remarks>如果最小值不大于最大值，将返回最小值。</remarks>
        </member>
        <member name="M:Py.Core.Rand.Interger">
            <summary>
            返回一个整数。
            </summary>
            <returns>一个整数。</returns>
        </member>
        <member name="M:Py.Core.Rand.IntArray">
            <summary>
            返回随机的整形数组。(101个内)
            </summary>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Core.Rand.IntArray(System.Int32,System.Int32)">
            <summary>
            返回随机的整形数组。
            </summary>
            <param name="min">最小大小。</param>
            <param name="max">最大大小。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Core.Rand.IntArray(System.Int32)">
            <summary>
            返回随机的整形数组。
            </summary>
            <param name="n">个数。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Core.Rand.StringArray">
            <summary>
            返回随机的整形数组。(9个内)
            </summary>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Core.Rand.StringArray(System.Int32,System.Int32)">
            <summary>
            返回随机的字符串数组。
            </summary>
            <param name="min">最小大小。</param>
            <param name="max">最大大小。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Core.Rand.StringArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回随机的字符串数组。
            </summary>
            <param name="n">个数。</param>
            <param name="minLength">字符串最小长度。</param>
            <param name="maxLength">字符串长度最大值。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minLength"/> 大于 <paramref name="maxLength"/>。</exception>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32)">
            <summary>
            生成随机的由字母与数字与下划线组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <returns>返回随机字符串。</returns>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32,System.Int32)">
            <summary>
            生成随机的由字母与数字与下划线组成的随机字符串。
            </summary>
            <param name="minLength">生成的最小长度。</param>
            <param name="maxLength">生成的最多长度。</param>
            <returns>返回随机字符串。</returns>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32,System.Char[])">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="pattern">首字母可用的字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32,System.String)">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="pattern">使用这个字符串里出现过的单元作为字符集。</param>
            <returns>返回随机字符串。</returns>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32,System.Char[],System.Char[])">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="firstPattern">首字母可用的字符集。</param>
            <param name="pattern">后面字母可用字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 或 <paramref name="firstPattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Core.Rand.String(System.Int32,System.String,System.String)">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="firstPattern">首字母可用的字符集。</param>
            <param name="pattern">后面字母可用字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 或 <paramref name="firstPattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Core.Rand.DateTime(System.DateTime,System.DateTime)">
            <summary>
            生成一个不超过指定日期的时间。
            </summary>
            <param name="minDateTime">最小时间。</param>
            <param name="maxDateTime">最大时间。</param>
            <returns>时间。</returns>
            <exception cref="T:System.ArgumentException">minDateTime 比 maxDateTime 大 。</exception>
        </member>
        <member name="M:Py.Core.Rand.DateTime(System.Int32)">
            <summary>
            生成一个不超过当前日期的指定天数之前的随机时间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Core.Rand.Bool">
            <summary>
            生成一个随机的布尔型。
            </summary>
            <returns>随机的布尔型。</returns>
        </member>
        <member name="M:Py.Core.Rand.Char">
            <summary>
            生成一个随机的字符。
            </summary>
            <returns>随机的字符。</returns>
        </member>
        <member name="M:Py.Core.Rand.Double">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <returns>随机数。</returns>
        </member>
        <member name="M:Py.Core.Rand.Float(System.Int32,System.Int32)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:Py.Core.Rand.Double(System.Int32,System.Int32)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:Py.Core.Rand.Double(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="dights">小数位置。</param>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:Py.Core.Rand.Guid">
            <summary>
            生成一个随机的 Guid 对象。
            </summary>
        </member>
        <member name="M:Py.Core.Rand.Bytes(System.Byte[])">
            <summary>
            返回随机的字节数组。
            </summary>
            <param name="buffer">缓存。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Number(System.Int32)">
            <summary>
            生成随机数字。
            </summary>
            <param name="length">数字位数。</param>
            <returns>数字字符串。</returns>
        </member>
        <member name="M:Py.Core.Rand.Permutation(System.Int32,System.Int32,System.Boolean)">
            <summary>
            将数字<paramref name="number"/>平均分到一个数组。
            </summary>
            <param name="number">全部数字的和。</param>
            <param name="size">分成的个数。</param>
            <param name="average">是否平均分配，保证每个的差不大于1。</param>
            <returns>分好的数组。</returns>
            <example>
            以下示例演示了如何使用 Permutation 打乱数组。
            <code>
            int[] p = new int[] { 1, 2, 3, 4, 5, 6 };
            Rand.Permutation(p, 4, true);
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> 或 <paramref name="number"/> 小于 0。</exception>
        </member>
        <member name="M:Py.Core.Rand.Permutation``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            将一个数组随机平均分成 <paramref name="size"/> 个。
            </summary>
            <param name="input">输入。</param>
            <param name="size">份。</param>
            <param name="average">是否平均分配，保证每个的差不大于1。</param>
            <returns>分好的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> 小于等于 0。</exception>
        </member>
        <member name="M:Py.Core.Rand.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            随机分配集合的元素。
            </summary>
            <typeparam name="T"><paramref name="input"/> 的元素的类型。</typeparam>
            <param name="input">要分配的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将集合元素随机重排。
            </summary>
            <typeparam name="T"><paramref name="input"/> 中的元素的类型。</typeparam>
            <param name="input">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 超过索引。</exception>
        </member>
        <member name="M:Py.Core.Rand.UserName">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线。）。该密码长度在 5 - 20内。
            </summary>
            <returns>用户名。</returns>
        </member>
        <member name="M:Py.Core.Rand.UserName(System.Int32)">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线。）。
            </summary>
            <param name="length">长度。</param>
            <returns>用户名。</returns>
        </member>
        <member name="M:Py.Core.Rand.UserName(System.Int32,System.Int32)">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线；首字母不是数字。）。
            </summary>
            <param name="maxLength">最小长度。</param>
            <param name="minLength">最大长度。</param>
            <returns>用户名。</returns>
        </member>
        <member name="M:Py.Core.Rand.Password">
            <summary>
            生成一个随机的密码（含大部分可见字符。）。该密码长度在 5 - 20内。
            </summary>
            <returns>密码。</returns>
        </member>
        <member name="M:Py.Core.Rand.Password(System.Int32)">
            <summary>
            生成一个随机的密码（含大部分可见字符。）。该密码长度在 5 - 20内。
            </summary>
            <param name="length">长度。</param>
            <returns>密码。</returns>
        </member>
        <member name="M:Py.Core.Rand.Password(System.Int32,System.Int32)">
            <summary>
            生成一个随机的密码（含大部分可见字符。）。该密码长度在 5 - 20直接。
            </summary>
            <param name="maxLength">最小长度。</param>
            <param name="minLength">最大长度。</param>
            <returns>密码。</returns>
        </member>
        <member name="M:Py.Core.Rand.Values``1(System.Int32,Py.Core.Func{``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Values``1(System.Int32,System.Int32,Py.Core.Func{System.Int32,``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="length">委托的第一个参数。表示每个值的长度。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Values``1(System.Int32,System.Int32,System.Int32,Py.Core.Func{System.Int32,System.Int32,``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="minValue">委托的第一个参数。表示最小的范围。</param>
            <param name="maxValue">委托的第一个参数。表示最多的范围。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Value``1(System.Collections.Generic.IList{``0})">
            <summary>
            从列表中随机选择一个值。
            </summary>
            <typeparam name="T"><paramref name="input"/> 的参数类型。</typeparam>
            <param name="input">要选择的列表。</param>
            <returns>值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.Rand.Letter">
            <summary>
            生成一个随机的字母。
            </summary>
            <returns>随机的字母。</returns>
        </member>
        <member name="M:Py.Core.Rand.Dight">
            <summary>
            生成一个随机的数字字符。
            </summary>
            <returns>随机的数字字符。</returns>
        </member>
        <member name="M:Py.Core.Rand.Id(System.Int32)">
            <summary>
            返回一个随机的ID。
            </summary>
            <returns>ID。</returns>
        </member>
        <member name="M:Py.Core.Rand.Literal(System.Int32)">
            <summary>
            生成随机由字母组成的组成的随机数。
            </summary>
            <param name="length">长度。</param>
            <returns>随机数。</returns>
        </member>
        <member name="M:Py.Core.Rand.FileName">
            <summary>
            生成随机的文件名。
            </summary>
            <returns>文件名。</returns>
        </member>
        <member name="M:Py.Core.Rand.FileName(System.Int32,System.String)">
            <summary>
            生成随机的文件名。
            </summary>
            <param name="length">文件名长度。不含扩展名的部分。</param>
            <param name="ext">扩展名。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Py.Core.Rand.Reset(System.Int32)">
            <summary>
            重置当前的随机生成器。
            </summary>
            <param name="sleep">线程延时时间。</param>
        </member>
        <member name="P:Py.Core.Rand.Random">
            <summary>
            获取或设置使用的随机数生成器。
            </summary>
        </member>
        <member name="T:Py.IO.CountingStream">
            <summary>
            用于计算以读写的字节数的流。
            </summary>
        </member>
        <member name="F:Py.IO.CountingStream._s">
            <summary>
            用于操作的内部流。
            </summary>
        </member>
        <member name="F:Py.IO.CountingStream._bytesWritten">
            <summary>
            已写入的字节数。
            </summary>
        </member>
        <member name="F:Py.IO.CountingStream._bytesRead">
            <summary>
            已读取的大小。
            </summary>
        </member>
        <member name="F:Py.IO.CountingStream._initialOffset">
            <summary>
            开始偏移位置。
            </summary>
        </member>
        <member name="F:Py.IO.CountingStream._closeInput">
            <summary>
            是否需关闭基础流。
            </summary>
        </member>
        <member name="M:Py.IO.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            初始化 Py.Core.CountingStream 的新实例。
            </summary>
            <param name="baseStream">流。</param>
        </member>
        <member name="M:Py.IO.CountingStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            初始化 Py.Core.CountingStream 的新实例。可选是否关闭基础流。
            </summary>
            <param name="baseStream">流。</param>
            <param name="leaveOpen">指定是否需要同时关闭基础流。</param>
        </member>
        <member name="M:Py.IO.CountingStream.Adjust(System.Int64)">
            <summary>
            调整已写入的大小。
            </summary>
            <param name="delta">差额。</param>
            <exception cref="T:System.InvalidOperationException">已读取的流大小小于差额。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:Py.IO.CountingStream.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:System.IO.Stream"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.IO.CountingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步读操作。
            </summary>
            <param name="buffer">数据读入的缓冲区。</param>
            <param name="offset"><paramref name="buffer"/> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
            <param name="count">最多读取的字节数。</param>
            <param name="callback">可选的异步回调，在完成读取时调用。</param>
            <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
            <returns>
            表示异步读取的 <see cref="T:System.IAsyncResult"/>（可能仍处于挂起状态）。
            </returns>
            <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
            <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
            <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持读取操作。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步写操作。
            </summary>
            <param name="buffer">从中写入数据的缓冲区。</param>
            <param name="offset"><paramref name="buffer"/> 中的字节偏移量，从此处开始写入。</param>
            <param name="count">最多写入的字节数。</param>
            <param name="callback">可选的异步回调，在完成写入时调用。</param>
            <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
            <returns>表示异步写入的 IAsyncResult（可能仍处于挂起状态）。</returns>
            <exception cref="T:System.IO.IOException">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</exception>
            <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
            <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持写入操作。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.EndRead(System.IAsyncResult)">
            <summary>
            等待挂起的异步读取完成。
            </summary>
            <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
            <returns>
            从流中读取的字节数，介于零 (0) 和所请求的字节数之间。流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="asyncResult"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception>
            <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.EndWrite(System.IAsyncResult)">
            <summary>
            结束异步写操作。
            </summary>
            <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="asyncResult"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception>
            <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.CreateObjRef(System.Type)">
            <summary>
            创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。
            </summary>
            <param name="requestedType">新的 <see cref="T:System.Runtime.Remoting.ObjRef"/> 将引用的对象的 <see cref="T:System.Type"/>。</param>
            <returns>生成代理所需要的信息。</returns>
            <exception cref="T:System.Runtime.Remoting.RemotingException">此实例不是有效的远程处理对象。</exception>
            <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:Py.IO.CountingStream.InitializeLifetimeService">
            <summary>
            获取控制此实例的生存期策略的生存期服务对象。
            </summary>
            <returns>
            	<see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 类型的对象，用于控制此实例的生存期策略。这是此实例当前的生存期服务对象（如果存在）；否则为初始化为 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> 属性的值的新生存期服务对象。
            </returns>
            <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:Py.IO.CountingStream.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.IO.CountingStream.ReadByte">
            <summary>
            从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。
            </summary>
            <returns>转换为 Int32 的无符号字节，或者如果到达流的末尾，则为 -1。</returns>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.WriteByte(System.Byte)">
            <summary>
            将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。
            </summary>
            <param name="value">要写入流的字节。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.IO.CountingStream.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Py.IO.CountingStream.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="P:Py.IO.CountingStream.WrappedStream">
            <summary>
            获取内部的流。
            </summary>
        </member>
        <member name="P:Py.IO.CountingStream.BytesWritten">
            <summary>
            获取已写入的字节数。
            </summary>
        </member>
        <member name="P:Py.IO.CountingStream.BytesRead">
            <summary>
            获取已读取的大小。
            </summary>
        </member>
        <member name="P:Py.IO.CountingStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
            <value></value>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.IO.CountingStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.IO.CountingStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.IO.CountingStream.Length">
            <summary>
            获取用字节表示的流长度。
            </summary>
            <value></value>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.IO.CountingStream.ComputedPosition">
            <summary>
            获取计算的位置。
            </summary>
            <value>计算值。</value>
        </member>
        <member name="P:Py.IO.CountingStream.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
            <value></value>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.IO.CountingStream.BaseStream">
            <summary>
            获取当前操作的基础流。
            </summary>
        </member>
        <member name="P:Py.IO.CountingStream.CanTimeout">
            <summary>
            获取一个值，该值确定当前流是否可以超时。
            </summary>
            <value></value>
            <returns>一个确定当前流是否可以超时的值。</returns>
        </member>
        <member name="P:Py.IO.CountingStream.ReadTimeout">
            <summary>
            获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。
            </summary>
            <value></value>
            <returns>一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:System.IO.Stream.ReadTimeout"/> 方法总是引发 <see cref="T:System.InvalidOperationException"/>。</exception>
        </member>
        <member name="P:Py.IO.CountingStream.WriteTimeout">
            <summary>
            获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。
            </summary>
            <value></value>
            <returns>一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:System.IO.Stream.WriteTimeout"/> 方法总是引发 <see cref="T:System.InvalidOperationException"/>。</exception>
        </member>
        <member name="T:Py.RunTime.Debug">
            <summary>
            调试时使用的类。提供调试时的辅助工具。
            </summary>
        </member>
        <member name="M:Py.RunTime.Debug.Info(Py.Core.Base.FileBase)">
            <summary>
            显示用于特定实例的调试用的信息。
            </summary>
            <param name="value">类。</param>
            <returns>是否显示全部数据。</returns>
        </member>
        <member name="M:Py.RunTime.Debug.Info(Py.Core.Base.HelperBase)">
            <summary>
            显示用于特定实例的调试用的信息。
            </summary>
            <param name="value">类。</param>
            <returns>是否显示全部数据。</returns>
        </member>
        <member name="M:Py.RunTime.Debug.Info(Py.Sql.DbHelper)">
            <summary>
            显示用于特定实例的调试用的信息。
            </summary>
            <param name="value">类。</param>
            <returns>是否显示全部数据。</returns>
        </member>
        <member name="M:Py.RunTime.Debug.Info(System.Object)">
            <summary>
            显示用于特定实例的调试用的信息。
            </summary>
            <param name="value">类。</param>
            <returns>是否显示全部数据。</returns>
        </member>
        <member name="M:Py.RunTime.Debug.WriteHttpContextVariables">
            <summary>
            输出当前请求的变量信息。
            </summary>
        </member>
        <member name="M:Py.RunTime.Debug.WriteHttpContextVariables(System.Web.HttpContext)">
            <summary>
            输出请求的变量信息。
            </summary>
            <param name="context">请求。</param>
        </member>
        <member name="M:Py.RunTime.Debug.WriteServerVariables">
            <summary>
            输出系统变量。
            </summary>
        </member>
        <member name="M:Py.RunTime.Debug.Info(System.Array)">
            <summary>
            示用于特定实例的调试用的信息。
            </summary>
            <param name="array">类。</param>
            <returns>是否显示全部数据。</returns>
        </member>
        <member name="M:Py.RunTime.Debug.Test(System.String,Py.Core.Action,System.Int32)">
            <summary>
            测试一个函数性能。
            </summary>
            <param name="name">名字。</param>
            <param name="action">要测试的委托。</param>
            <param name="time">要测试的次数。</param>
        </member>
        <member name="M:Py.RunTime.Debug.Test(Py.Core.Action,System.Int32)">
            <summary>
            测试一个函数性能。
            </summary>
            <param name="action">要测试的委托。</param>
            <param name="time">要测试的次数。</param>
        </member>
        <member name="P:Py.RunTime.Debug.Logger">
            <summary>
            获取或设置当前使用的监视器。
            </summary>
        </member>
        <member name="T:Py.Logging.ConsoleLogListener">
            <summary>
            将日志输出到控制台。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Logging.ConsoleLogListener"/> 的新实例。
            </summary>
            <param name="useColorCoding">如果 true ，则为不同等级的日志变换颜色输出。</param>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.#ctor(Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.ConsoleLogListener"/> 的新实例。
            </summary>
            <param name="convert">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.ConsoleLogListener"/> 的新实例。
            </summary>
        </member>
        <member name="F:Py.Logging.ConsoleLogListener._colorMapping">
            <summary>
            等级的颜色列表。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.ResetColor">
            <summary>
            重置颜色效果为默认风格。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.SetColor(Py.Logging.LogLevel,System.ConsoleColor)">
            <summary>
            设置一个等级的颜色。
            </summary>
            <param name="level">等级。</param>
            <param name="consoleColor">控制台的颜色。</param>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.ConvertLogEntry(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，将日志转为字符串。
            </summary>
            <param name="entry">日志。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.Close">
            <summary>
            关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.OnLog(System.String)">
            <summary>
            当被子类重写时，将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.ConsoleLogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="P:Py.Logging.ConsoleLogListener.UseColorCoding">
            <summary>
            获取或设置是否为不同等级的日志变换颜色输出。
            </summary>
        </member>
        <member name="T:Py.Json.Formatting">
            <summary>
            指示 Py.Json.JsonWriter 的格式设置选项。
            </summary>
        </member>
        <member name="F:Py.Json.Formatting.None">
            <summary>
            不应用特殊的格式设置。这是默认选项。
            </summary>
        </member>
        <member name="F:Py.Json.Formatting.Indented">
            <summary>
              使子元素产生缩进。
            </summary>
        </member>
        <member name="T:Py.Json.WriteState">
            <summary>
            指示 <see cref="T:Py.Json.JsonWriter"/> 的状态。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Start">
            <summary>
             尚未调用“写”方法。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Object">
            <summary>
            正在写入对象。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Array">
            <summary>
            正在写入数组。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Value">
            <summary>
            正在写入对象值。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Closed">
            <summary>
            已调用 Py.Json.JsonWriter.Close() 方法。
            </summary>
        </member>
        <member name="F:Py.Json.WriteState.Error">
            <summary>
            已引发异常，使 Py.Json.JsonWriter 仍处于无效状态。可以调用 Py.Json.JsonWriter.Close() 方法将  Py.Json.JsonWriter 置于 System.Xml.WriteState.Closed 状态。任何其他 Py.Json.JsonWriter 方法调用都将导致引发 System.InvalidOperationException。
            </summary>
        </member>
        <member name="T:Py.Json.JsonWriterSettings">
            <summary>
            指定在由 Overload:Py.Json.JsonWriter.Create 方法创建的 Py.Json.JsonWriter 对象上支持的一组功能。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriterSettings.#ctor">
            <summary>
            初始化 Py.Json.JsonWriterSettings 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriterSettings.Reset">
            <summary>
            将设置类的成员重置为各自的默认值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriterSettings.Clone">
            <summary>
             创建 Py.Json.JsonWriterSettings 实例的副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.Encoding">
            <summary>
            获取或设置要使用的文本编码。
            </summary>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.Indent">
            <summary>
            获取或设置一个值，该值指示是否缩进元素。默认不缩进。
            </summary>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.IndentChars">
            <summary>
            获取或设置缩进时要使用的字符串。当 Indent 属性设置为 true 时使用此设置。
            </summary>
            <value>缩进时要使用的字符串。它可以设置为任何字符串值。但是，为了确保 Json 有效，应该只指定有效的空白字符，例如空格、制表符、回车符或换行符。默认值为一个空格。</value>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.NewLineChars">
            <summary>
            获取或设置要用于分行符的字符串。
            </summary>
            <value>要用于分行符的字符串。它可以设置为任何字符串值。但是，为了确保 Json 有效，应该只指定有效的空白字符，例如空格、制表符、回车符或换行符。默认为 \r\n（回车换行）。</value>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.KeySeperator">
            <summary>
            获取或设置表示键/值的分隔符。默认": " 。
            </summary>
        </member>
        <member name="P:Py.Json.JsonWriterSettings.QuoteChar">
            <summary>
            获取或设置默认使用哪个字符用于将字符串引起来。默认为双引号。
            </summary>
            <value>用于将属性值引起来的字符。这必须是单引号 (&#39;) 或双引号 (&#34;)。默认为双引号。</value>
        </member>
        <member name="T:Py.Json.JsonWriter">
            <summary>
            表示一个输出Json的对象。
            </summary>
        </member>
        <member name="F:Py.Json.JsonWriter._settings">
            <summary>
            编辑器设置。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.Close">
            <summary>
            当在派生类中被重写时，关闭此流和基础流。
            </summary>
            <exception cref="T:System.InvalidOperationException">在调用 Close 之后执行要编写其他输出的调用，或者此调用的结果是无效的 Json 文档。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.IO.Stream)">
            <summary>
            使用指定的流创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要写入的流。Py.Json.JsonWriter 编写 XML 1.0 文本语法并将其追加到指定的流中。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">stream 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.String)">
            <summary>
            使用指定的文件名创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="outputFileName">要写入的文件。Py.Json.JsonWriter 在指定路径上创建一个文件，并采用 Json 语法写入该文件。outputFileName 必须为文件系统路径。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">outputFileName 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.Text.StringBuilder)">
            <summary>
            使用指定的 System.Text.StringBuilder 创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要写入的 System.Text.StringBuilder。由 Py.Json.JsonWriter 写入的内容被追加到 System.Text.StringBuilder。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">builder 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.IO.TextWriter)">
            <summary>
            使用指定的 System.IO.TextWriter 创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output"> 要写入的 System.IO.TextWriter。Py.Json.JsonWriter 编写 XML 1.0 文本语法，并将该语法追加到指定  System.IO.TextWriter。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException"> text 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(Py.Json.JsonWriter)">
            <summary>
            使用指定的 Py.Json.JsonWriter 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要用作基础编写器的 Py.Json.JsonWriter 对象。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException"> writer 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.IO.Stream,Py.Json.JsonWriterSettings)">
            <summary>
            使用流和 Py.Json.JsonWriterSettings 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要写入的流。Py.Json.JsonWriter 编写 XML 1.0 文本语法并将其追加到指定的流。</param>
            <param name="settings">用于配置新的 Py.Json.JsonWriterPy.Json.JsonWriterSettings 对象 实例。如果这是 null，则使用具有默认设置的 Py.Json.JsonWriterSettings。这样可以确保所创建的 Py.Json.JsonWriter 对象的输出设置是正确的。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">stream 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.String,Py.Json.JsonWriterSettings)">
            <summary>
            使用文件名和 Py.Json.JsonWriterSettings 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="outputFileName">要写入的文件。Py.Json.JsonWriter 在指定路径上创建一个文件，并采用 Json 文本语法写入该文件。outputFileName 必须为文件系统路径。</param>
            <param name="settings">用于配置新的 Py.Json.JsonWriterPy.Json.JsonWriterSettings 对象 实例。如果这是 null，则使用具有默认设置的 Py.Json.JsonWriterSettings。这样可以确保所创建的 Py.Json.JsonWriter 对象的输出设置是正确的。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">url 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.Text.StringBuilder,Py.Json.JsonWriterSettings)">
            <summary>
            使用 System.Text.StringBuilder 和 Py.Json.JsonWriterSettings 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要写入的 System.Text.StringBuilder。由 Py.Json.JsonWriter 写入的内容被追加到 System.Text.StringBuilder。</param>
            <param name="settings">用于配置新的 Py.Json.JsonWriterPy.Json.JsonWriterSettings 对象 实例。如果这是 null，则使用具有默认设置的 Py.Json.JsonWriterSettings。这样可以确保所创建的 Py.Json.JsonWriter 对象的输出设置是正确的。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">output 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(System.IO.TextWriter,Py.Json.JsonWriterSettings)">
            <summary>
            使用 System.IO.TextWriter 和 Py.Json.JsonWriterSettings 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要写入的 System.IO.TextWriter。Py.Json.JsonWriter 编写 Json 文本语法，并将该语法追加到指定 System.IO.TextWriter。</param>
            <param name="settings">用于配置新的 Py.Json.JsonWriterPy.Json.JsonWriterSettings 对象 实例。如果这是 null，则使用具有默认设置的 Py.Json.JsonWriterSettings。这样可以确保所创建的 Py.Json.JsonWriter 对象的输出设置是正确的。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException">text 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Create(Py.Json.JsonWriter,Py.Json.JsonWriterSettings)">
            <summary>
            使用指定的 Py.Json.JsonWriter 对象创建一个新的 Py.Json.JsonWriter 实例。
            </summary>
            <param name="output">要用作基础编写器的 Py.Json.JsonWriter 对象。</param>
            <param name="settings">用于配置新的 Py.Json.JsonWriterPy.Json.JsonWriterSettings 对象 实例。如果这是 null，则使用具有默认设置的 Py.Json.JsonWriterSettings。这样可以确保所创建的 Py.Json.JsonWriter 对象的输出设置是正确的。</param>
            <returns>一个 Py.Json.JsonWriter 对象。</returns>
            <exception cref="T:System.ArgumentNullException"> writer 值为 null。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.Indent">
            <summary>
            增加一个缩进。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.UnIndent">
            <summary>
            减小一个缩进。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            释放由 Py.Json.JsonWriter 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.Flush">
            <summary>
            当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteNull">
            <summary>
            写入一个空值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteUndefined">
            <summary>
            写入一个未定义的值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            写入一个json字符串，不改变编辑器的状态。
            </summary>
            <param name="json">Json字符串。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            当在派生类中被重写时，从字符缓冲区手动编写原始标记。
            </summary>
            <param name="buffer">字符数组，包含要写入的文本。</param>
            <param name="index">缓冲区中的位置，指示要写入文本的起始位置。</param>
            <param name="count">要写入的字符数。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 或 count 小于零。- 或 -缓冲区长度减去 index 小于 count。</exception>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            写入一个符号。
            </summary>
            <param name="ch">符号。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            写入一个值 <see cref="T:System.String"/> 。
            </summary>
            <param name="value">写入的值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.String,System.Char)">
            <summary>
            写入一个值 <see cref="T:System.String"/> 。
            </summary>
            <param name="value">写入的值。</param>
            <param name="ch">符号。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteString(System.String)">
            <summary>
            写入一个字符串。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.String,System.Object[])">
            <summary>
            写入一个值 <see cref="T:System.String"/> 。
            </summary>
            <param name="format">格式化的字符串。</param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteStartObject">
            <summary>
            写入数组头。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteEndObject">
            <summary>
            写入数组尾。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteStartArray">
            <summary>
            写入数组头。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteEndArray">
            <summary>
            写入数组尾。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteKey(System.String)">
            <summary>
            写入一个键。
            </summary>
            <param name="name">键名。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteKey(System.String,System.Char)">
            <summary>
            写入一个键。
            </summary>
            <param name="name">键名。</param>
            <param name="ch">额外的符号，可以是'或"符号。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteField``1(System.String,``0)">
            <summary>
            写入键/值。
            </summary>
            <param name="name">键名。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteField``1(System.String,System.Char,``0)">
            <summary>
            写入键/值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">键名。</param>
            <param name="quote">引号。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValues(System.Array)">
            <summary>
            写入一个数组。
            </summary>
            <param name="array">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValues(System.Collections.ICollection)">
            <summary>
            写入一个数组。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValues(System.Collections.IDictionary)">
            <summary>
            写入一个数组。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            写入一个 <see cref="T:System.DateTime"/> 值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue``1(``0)">
            <summary>
            写入一个 <see cref="T:System.DateTime"/> 值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个 <see cref="T:System.DateTime"/> 值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            写入一个 <see cref="T:System.Boolean"/> 值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue(System.DateTime,System.Char)">
            <summary>
            写入一个 <see cref="T:System.DateTime"/> 值。
            </summary>
            <param name="value">值。</param>
            <param name="quote">引号。</param>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            写入一个注释。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteWhitespace(System.Int32)">
            <summary>
            写入空白。
            </summary>
        </member>
        <member name="M:Py.Json.JsonWriter.WriteValue``1(System.Nullable{``0})">
            <summary>
            写入一个可空元素。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="P:Py.Json.JsonWriter.Settings">
            <summary>
            获取编辑器设置。
            </summary>
        </member>
        <member name="P:Py.Json.JsonWriter.WriteState">
            <summary>
            当在派生类中被重写时，获取编写器的状态。
            </summary>
        </member>
        <member name="T:Py.Json.JsonTextWriter">
            <summary>
            表示提供快速、非缓存、只进方法的编写器，该方法生成包含 Json 数据（这些数据符合 Json 语法的流或文件。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextWriter._writer">
            <summary>
            向流写入对象。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextWriter._indent">
            <summary>
            缩进数。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextWriter._writeSates">
            <summary>
            编写器的状态。
            </summary>
        </member>
        <member name="F:Py.Json.JsonTextWriter._isFirst">
            <summary>
            表示当前是否为第一个元素。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.Close">
            <summary>
            关闭此流和基础流。
            </summary>
            <exception cref="T:System.Text.EncoderFallbackException">当前编码不支持显示半个 Unicode 代理项对。</exception>
        </member>
        <member name="M:Py.Json.JsonTextWriter.Flush">
            <summary>
            当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
            </summary>
            <exception cref="T:System.IO.IOException">读写出现未知错误。</exception>
        </member>
        <member name="M:Py.Json.JsonTextWriter.Indent">
            <summary>
            增加一个缩进。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.UnIndent">
            <summary>
            减小一个缩进。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            初始化 Py.Json.JsonTextWriter 的新实例。
            </summary>
            <param name="w">文本编写器。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            初始化 Py.Json.JsonTextWriter 的新实例。
            </summary>
            <param name="w">要写入的流。</param>
            <param name="encoding">要生成的编码方式。如果编码方式为 null，则它以 UTF-8 的形式写出流并忽略 ProcessingInstruction 中的编码属性。</param>
            <exception cref="T:System.ArgumentNullException">stream 或 encoding 为 null。</exception>
            <exception cref="T:System.ArgumentException">stream 不可写。</exception>
        </member>
        <member name="M:Py.Json.JsonTextWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            使用指定的文件创建 System.Xml.XmlTextWriter 类的实例。
            </summary>
            <param name="fileName">要写入的文件名。如果该文件存在，它将截断该文件并用新内容对其进行覆盖。</param>
            <param name="encoding">要生成的编码方式。如果编码方式为 null，它将以 UTF-8 的形式写出该文件，并忽略 ProcessingInstruction 中的编码属性。</param>
            <exception cref="T:System.IO.FileNotFoundException">文件不存在。</exception>
        </member>
        <member name="M:Py.Json.JsonTextWriter.Dispose(System.Boolean)">
            <summary>
            释放由 Py.Json.JsonWriter 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.OnWriting(System.Boolean)">
            <summary>
            写入前的检查。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteStartObject">
            <summary>
            写入数组头。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteEndObject">
            <summary>
            写入数组尾。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteStartArray">
            <summary>
            写入数组头。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteEndArray">
            <summary>
            写入数组尾。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteKey(System.String)">
            <summary>
            写入一个键。
            </summary>
            <param name="name">键名。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteKey(System.String,System.Char)">
            <summary>
            写入一个键。
            </summary>
            <param name="name">键名。</param>
            <param name="ch">额外的符号，可以是'或"符号。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            写入一个json字符串，不改变编辑器的状态。
            </summary>
            <param name="json">Json字符串。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            写入一个符号。
            </summary>
            <param name="ch">符号。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            写入一个值 <see cref="T:System.String"/> 。
            </summary>
            <param name="value">写入的值。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteString(System.String)">
            <summary>
            写入一个字符串。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteValue(System.String,System.Object[])">
            <summary>
            写入一个值 <see cref="T:System.String"/> 。
            </summary>
            <param name="format"></param>
            <param name="args">参数。</param>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            写入一个注释。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteWhitespace(System.Int32)">
            <summary>
            写入空白。
            </summary>
        </member>
        <member name="M:Py.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个 <see cref="T:System.DateTime"/> 值。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="P:Py.Json.JsonTextWriter.Settings">
            <summary>
            获取编辑器设置。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.WriteState">
            <summary>
            当在派生类中被重写时，获取编写器的状态。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.Encoding">
            <summary>
            获取将输出写入到其中的 System.Text.Encoding。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.NewLine">
            <summary>
            获取或设置由当前 TextWriter 使用的行结束符字符串。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.KeySeperator">
            <summary>
            获取或设置表示键/值的分隔符。默认": " 。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.Formatting">
            <summary>
            指示如何对输出进行格式设置。(默认值为无特殊格式。)
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.IndentChars">
            <summary>
            获取或设置当 System.Xml.XmlTextWriter.Formatting 设置为 Formatting.Indented 时哪个字符用于缩进。
            </summary>
        </member>
        <member name="P:Py.Json.JsonTextWriter.QuoteChar">
            <summary>
            获取或设置默认使用哪个字符用于将字符串引起来。默认为双引号。
            </summary>
            <value>用于将属性值引起来的字符。这必须是单引号 (&#39;) 或双引号 (&#34;)。默认为双引号。</value>
        </member>
        <member name="T:Py.Json.JsonExpression">
             <summary>
             表示任何一个Json表达式。
             </summary>
             <remarks>
             此类可作为所有 Json 表达式的入口。
             </remarks>
             <example>
             <code>
             using Py.Logging;
             using Py.Json;
             
             class Sample {
             
                 public static void Main() {
             
             
                     const string S = "{a:1, b:[2, 3], c: {2:[7] }}";
             
                     JsonExpression json = new JsonExpression(S);
             
                     Logger.Write(json["c"]["2"][0]); //  7
            
                     Logger.Write(json["c"].Json);   //  {2:[7] }
            
                     Logger.Write(json["a"].Value);
            
                     json["hh"] = new JsonArray(new int[] { 3, 4, 2, 5, 6 });
            
                     json["ss"] = new JsonBoolean(false);
            
                     Logger.Write(json.ToString());
                 }
              }
             </code>
             
             
             </example>
        </member>
        <member name="F:Py.Json.JsonExpression._value">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。将值设为 JsonValue.Null 。
            </summary>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor(Py.Json.IJsonObject)">
            <summary>
            使用已存在的IJsonObject生成Json对象。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor(Py.Json.JsonParser)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="x">操作符。</param>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="json">Json表达式。</param>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor(System.Collections.IDictionary)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="map">键/值集合。</param>
        </member>
        <member name="M:Py.Json.JsonExpression.#ctor(System.Collections.ICollection)">
            <summary>
            初始化 Py.Json.JsonObject 的新实例。
            </summary>
            <param name="collection">值集合。</param>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonObject">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonArray">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonValue">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonBoolean">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonInt">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonString">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.op_Explicit(Py.Json.JsonExpression)~Py.Json.JsonDouble">
            <summary>
            实现从 <see cref="T:Py.Json.JsonExpression"/> 到 <see cref="T:Py.Json.JsonObject"/>的显性转换。
            </summary>
            <param name="j">Json对象。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonArray(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonObject(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonValue(System.Int32)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonArray(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonObject(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.GetJsonValue(System.String)">
            <summary>
            获取当前数组下指定位置的值。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.Parse(System.String)">
            <summary>
            转换一个Json对象。
            </summary>
            <param name="json">Json。</param>
            <returns>IJsonObject。</returns>
            <exception cref="T:Py.Core.SyntaxException">Json 的语法解释错误。</exception>
        </member>
        <member name="M:Py.Json.JsonExpression.TryParse(System.String,Py.Json.IJsonObject@)">
            <summary>
            尝试转换一个Json。
            </summary>
            <param name="json">Json。</param>
            <param name="jsonObject">IJsonObject。</param>
            <returns>成功返回true。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.ToJson(System.Collections.IDictionary)">
            <summary>
            将一个集合转化为等效的Json字符串。
            </summary>
            <param name="dic">集合。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.ToJson(System.Collections.ICollection)">
            <summary>
            将一个集合转化为等效的Json字符串。
            </summary>
            <param name="dic">集合。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Json.JsonExpression.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Py.Json.JsonExpression.IsArray">
            <summary>
            返回当前对象是否是数组。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.IsObject">
            <summary>
            返回当前对象是否是对象。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.IsValue">
            <summary>
            返回当前对象是否是内容。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.IsNull">
            <summary>
            返回当前对象是否为null。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.Value">
            <summary>
            获取当前对象的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.Json">
            <summary>
            返回当前表达式对应的Json字符串。
            </summary>
        </member>
        <member name="P:Py.Json.JsonExpression.Item(System.Int32)">
            <summary>
            获取或设置指定位置的值。
            </summary>
            <param name="index">位置。</param>
            <returns>IJsonObject。</returns>
        </member>
        <member name="P:Py.Json.JsonExpression.Item(System.String)">
            <summary>
            获取或设置指定名字的值。
            </summary>
            <returns>IJsonObject。</returns>
        </member>
        <member name="T:Py.Drawing.CssSize">
            <summary>
            表示一个 CSS 使用的大小。 如 10% 4px 3
            </summary>
        </member>
        <member name="M:Py.Drawing.CssSize.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Drawing.CssSize"/> 的新实例。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:Py.Drawing.CssSize.#ctor(System.Single,Py.Drawing.CssUnit)">
            <summary>
            初始化 <see cref="T:Py.Drawing.CssSize"/> 的新实例。
            </summary>
            <param name="value">值。</param>
            <param name="unit">单位。</param>
        </member>
        <member name="M:Py.Drawing.CssSize.#ctor(System.Single)">
            <summary>
            初始化 <see cref="T:Py.Drawing.CssSize"/> 的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Drawing.CssSize.Equals(Py.Drawing.CssSize)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="obj">要比较的另一个对象。</param>
            <returns>
            如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Drawing.CssSize.Equals(System.Object)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="obj">要比较的另一个对象。</param>
            <returns>
            如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Drawing.CssSize.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
            <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
        </member>
        <member name="M:Py.Drawing.CssSize.ToString">
            <summary>
            返回该实例的完全限定类型名。
            </summary>
            <returns>
            包含完全限定类型名的 <see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Py.Drawing.CssSize.op_Equality(Py.Drawing.CssSize,Py.Drawing.CssSize)">
            <summary>
            实现操作 operator ==。
            </summary>
            <param name="x">要计算的第1个值。</param>
            <param name="y">要计算的第2个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Drawing.CssSize.op_Inequality(Py.Drawing.CssSize,Py.Drawing.CssSize)">
            <summary>
            实现操作 operator ==。
            </summary>
            <param name="x">要计算的第1个值。</param>
            <param name="y">要计算的第2个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Drawing.CssSize.ToInt(System.Int32)">
            <summary>
            基于指定位置返回整值。
            </summary>
            <param name="p">原始大小。</param>
            <returns>整数。</returns>
        </member>
        <member name="P:Py.Drawing.CssSize.Value">
            <summary>
            获取或设置当前大小的值。
            </summary>
        </member>
        <member name="P:Py.Drawing.CssSize.Unit">
            <summary>
            获取或设置当前大小的单位。
            </summary>
        </member>
        <member name="T:Py.Drawing.CssUnit">
            <summary>
            所有 Css 单位。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Em">
            <summary>
            元素的字体高度。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Ex">
            <summary>
            字母x的高度 。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Px">
            <summary>
            像素。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Percent">
            <summary>
            % 。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.In">
            <summary>
            英寸。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Cm">
            <summary>
            厘米。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Mm">
            <summary>
            毫米。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Pt">
            <summary>
            点。
            </summary>
        </member>
        <member name="F:Py.Drawing.CssUnit.Pc">
            <summary>
            皮卡 。
            </summary>
        </member>
        <member name="T:Py.Web.Binder">
            <summary>
            提供绑定的工具。
            </summary>
        </member>
        <member name="M:Py.Web.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeNode,System.Converter{Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeNode})">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeViewNode">控件。</param>
            <param name="converter">将树节点转换为控件节点的委托。</param>
        </member>
        <member name="M:Py.Web.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeView,System.Converter{Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeNode})">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeView">控件。</param>
            <param name="converter">将树节点转换为控件节点的委托。</param>
        </member>
        <member name="M:Py.Web.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeNode)">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeViewNode">控件。</param>
        </member>
        <member name="M:Py.Web.Binder.Bind``1(Py.Collections.ITreeNode{``0},System.Web.UI.WebControls.TreeView)">
            <summary>
            将一棵树绑定到控件。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="tree">来源树。</param>
            <param name="treeView">控件。</param>
        </member>
        <member name="T:Py.Zip.Zlib.ZipStreamType">
            <summary>
            表示Zip流的种类。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipStreamType.Zlib">
            <summary>
            Zip 。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipStreamType.Default">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZipStreamType.Gzip">
            <summary>
            Gzip 。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.Tree">
            <summary>
            表示一个哈弗曼树。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.HEAP_SIZE">
            <summary>
            栈大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.BUFFER_SIZE">
            <summary>
            字节缓存大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.ExtraLengthBits">
            <summary>
            扩展长度表。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.ExtraDistanceBits">
            <summary>
            扩展距离表。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.ExtraBlbits">
            <summary>
            扩展长度代码。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.BlOrder">
            <summary>
            顺序。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree._dist_code">
            <summary>
            距离表。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.LengthCode">
            <summary>
            长度的代码表。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.LengthBase">
            <summary>
            长度矩阵。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.DistanceBase">
            <summary>
            距离矩阵。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            匹配距离。
            </summary>
            <remarks> 
            没有边界. _dist_code[256] 和 _dist_code[257] 不使用。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.DynTree">
            <summary>
            动态生成的树。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.MaxCode">
            <summary>
            最大的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Tree.staticTree">
            <summary>
            静态的树。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.Tree.GenBitLen(Py.Zip.Zlib.DeflateManager)">
            <summary>
            生成代码长度。
            </summary>
            <param name="s">管理者。</param>
            <remarks>
            计算可选的长度到树，更新当前的块。确保这些字段不空。  heap[heap_max]为递增排序。
            </remarks>
        </member>
        <member name="M:Py.Zip.Zlib.Tree.BuildTree(Py.Zip.Zlib.DeflateManager)">
            <summary>
            生成树。
            </summary>
            <param name="s">管理者。</param>
        </member>
        <member name="M:Py.Zip.Zlib.Tree.BiReverse(System.Int32,System.Int32)">
            <summary>
            反正代码的头尾字节。
            </summary>
            <param name="code">代码。</param>
            <param name="count">长度。1 &lt;= <paramref name="count"/> &lt;= 15</param>
            <returns>颠倒结果。</returns>
        </member>
        <member name="T:Py.Zip.Zlib.WorkItem">
            <summary>
            工作项目。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Buffer">
            <summary>
            缓存大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Compressed">
            <summary>
            压缩的数目。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.CurrentStatus">
            <summary>
            状态。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Crc">
            <summary>
            检验码。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Index">
            <summary>
            索引。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.InputBytesAvailable">
            <summary>
            可以使用的输入字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.CompressedBytesAvailable">
            <summary>
            可以压缩的部分。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Compressor">
            <summary>
            解码器。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.WorkItem.#ctor(System.Int32,Py.Zip.Zlib.CompressionLevel,Py.Zip.Zlib.CompressionStrategy)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.WorkItem"/> 的新实例。
            </summary>
            <param name="size">大小。</param>
            <param name="compressLevel">压缩等级。</param>
            <param name="strategy">策略。</param>
        </member>
        <member name="T:Py.Zip.Zlib.WorkItem.Status">
            <summary>
            表示当前的状态。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.None">
            <summary>
            无。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Filling">
            <summary>
            正则填写。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Filled">
            <summary>
            填写完成。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Compressing">
            <summary>
            正压缩。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Compressed">
            <summary>
            压缩完成。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Writing">
            <summary>
            正在写入。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.WorkItem.Status.Done">
            <summary>
            写入。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.ParallelDeflateOutputStream">
             <summary>
             支持在多线程使用的使用 Deflate 算法的压缩流。
             </summary>
            
             <remarks>
             <para>
             这个类只能用在压缩和写入。
             </para>
            
             <para>
              这个类和 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 类似, 但这个类追加了支持多线程的部分。
              在多内核的计算机上，使用这个类可以明显提交效率。特别是长度大的数据流。 一般 文件大于 10 M 适合使用这个类。
             </para>
            
             <para>
              这个类使用更多内存和占用更大处理器， 对于大文件，压缩率可以最多可相对 DeflateStream 的小 1% 。如果文件小时，效果将十分明显。这个值和缓存大小也有关。但对小文件，这个类将十分慢。
             </para>
            
             </remarks>
             <seealso cref="T:Py.Zip.Zlib.DeflateStream"/>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream.IO_BUFFER_SIZE_DEFAULT">
            <summary>
            输入/输出缓存大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._pool">
            <summary>
            工作项目列表。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._leaveOpen">
            <summary>
            是否保持流打开。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._outStream">
            <summary>
            输出流。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._nextToFill">
            <summary>
            下一个添加的地点。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._nextToWrite">
            <summary>
            下一个添加的地点。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._bufferSize">
            <summary>
            缓存的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._writingDone">
            <summary>
            写完成回调函数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._sessionReset">
            <summary>
            状态刷新的回调函数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._noMoreInputForThisSegment">
            <summary>
            当前代码是否没有其它输入。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._isClosed">
            <summary>
            是否关闭流。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._isDisposed">
            <summary>
            是否释放空间。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._firstWriteDone">
            <summary>
            首次写入。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._pc">
            <summary>
            寄存。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._Crc32">
            <summary>
            检验码。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._totalBytesProcessed">
            <summary>
            处理的字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._compressLevel">
            <summary>
            压缩等级。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._pendingException">
            <summary>
            追加时的异常。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ParallelDeflateOutputStream._eLock">
            <summary>
            加时的锁。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.ParallelDeflateOutputStream"/> 的新实例。
            </summary>
            <param name="stream">要写入的流。</param>
            <example>
            下面例子演示了使用当前类压缩。
            <code>
            byte[] buffer = new byte[WORKING_BUFFER_SIZE];
            int n= -1;
            String outputFile = fileToCompress + ".compressed";
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
            using (var raw = System.IO.File.Create(outputFile))
            {
            using (Stream compressor = new ParallelDeflateOutputStream(raw))
            {
            while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
            {
            compressor.Write(buffer, 0, n);
            }
            }
            }
            }
            </code>
            	<code lang="VB">
            Dim buffer As Byte() = New Byte(4096) {}
            Dim n As Integer = -1
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
            Using raw As FileStream = File.Create(outputFile)
            Using compressor As Stream = New ParallelDeflateOutputStream(raw)
            Do While (n &lt;&gt; 0)
            If (n &gt; 0) Then
            compressor.Write(buffer, 0, n)
            End If
            n = input.Read(buffer, 0, buffer.Length)
            Loop
            End Using
            End Using
            End Using
            </code>
            </example>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionLevel)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.ParallelDeflateOutputStream"/> 的新实例。
            </summary>
            <param name="stream">要写入的流。</param>
            <param name="level">压缩等级。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionLevel,Py.Zip.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.ParallelDeflateOutputStream"/> 的新实例。
            </summary>
            <param name="stream">要写入的流。</param>
            <param name="level">压缩等级。</param>
            <param name="strategy">压缩策略。</param>
            <param name="leaveOpen">是否不关闭基础流。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>
            释放由当前实例使用的所有资源。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
             更换写入的流。
             </summary>
             <remarks>
               因为创建 ParallelDeflateOutputStream 需很多的资源,这个方法用于重复利用资源。 可以先执行 Close()， 然后执行 Reset() 。
             </remarks>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.PerpetualWriterMethod(System.Object)">
            <summary>
            处理写。
            </summary>
            <param name="state">状态。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.DeflateOne(System.Object)">
            <summary>
            压缩一个内容。
            </summary>
            <param name="wi">内容。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。这个属性不支持。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。这个属性不支持。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。这个属性不支持。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
             获取压缩策略。
             </summary>
            
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.BuffersPerCore">
             <summary>
             获取或设置每个处理器含的缓存。
             </summary>
            
             <remarks>
             
             <para>
               默认 4。根据计算机的能力不同，这个值变化。
             </para>
            
             <para>
              全部的空间需要 (n*M*S*2), 其中 n 为 CPU 数, M 为个数, S 为缓存的大小 (<see cref="P:Py.Zip.Zlib.ParallelDeflateOutputStream.BufferSize"/>),
               其中 2 个缓存由 compressor 使用, 1 个输入和输出。如一个四核的电脑， 每个缓存为 3 ， 默认缓存为 128k， 整个类将使用 3mb 内存。
             </para>
            
             <para>
             这个值可以在任何时间更改，但必须在 Write() 之前修改。
             </para>
             </remarks>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.BufferSize">
            <summary>
            一个线程的缓存的长度。
            </summary>
            <remarks>
            默认为128k。
            </remarks>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            获取目前的检验码。
            </summary>
            <remarks>
            这个值只在 Close() 之后才有意义。
            </remarks>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
            <value>总等于 false 。</value>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
            <value>总等于 false 。</value>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持写入功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            当在派生类中重写时，获取用字节表示的流长度。这个属性不支持。
            </summary>
            <value></value>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            获取或设置当前流中的位置。这个属性不支持。
            </summary>
            <value></value>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Zip.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            一共处理了的字节数。
            </summary>
            <remarks>
            这个值只在 Close() 之后才有意义。
            </remarks>
        </member>
        <member name="T:Py.Zip.ProgressChangedEventHandler">
            <summary>
            处理进度改变的事件委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:Py.Zip.EntryEventHandler`1">
            <summary>
            产生错误事件委托。
            </summary>
        </member>
        <member name="T:Py.Zip.BlockWritenEventHandler">
            <summary>
            处理块处理事件委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:Py.Web.CacheStrategy">
            <summary>
            缓存管理类。
            </summary>
        </member>
        <member name="M:Py.Web.CacheStrategy.AddObject(System.String,System.Object)">
            <summary>
            添加指定ID的对象。
            </summary>
            <param name="objId">对象的ID。</param>
            <param name="o">对象。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.AddObjectWith(System.String,System.Object)">
            <summary>
            加入当前对象到缓存中。
            </summary>
            <param name="objId">对象的键值。</param>
            <param name="o">缓存的对象。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.AddObjectWithFileChange(System.String,System.Object,System.String[])">
            <summary>
            加入当前对象到缓存中,并对相关文件建立依赖。
            </summary>
            <param name="objId">对象的键值。</param>
            <param name="o">缓存的对象。</param>
            <param name="files">监视的路径文件。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.AddObjectWithDepend(System.String,System.Object,System.String[])">
            <summary>
            加入当前对象到缓存中,并使用依赖键。
            </summary>
            <param name="objId">对象的键值。</param>
            <param name="o">缓存的对象。</param>
            <param name="dependKey">依赖关联的键值。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.OnRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            建立回调委托的一个实例。
            </summary>
            <param name="key">要操作的字符串。</param>
            <param name="val">值。</param>
            <param name="reason">原因。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.RemoveObject(System.String)">
            <summary>
            删除缓存对象。
            </summary>
            <param name="objId">对象的关键字。</param>
        </member>
        <member name="M:Py.Web.CacheStrategy.RetrieveObject(System.String)">
            <summary>
            返回一个指定的对象。
            </summary>
            <param name="objId">对象的关键字。</param>
            <returns>对象。</returns>
        </member>
        <member name="P:Py.Web.CacheStrategy.TimeOut">
            <summary>
            获取或设置到期时间,单位：分钟。
            </summary>
        </member>
        <member name="P:Py.Web.CacheStrategy.GetWebCacheObj">
            <summary>
            获取当前缓存。
            </summary>
        </member>
        <member name="T:Py.Net.NetClient">
            <summary>
            提供网络有关的操作。
            </summary>
        </member>
        <member name="M:Py.Net.NetClient.SendMailMessage(System.String,System.String,System.String,System.Net.Mail.MailMessage[])">
            <summary>
            发送电子邮件。
            </summary>
            <param name="smtpServer">stmp服务器。正确的服务器格式如: 127.0.0.1, 127.0.0.1:80 。</param>
            <param name="userName">用户名。</param>
            <param name="psd">密码。</param>
            <param name="mm">内容。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="smtpServer"/>、<see cref="P:System.Net.Mail.MailMessage.From"/> 或 <see cref="P:System.Net.Mail.MailMessage.To"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 和 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中没有收件人。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="smtpServer"/> 为空。</exception>
            <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
            <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
            <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">message 无法传递给 <see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 或 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中的一个或多个收件人。</exception>
        </member>
        <member name="M:Py.Net.NetClient.SendMailMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送电子邮件。
            </summary>
            <param name="smtpServer">stmp服务器。 正确的服务器格式如: 127.0.0.1, 127.0.0.1:80 。</param>
            <param name="userName">用户名。</param>
            <param name="psd">密码。</param>
            <param name="cTo">到。</param>
            <param name="cTitle">标题。</param>
            <param name="cBody">正文。</param>
            <param name="isHTML">正文是否为 html。</param>
            <param name="attaches">附件。</param>
            <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.Mail.MailMessage.From"/> 或 <see cref="P:System.Net.Mail.MailMessage.To"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 和 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中没有收件人。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="smtpServer"/> 为空。</exception>
            <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
            <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
            <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">message 无法传递给 <see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 或 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中的一个或多个收件人。</exception>
        </member>
        <member name="M:Py.Net.NetClient.SendMailMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送电子邮件。
            </summary>
            <param name="smtpServer">stmp服务器。 正确的服务器格式如: 127.0.0.1, 127.0.0.1:80 。</param>
            <param name="userName">用户名。</param>
            <param name="psd">密码。</param>
            <param name="cFrom">来自。</param>
            <param name="cTo">到。</param>
            <param name="cTitle">标题。</param>
            <param name="cBody">正文。</param>
            <param name="isHTML">正文是否为 html。</param>
            <param name="attaches">附件。</param>
            <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.Mail.MailMessage.From"/> 或 <see cref="P:System.Net.Mail.MailMessage.To"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 和 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中没有收件人。</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="smtpServer"/> 为空。</exception>
            <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
            <exception cref="T:System.Net.Mail.SmtpException">连接到 SMTP 服务器失败。- 或 -身份验证失败。- 或 -操作超时。</exception>
            <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">message 无法传递给 <see cref="P:System.Net.Mail.MailMessage.To"/>、<see cref="P:System.Net.Mail.MailMessage.CC"/> 或 <see cref="P:System.Net.Mail.MailMessage.Bcc"/> 中的一个或多个收件人。</exception>
        </member>
        <member name="M:Py.Net.NetClient.GetHostName(System.String,System.Int32@)">
            <summary>
            根据地址获得主机和端口。
            </summary>
            <param name="server">地址。</param>
            <param name="port">返回端口。</param>
            <returns>主机。</returns>
        </member>
        <member name="M:Py.Net.NetClient.DownloadSourceCode(System.String)">
            <summary>
            下载指定地址的 html 源码。
            </summary>
            <param name="uri">地址。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Net.NetClient.DownloadSourceCode(System.Uri)">
            <summary>
            下载指定地址的 html 源码。
            </summary>
            <param name="uri">地址。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Net.NetClient.DownloadFile(System.String,System.String,Py.Core.OverwriteType,System.Int32)">
            <summary>
            下载指定文件。
            </summary>
            <param name="uri">地址。</param>
            <param name="savePath">保存的位置。</param>
            <param name="type">覆盖方式。</param>
            <param name="ioBufferSize">缓存的大小。</param>
        </member>
        <member name="M:Py.Net.NetClient.DownloadFile(System.Uri,System.String,Py.Core.OverwriteType,System.Int32)">
            <summary>
            下载指定文件。
            </summary>
            <param name="uri">地址。</param>
            <param name="savePath">保存的位置。</param>
            <param name="type">覆盖方式。</param>
            <param name="ioBufferSize">缓存的大小。</param>
        </member>
        <member name="M:Py.Net.NetClient.CreateRequest(System.String)">
            <summary>
            生成基于指定 URL 的连接。
            </summary>
            <param name="uri">地址。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.NetClient.CreateRequest(System.Uri)">
            <summary>
            生成基于指定 URL 的连接。
            </summary>
            <param name="uri">地址。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Net.NetClient.SetGetData(System.Net.WebRequest)">
            <summary>
            将要提请求改成一个 GET 请求。
            </summary>
            <param name="request">请求对象。</param>
        </member>
        <member name="M:Py.Net.NetClient.SetPostData(System.Net.WebRequest,System.String)">
            <summary>
            将要提交的 post 数据填充到一个请求内。
            </summary>
            <param name="request">要填的请求。</param>
            <param name="data">要填充的数据。</param>
        </member>
        <member name="M:Py.Net.NetClient.SetPostData(System.Net.WebRequest,System.Collections.Specialized.NameValueCollection)">
            <summary>
            将要提交的 post 数据填充到一个请求内。
            </summary>
            <param name="request">要填的请求。</param>
            <param name="data">要填充的数据。</param>
        </member>
        <member name="M:Py.Net.NetClient.SetPlainPostData(System.Net.WebRequest,System.String)">
            <summary>
            将要提交的 text/plain 数据填充到一个请求内。
            </summary>
            <param name="request">要填的请求。</param>
            <param name="data">要填充的数据。</param>
        </member>
        <member name="M:Py.Net.NetClient.SetFormDataPostData(System.Net.WebRequest,Py.Net.NetClient.DataFill)">
            <summary>
            将要提交的 Form Data数据填充到一个请求内。
            </summary>
            <param name="request">要填的请求。</param>
            <param name="datafill">要填充的数据的委托。</param>
        </member>
        <member name="M:Py.Net.NetClient.SetFormDataPostData(System.Net.WebRequest,System.Collections.Specialized.NameValueCollection,System.String[])">
            <summary>
            将要提交的 text/plain 数据填充到一个请求内。
            </summary>
            <param name="request">要填的请求。</param>
            <param name="data">要填充的数据。 如 a = b &amp; c = 2</param>
            <param name="files">在 data 中表示文件的字段。</param>
        </member>
        <member name="T:Py.Core.ArrayString">
            <summary>
            表示一个以字符串形式存储的数组。
            </summary>
            <remarks>
            这个类实现如 "a,b,c,d" 这样的字符串作为一个列表和字符串操作。
            </remarks>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor(System.String,System.Char)">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
            <param name="count">个数。</param>
            <param name="option">选项。</param>
        </member>
        <member name="M:Py.Core.ArrayString.#ctor(System.String[],System.String)">
            <summary>
            初始化 <see cref="T:Py.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="values">数组。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:Py.Core.ArrayString.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Implicit(Py.Core.ArrayString)~System.String">
            <summary>
            实现从 <see cref="T:Py.Core.ArrayString"/> 到 <see cref="T:System.String"/> 的隐性的转换。
            </summary>
            <param name="input">数组字符串。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Explicit(Py.Core.ArrayString)~System.String[]">
            <summary>
            实现从 <see cref="T:Py.Core.ArrayString"/> 到 <see cref="T:System.String[]"/> 的显性的转换。
            </summary>
            <param name="input">字符数组。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Addition(Py.Core.ArrayString,System.String)">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Addition(Py.Core.ArrayString,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Addition(Py.Core.ArrayString,Py.Core.ArrayString)">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Subtraction(Py.Core.ArrayString,System.String)">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> 为空。</exception>
        </member>
        <member name="M:Py.Core.ArrayString.op_Subtraction(Py.Core.ArrayString,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Subtraction(Py.Core.ArrayString,Py.Core.ArrayString)">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Equality(Py.Core.ArrayString,Py.Core.ArrayString)">
            <summary>
            实现操作 operator ==.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.op_Inequality(Py.Core.ArrayString,Py.Core.ArrayString)">
            <summary>
            实现操作 operator !=.
            </summary>
            <param name="input">输入的值。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.Equals(Py.Core.ArrayString)">
            <summary>
            确定指定的 <see cref="T:Py.Core.ArrayString"/> 是否等于当前的 <see cref="T:Py.Core.ArrayString"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:Py.Core.ArrayString"/> 进行比较的 <see cref="T:Py.Core.ArrayString"/>。</param>
            <returns>
            如果指定的 <see cref="T:Py.Core.ArrayString"/> 等于当前的 <see cref="T:Py.Core.ArrayString"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:Py.Core.ArrayString.Equals(Py.Core.ArrayString,System.StringComparison)">
            <summary>
            确定指定的 <see cref="T:Py.Core.ArrayString"/> 是否等于当前的 <see cref="T:Py.Core.ArrayString"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:Py.Core.ArrayString"/> 进行比较的 <see cref="T:Py.Core.ArrayString"/>。</param>
            <param name="comparison">字符串比较方式。</param>
            <returns>
            如果指定的 <see cref="T:Py.Core.ArrayString"/> 等于当前的 <see cref="T:Py.Core.ArrayString"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:Py.Core.ArrayString.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:Py.Core.ArrayString.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Core.ArrayString.AddValue(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符串添加值。如果原值存在，则不添加。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">增加的值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.ReplaceValue(System.String,System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符替换值。
            </summary>
            <param name="input">字符串。</param>
            <param name="oldValue">原来的值。</param>
            <param name="newValue">新值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.SetValue(System.String,System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符替换值，如果原值不存在,添加值。
            </summary>
            <param name="input">字符串。</param>
            <param name="oldValue">原来的值。</param>
            <param name="newValue">新值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.GetValue(System.String,System.Char,System.Int32)">
            <summary>
            获取某一位置的值。
            </summary>
            <param name="input">字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="index">位置。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.GetValue(System.String,System.String,System.Int32)">
            <summary>
            获取某一位置的值。
            </summary>
            <param name="input">字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="index">位置。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.IndexOf(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="startIndex">搜索起始位置。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.IndexOf(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.IndexOf(System.String,System.String,System.String)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.Concat(System.String,System.String,System.String)">
            <summary>
            连接字符串。
            </summary>
            <param name="input">输入。</param>
            <param name="value">值。</param>
            <param name="seperator">分隔符。</param>
            <returns>连接的字符串。</returns>
        </member>
        <member name="M:Py.Core.ArrayString.Slice(System.String,System.String,System.Char)">
            <summary>
            从input去掉 Name和指定符号。 如    input,b,c,d - b = input,c,d 。
            </summary>
            <param name="input">要做处理的字符串。</param>
            <param name="value">被删的字。</param>
            <param name="seperator">分隔符。</param>
            <returns>已处理的字符串。</returns>
            <example><code>
            using System;
            using Py.Core;
            class Sample {
            public static void Main(){
            string input = "input,b,c,d";
            string input = ArrayString.Slice(input,"b");
            Console.Write(input);  // 输出   input,c,d
            }
            }
            </code></example>
        </member>
        <member name="P:Py.Core.ArrayString.Seperator">
            <summary>
            获取或设置分隔符。
            </summary>
        </member>
        <member name="P:Py.Core.ArrayString.Length">
            <summary>
            获取字符串的总长度。
            </summary>
        </member>
        <member name="P:Py.Core.ArrayString.Value">
            <summary>
            获取或设置当前字符串的值。
            </summary>
        </member>
        <member name="T:Py.Sql.OleDbHelper">
            <summary>
            处理 OleDb 的数据库处理类。
            </summary>
        </member>
        <member name="F:Py.Sql.OleDbHelper._dataReader">
            <summary> 
            操作的OleDbDataReader对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.OleDbHelper._connection">
            <summary> 
            操作的OleDbConnection对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.OleDbHelper._command">
            <summary> 
            操作的OleDbCommand对象。
            </summary> 
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor">
            <summary> 
            初始化 Py.OleDb.OleDbDbHelper 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            初始化 Py.OleDb.DbHelper 类的新实例。
            </summary>
            <param name="connection">已创建的连接的实例。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(System.Data.OleDb.OleDbCommand)">
            <summary>
            初始化 Py.OleDb.DbHelper 类的新实例。
            </summary>
            <param name="command">已创建的命令的实例。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(System.String)">
            <summary> 
            使用指定的数据字符初始化 Py.OleDb.OleDbDbHelper 类的新实例。
            </summary>
            <param name="connectionString">数据库文件名或连接字符串。</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            使用指定的数据字符,数据库密码初始化 Py.OleDb.OleDbDbHelper 类的新实例。
            </summary>
            <param name="dbFilePath">数据库文件名。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OleDbSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dbFilePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary> 
            使用指定的数据字符,用户名,密码初始化 Py.OleDb.OleDbDbHelper 类的新实例。
            </summary>
            <param name="dbFilePath">数据库文件名。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OleDbSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">登录的数据库名。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dbFilePath"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.#ctor(Py.Sql.DbHelper)">
            <summary>
            使用已有的辅助类初始化 <see cref="T:Py.Sql.OleDbHelper"/> 的新实例，新实例和参数使用同一个连接。
            </summary>
            <param name="helper">The helper。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">传递的辅助类和当前实例的类型不相同。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.SetConnectionString(System.String,System.String)">
            <summary> 
            更改数据库连接字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="password">登录数据库的密码。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.CreateConnection">
            <summary>
            当被子类重写时，初始化连接。
            </summary>
        </member>
        <member name="M:Py.Sql.OleDbHelper.CreateCommand">
            <summary>
            创建并返回一个与当前使用的连接关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。
            </summary>
            <returns>创建的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.GetConnectionString(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            返回指定数据库连接的字符串。
            </summary>  
            <param name="fileName">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OleDbEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OleDbSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">默认使用的数据库。</param>
            <param name="connTimeOut">连接服务器超时的时间。</param>
            <param name="openTimeOut">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.Object)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <example><code>
            using System;
            using Py.OleDb;
            class Sample{
            static void Main(){
            DbHelper OleDb = new OledbDbHelper("~/App_Code/DbHelper.mdb");
            OleDb.SetOleDb("Select * from [TABLE] where id&gt;@id");
            OleDb.AddParameter("id", 200);
            }
            }
            </code></example>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.Boolean)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.String)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.Int32)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.Object,System.Data.OleDb.OleDbType)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.Object,System.Data.OleDb.OleDbType,System.Int32)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String,System.DateTime)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameter(System.String)">
            <summary>
            添加命名参数，不添加值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AddParameters(System.Collections.IDictionary)">
            <summary>
            添加命名参数。
            </summary>
            <param name="d">参数键/值的集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteNonQuery(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteScalar(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteTable(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteTable(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteReader(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="tables">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.CreateAdapter">
            <summary>
            生成适合当前的数据库适配器辅助类。
            </summary>
            <returns>数据库适配器的辅助实例。</returns>
        </member>
        <member name="P:Py.Sql.OleDbHelper.DataReader">
            <summary>
            获得正操作的DataReader对象。
            </summary>
        </member>
        <member name="P:Py.Sql.OleDbHelper.Connection">
            <summary> 
            获得正操作的DbConnection对象。
            </summary> 
        </member>
        <member name="P:Py.Sql.OleDbHelper.Command">
            <summary> 
            获得正操作的 DbCommand对象。
            </summary> 
        </member>
        <member name="P:Py.Sql.OleDbHelper.Procedure">
            <summary>
            获取或设置目前的存储过程。OleDb 不支持存储过程。
            </summary>
            <exception cref="T:System.NotSupportedException">不支持存储过程。</exception>
        </member>
        <member name="T:Py.Sql.OleDbHelper.AdapterHelper">
            <summary> 
            数据库适配器辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.OleDbHelper.AdapterHelper._dataAdapter">
            <summary>
            数据适配。
            </summary>
        </member>
        <member name="F:Py.Sql.OleDbHelper.AdapterHelper._dbHelper">
            <summary>
            辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.OleDbHelper.AdapterHelper._commandBuilder">
            <summary>
            命令生成
            </summary>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AdapterHelper.CreateCommand(System.String)">
            <summary>
            被子类重写时，实现生成一个命令。
            </summary>
            <param name="cmdText">命令文本。</param>
            <returns>一个命令实例。</returns>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AdapterHelper.#ctor(Py.Sql.OleDbHelper)">
            <summary> 
            使用Py.RunTime.OleDb.OleDbData 初始化 Py.RunTime.OleDb.OleDbData.RecordSet 类的新实例。
            </summary> 
            <param name="dbHelper">dbHelper对象</param>
        </member>
        <member name="M:Py.Sql.OleDbHelper.AdapterHelper.Initialize">
            <summary>
            初始化当前集合。
            </summary>
        </member>
        <member name="P:Py.Sql.OleDbHelper.AdapterHelper.DataAdapter">
            <summary>
            获取当前正在使用的 数据适配器。
            </summary>
        </member>
        <member name="P:Py.Sql.OleDbHelper.AdapterHelper.DbHelper">
            <summary>
            获取当前正在使用的 数据库辅助类。
            </summary>
        </member>
        <member name="P:Py.Sql.OleDbHelper.AdapterHelper.CommandBuilder">
            <summary>
            获取命令生成类。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.CompressionLevel">
            <summary>
            指定压缩的等级。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.None">
            <summary>
            不压缩。最快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level0">
            <summary>
            不压缩。最快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.BestSpeed">
            <summary>
            小压缩。最快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level1">
            <summary>
            小压缩。非常快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level2">
            <summary>
            小压缩。很快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level3">
            <summary>
            小压缩。比较快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level4">
            <summary>
            小压缩。较快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level5">
            <summary>
            中压缩。稍快。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Default">
            <summary>
            中压缩。标准。  
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level6">
            <summary>
            中压缩。稍慢。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level7">
            <summary>
            中压缩。较慢。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level8">
            <summary>
            高压缩。非常慢。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.BestCompression">
            <summary>
            高压缩。最慢。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionLevel.Level9">
            <summary>
            高压缩。最慢。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.CompressionStrategy">
            <summary>
            指定压缩的策略。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionStrategy.Default">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionStrategy.Filtered">
             <summary>
            过滤。
             </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            只使用哈夫曼编码。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.CompressionMode">
            <summary>
            指定是否压缩或解压缩基础流。
            </summary>
            <remarks>
            同 <see cref="T:System.IO.Compression.CompressionMode"/> 。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionMode.Compress">
            <summary>
            压缩基础流。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.CompressionMode.Decompress">
            <summary>
            解压缩基础流。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.StaticTree">
            <summary>
            静态树。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.StaticTree.#ctor(System.Int16[],System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.StaticTree"/> 的新实例。
            </summary>
            <param name="treeCodes">数组。</param>
            <param name="extraBits">数组。</param>
            <param name="extraBase">The extra base。</param>
            <param name="elems">The elems。</param>
            <param name="maxLength">需要的最大值。</param>
        </member>
        <member name="M:Py.Zip.Zlib.StaticTree.#cctor">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.StaticTree"/> 的静态成员。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.ZlibException">
            <summary>
            表示一个Zlib处理中的异常。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibException.#ctor">
            <summary>
            初始化 Py.Zip.ZlibException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 System.Exception 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="T:Py.Zip.Zlib.Adler">
            <summary>
            表示一个用来计算 Adler-32 检验码的一个工具。
            </summary>
            <remarks>
            Adler检验码和 CRC 循环检验码类似, 但计算更快，更可靠。 检验码是 "ZLIB" 标准的一个成员。 
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.Adler.BASE">
            <summary>
            不大于 65536 的最大的质数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.Adler.NMAX">
            <summary>
            满足 255n(n+1)/2 + (n+1)(BASE-1) &lt;= 2^32-1 的 最大n。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算 Adler-32 检验码。
            </summary>
            <param name="adler">输入值。</param>
            <param name="buf">缓存。</param>
            <param name="index">位置。</param>
            <param name="len">长度。</param>
            <returns>检验码。</returns>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateStream">
             <summary>
             包含压缩算法的流。
             </summary>
            
             <remarks>
            
             <para>
             此类表示 Deflate 算法，这是无损压缩和解压缩文件的行业标准算法。它结合了 LZ77 算法和霍夫曼编码。只能使用以前绑定的中间存储量来产生或使用数据，即使对于任意长度的、按顺序出现的输入数据流也是如此。这种格式可以通过不涉及专利使用权的方式轻松实现。有关更多信息，请参见 RFC 1951。" <see href="http://www.ietf.org/rfc/rfc1951.txt"> DEFLATE Compressed Data Format Specification version 1.3 </see>（DEFLATE 压缩数据格式规范版本 1.3）。"
             </para>
             
             <para>
             此类原本并不提供用来向 .zip 存档中添加文件或从 .zip 存档中提取文件的功能。
             </para>
            
             <para>
             <see cref="T:Py.Zip.Zlib.GZipStream"/> 类使用 Gzip 数据格式，这种格式包括一个用于监测数据损坏的循环冗余校验值。 Gzip 数据格式与 <c>DeflateStream</c>  类使用相同的压缩算法。 
             </para>
             
             <para>
             <c>DeflateStream</c> 和 <see cref="T:Py.Zip.Zlib.GZipStream"/> 中的压缩功能作为流公开。 由于数据是以逐字节的方式读取的，因此无法通过进行多次传递来确定压缩整个文件或大型数据块的最佳方法。对于未压缩的数据源，最好使用 <c>DeflateStream</c> 和 <see cref="T:Py.Zip.Zlib.GZipStream"/> 类。 如果源数据已压缩，则使用这些类时实际上可能会增加流的大小。
             </para>
            
             </remarks>
            
             <seealso cref="T:Py.Zip.Zlib.GZipStream"/>
             <example>
             这个例子演示了使用 DeflateStream 压缩一个文件，然后写到至另一个文件。
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress)){
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated")){
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress)){
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0){
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
            		Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
            			Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
            				Dim buffer As Byte() = New Byte(4096) {}
            				Dim n As Integer = -1
            				Do While (n &lt;&gt; 0)
            					If (n &gt; 0) Then
            						compressor.Write(buffer, 0, n)
            					End If
            					n = input.Read(buffer, 0, buffer.Length)
            				Loop
            			End Using
            		End Using
             End Using
             </code>
             </example>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode)">
            <summary>
            使用指定的流和 CompressionMode 值初始化 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 的新实例。
            </summary>
            <param name="stream">要压缩或解压缩的流。</param>
            <param name="mode">指示当前操作是压缩或解压。</param>
            <remarks>
            如果压缩模式为 <c>CompressionMode.Compress</c>, DeflateStream 自动使用默认的等级。 "高级" 的流会随 DeflateStream 而关闭。
            </remarks>
            <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
            <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel)">
            <summary>
            使用指定的流, CompressionLevel 值和 CompressionMode 值，初始化 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 的新实例。
            </summary>
            <remarks>
            如果压缩模式为 <c>CompressionMode.Compress</c>, DeflateStream 自动使用默认的等级。 "高级" 的流会随 DeflateStream 而关闭。
            </remarks>
            <param name="stream">用来写入或读取的流。</param>
            <param name="mode">指示当前操作是压缩或解压。</param>
            <param name="level">压缩等级。</param>
            <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
            <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,System.Boolean)">
             <summary>
             使用指定的流和 CompressionMode 值以及一个指定是否将流保留为打开状态的值，初始化 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 的新实例。
             </summary>
            
             <remarks>
            
             <para>
              这个构造函数用在应用程序需要基流保持打开状态 。 如果
               <c>Close()</c> 方法被调用, 那么默认基流也关闭。 在有些时候，用户不希望同时关闭，比如重读。指定 <paramref name="leaveOpen"/> 确保流保持打开。
             </para>
            
             <para>
               这个 <c>DeflateStream</c> 使用默认压缩等级。
             </para>
            
             <para>
               参见其他构造函数。
             </para>
             </remarks>
             <param name="stream">要压缩或解压缩的流。</param>
             <param name="mode">指示当前操作是压缩或解压。</param>
             <param name="leaveOpen">如果 true ，则保持基类的流打开。</param>
             <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
             <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,Py.Zip.Zlib.CompressionMode,Py.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            使用指定的流, CompressionLevel 值和 CompressionMode 值以及一个指定是否将流保留为打开状态的值，初始化 <see cref="T:Py.Zip.Zlib.DeflateStream"/> 的新实例。并额外指明基类流是否在当前流关闭后关闭。
            </summary>
            <remarks>
            <para>
             这个构造函数用在应用程序需要基流保持打开状态 。 如果
              <c>Close()</c> 方法被调用, 那么默认基流也关闭。 在有些时候，用户不希望同时关闭，比如重读。指定 <paramref name="leaveOpen"/> 确保流保持打开。
            </para>
            <para>
              参见其他构造函数。
            </para>
            </remarks>
            <param name="stream">要压缩或解压缩的流。</param>
            <param name="mode">指示当前操作是压缩或解压。</param>
            <param name="leaveOpen">true 将流保留为打开状态，否则为 false。</param>
            <param name="level">使用的压缩等级。</param>
            <exception cref="T:System.ArgumentNullException">stream 为 null。</exception>
            <exception cref="T:System.InvalidOperationException">stream 访问权限为 ReadOnly，mode 值为 Compress。</exception>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
             使用 DEFLATE (RFC 1951) 压缩一个字符串到数组。
             </summary>
            
             <remarks>
              用 <see cref="M:Py.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])"/> 解压。
             </remarks>
            
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <param name="s"> 要压缩的字符串。 </param>
             <returns>压缩的字节的数组。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
             使用 DEFLATE 压缩一个数组到数组。
             </summary>
            
             <remarks>
               使用 <see cref="M:Py.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/> 解压。
             </remarks>
            
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
             压缩的缓存。
             </param>
            
             <returns>压缩的结果。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
             使用  DEFLATE 解压字节的数组。
             </summary>
            
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
             压缩的数组。
             </param>
            
             <returns>解压后的字符串。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
             使用  DEFLATE 解压字节的数组。
             </summary>
            
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Py.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
             压缩的数组。
             </param>
            
             <returns>解压后的数组。</returns>
        </member>
        <member name="P:Py.Zip.Zlib.DeflateStream.Position">
            <summary>
            获取或设置当前流中的位置。此属性的设置不受支持，并且总是引发 System.NotSupportedException。
            </summary>
            <value>流中的当前位置。</value>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.Flush">
            <summary>
            当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            当在派生类中重写时，设置当前流中的位置。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.SetLength(System.Int64)">
            <summary>
            当在派生类中重写时，设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Zip.ZipSegmentedStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="P:Py.Zip.ZipSegmentedStream.CanRead">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持读取的值。
            </summary>
            <value></value>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipSegmentedStream.CanSeek">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持查找功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipSegmentedStream.CanWrite">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持写入功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Zip.ZipSegmentedStream.Length">
            <summary>
            当在派生类中重写时，获取用字节表示的流长度。
            </summary>
            <value></value>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Zip.ZipSegmentedStream.Position">
            <summary>
            当在派生类中重写时，获取或设置当前流中的位置。
            </summary>
            <value></value>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="T:Py.Zip.BadPasswordException">
            <summary>
            密码错误的异常。
            </summary>
        </member>
        <member name="T:Py.Zip.ZipException">
            <summary>
            所有  ZipException 的基类。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipException.#ctor">
            <summary>
            初始化 Py.Zip.ZipException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Py.Zip.ZipException 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和此异常原因的内部异常初始化 Py.Zip.ZipException 的新实例。
            </summary>
            <param name="message">信息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="M:Py.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 Py.Zip.ZipException 的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="M:Py.Zip.BadPasswordException.#ctor">
            <summary>
            初始化 Py.Zip.BadPasswordException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Py.Zip.BadPasswordException 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和此异常原因的内部异常初始化 Py.Zip.BadPasswordException 的新实例。
            </summary>
            <param name="message">信息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="M:Py.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 Py.Zip.BadPasswordException 的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Py.Zip.BadReadException">
            <summary>
            指示读取时的错误。  
            </summary>
        </member>
        <member name="M:Py.Zip.BadReadException.#ctor">
            <summary>
            初始化 Py.Zip.BadReadException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.BadReadException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Py.Zip.BadReadException 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和此异常原因的内部异常初始化 Py.Zip.BadReadException 的新实例。
            </summary>
            <param name="message">信息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="M:Py.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 Py.Zip.BadReadException 的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Py.Zip.BadCrcException">
            <summary>
            表示 CRC 没有验证合格的异常。
            </summary>
        </member>
        <member name="M:Py.Zip.BadCrcException.#ctor">
            <summary>
            初始化 Py.Zip.BadCrcException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Py.Zip.BadCrcException 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 Py.Zip.BadCrcException 的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Py.Zip.BadStateException">
            <summary>
            状态错误异常。
            </summary>
        </member>
        <member name="M:Py.Zip.BadStateException.#ctor">
            <summary>
            初始化 Py.Zip.BadStateException 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.BadStateException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 Py.Zip.BadStateException 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:Py.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和此异常原因的内部异常初始化 Py.Zip.BadStateException 的新实例。
            </summary>
            <param name="message">信息。</param>
            <param name="innerException">内部异常。</param>
        </member>
        <member name="M:Py.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 Py.Zip.BadStateException 的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:Py.Text.StringConverter">
            <summary>
            表示一个将常用类型转为字符串形式的工具。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2">
            <summary>
            为所有键/值的集合提供基类。适合元素较小的情况。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._comparer">
            <summary>
            表示键比较的比较工具。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._count">
            <summary>
            表示集合中值的个数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._top">
            <summary>
            链接首元素。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._keys">
            <summary>
            所有键的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._siInfo">
            <summary>
            序列号信息的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._values">
            <summary>
            所有值的缓存。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2._version">
            <summary>
            表示当前修改的版本。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.#ctor">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},Py.Core.EqualityComparison{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <param name="comparer">比较器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.#ctor(Py.Core.EqualityComparison{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnAddExistKey(`0)">
            <summary>
            当添加已存在的一个键时触发。
            </summary>
            <param name="key">键名。</param>
            <exception cref="T:System.ArgumentException">键已存在。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.InsertAt(System.Int32,`0,`1)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 指定位置中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="index">要插入的元素的位置。</param>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Insert(`0,`1,System.Boolean)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <param name="add">如果为 <c>true</c> 则增加，否则出现同样键出现错误。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>  为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnAddEntry(`0,`1)">
            <summary>
            向当前字典增加单元。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>增加则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Clear">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Remove(`0)">
            <summary>
            从 <see cref="T:Py.Collections.TinyDictionary`2"/> 中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns>
            如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:Py.Collections.TinyDictionary`2"/> 中没有找到 <paramref name="key"/>，该方法也会返回 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnRemoveEntry(`0,`1)">
            <summary>
            将单元移除。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnRemoveAll">
            <summary>
            移除所有单元。
            </summary>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:Py.Collections.TinyDictionary`2"/> 是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中定位的键。</param>
            <returns>
            如果 <see cref="T:Py.Collections.TinyDictionary`2"/> 包含带有该键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ContainsValue(`1)">
            <summary>
            确定 <see cref="T:Py.Collections.TinyDictionary`2"/> 是否包含具有指定值的元素。
            </summary>
            <param name="value">The value.</param>
            <returns>
            如果 <see cref="T:Py.Collections.TinyDictionary`2"/> 包含带有该值的元素，则为 true；否则，为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.IsCompatibleKey(System.Object)">
            <summary>
            判断当前键是否可用。
            </summary>
            <param name="key">键。</param>
            <returns>
            可用则true。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            拷贝到一个新的键/值集合。
            </summary>
            <param name="array">数组。</param>
            <param name="index">开始数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.FindEntry(`0)">
            <summary>
            查找指定键的值。
            </summary>
            <param name="key">键。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.FindEntry(System.Predicate{Py.Collections.ObjectModel.TinyDictionary{`0,`1}.Entry})">
            <summary>
            查找满足要求的值。
            </summary>
            <param name="predicate">判断值是否满足的条件。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value"/> 参数的类型的默认值。该参数未经初始化即被传递。</param>
            <returns>
            如果实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。当前未实现该参数的功能。</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">缺少匹配的集合。 - 或 - 键为空。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.GetEnumerator">
            <summary>
            返回一个 enumerator 。
            </summary>
            <returns>遍历器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </summary>
            <returns>
            一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            增加指定键到集合。
            </summary>
            <param name="keyValuePair">键/值集合。</param>
            <exception cref="T:System.ArgumentNullException">
            	键为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定集合是否包含特定值。
            </summary>
            <param name="keyValuePair">要在集合中定位的对象。</param>
            <returns>
            如果在集合中找到 item，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从特定的 System.Array 索引开始，将集合的元素复制到一个 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index"> array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="keyValuePair">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException">
            	key 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            在 <see cref="T:System.Collections.IDictionary"/> 对象中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的 <see cref="T:System.Object"/>。</param>
            <param name="value">用作要添加的元素的值的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.IDictionary"/> 对象中已存在具有相同键的元素。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 为只读。- 或 - <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IDictionary"/> 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 对象中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 包含带有该键的元素，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IDictionary"/> 对象中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 对象为只读。- 或 -<see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.OnKeyNotFound(`0)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Count">
            <summary>
            获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Comparer">
            <summary>
            获取或设置当前的比较器。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 对象具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.FirstEntry">
            <summary>
            获取当前的第一个单元。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Version">
            <summary>
            获取当前的字典版本。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.Entry">
            <summary>
            表示字典单元。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Entry.Next">
            <summary>
            下一个索引。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Entry.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Entry.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator">
            <summary>
            当前集合的枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator._dictionary">
            <summary>
            对应的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator._version">
            <summary>
            初始化的修改记录。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator._current">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator._getEnumeratorDictEntry">
            <summary>
            返回的枚举类型。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1},System.Boolean)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.Enumerator 的新实例。
            </summary>
            <param name="dictionary">字典。</param>
            <param name="getEnumeratorRetType">枚举的相对方式。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            获取键值集合。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.Key">
            <summary>
            获取当前键。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.Value">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            获取当前键。
            </summary>
            <value>键。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            获取当前值。
            </summary>
            <value>值。</value>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection">
            <summary>
            表示一个键的集合。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.KeyCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator._current">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection">
            <summary>
            表示一个值的集合。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TValue, TValue&gt;.ValueCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator._current">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:Py.Collections.ObjectModel.TinyDictionary`2.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:Py.Collections.ObjectModel.TinyDictionary`2.DebugView._tinyDictionary">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.TinyDictionary`2.DebugView.#ctor(Py.Collections.ObjectModel.TinyDictionary{`0,`1})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.TinyDictionary`2.DebugView"/> 的新实例。
            </summary>
            <param name="tinyDictionary">集合。</param>
        </member>
        <member name="P:Py.Collections.ObjectModel.TinyDictionary`2.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="M:Py.Text.StringConverter.#ctor">
            <summary>
            初始化 <see cref="T:Py.Text.StringConverter"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Text.StringConverter.Setup">
            <summary>
            添加默认的转换者。
            </summary>
        </member>
        <member name="M:Py.Text.StringConverter.Add``1(Py.Core.Func{``0,System.String})">
            <summary>
            注册一个类型的转换器。
            </summary>
            <param name="action">转换工具。</param>
        </member>
        <member name="M:Py.Text.StringConverter.Add(System.Type,Py.Core.Func{System.Object,System.String})">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:Py.Text.StringConverter.OnKeyNotFound(System.Type)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="M:Py.Text.StringConverter.DefaultConverter(System.Object)">
            <summary>
            默认的字符串比较器。
            </summary>
            <param name="t">对象。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.Dfs(System.Int32,System.Int32[],System.Int32,System.Array,System.Int32[],System.Text.StringBuilder,System.Int32)">
            <summary>
            内部转换。
            </summary>
            <param name="p">位置。</param>
            <param name="k">数组。</param>
            <param name="count">个数。</param>
            <param name="value">值。</param>
            <param name="s">数组。</param>
            <param name="c">字符串。</param>
            <param name="maxLevel"></param>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Object)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Collections.IEnumerable)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Data.DataTable)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dt">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Data.DataRow)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dr">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Array)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Object,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.String)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dt">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <param name="size">列的宽度。</param>
            <param name="header">如果 true ，则添加行首。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Array,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Data.DataRow,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dr">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Collections.IEnumerable,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Collections.IDictionary,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.DBNull)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Exception)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Text.StringConverter.ToString(System.Collections.IDictionary)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="P:Py.Text.StringConverter.IndentLevel">
            <summary>
            获取或设置当前的缩进等级。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.IndentString">
            <summary>
            获取缩进的字符串。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.Level">
            <summary>
            获取当前默认的显示的最大等级。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.IndentChars">
            <summary>
            表示当前的缩进符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.Null">
            <summary>
            表示空。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.ArrayStart">
            <summary>
            表示数组开始。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.ArrayEnd">
            <summary>
            表示数组结尾。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.ArraySeparator">
            <summary>
            表示数组分隔符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.EnumerableStart">
            <summary>
            表示枚举开始。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.EnumerableEnd">
            <summary>
            表示枚举结尾。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.EnumerableSeparator">
            <summary>
            表示枚举分隔符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DictionaryAssgin">
            <summary>
            表示字典赋值。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DictionaryStart">
            <summary>
            表示字典开始。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DictionarySeparator">
            <summary>
            表示字典分隔符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DictionaryEnd">
            <summary>
            表示字典结尾。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.RowStart">
            <summary>
            表示行开始。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.RowEnd">
            <summary>
            表示行结尾。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.RowSeperator">
            <summary>
            表示行分隔符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DataTableStart">
            <summary>
            表示数据表开始。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DataTableSeperator">
            <summary>
            表示数据表分隔符。
            </summary>
        </member>
        <member name="P:Py.Text.StringConverter.DataTableEnd">
            <summary>
            表示数据表结尾。
            </summary>
        </member>
        <member name="T:Py.Logging.FilterLogListener">
            <summary>
            将日志过滤完再记录。
            </summary>
        </member>
        <member name="F:Py.Logging.FilterLogListener._logger">
            <summary>
            原监听器。
            </summary>
        </member>
        <member name="M:Py.Logging.FilterLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.FilterLogListener.#ctor(Py.Logging.LogListener)">
            <summary>
            初始化 <see cref="T:Py.Logging.FilterLogListener"/> 的新实例。
            </summary>
            <param name="logger">日志记录者。</param>
        </member>
        <member name="F:Py.Logging.FilterLogListener.Checkor">
            <summary>
            当前用于检查日志的函数。
            </summary>
        </member>
        <member name="F:Py.Logging.FilterLogListener._hashTable">
            <summary>
            保存事件类型允许的结构。
            </summary>
        </member>
        <member name="M:Py.Logging.FilterLogListener.SetEnabled(Py.Logging.LogEventType,System.Boolean)">
            <summary>
            设置一个事件类型是否允许记录。
            </summary>
            <param name="eventType">事件类型。</param>
            <param name="value">如果true，说明为允许。</param>
        </member>
        <member name="M:Py.Logging.FilterLogListener.OnCheck(Py.Logging.LogEntry)">
            <summary>
            默认的检查函数。被子类重写时，实现不同的检查方法。
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Py.Logging.FilterLogListener.Close">
            <summary>
            关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.FilterLogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Logging.FilterLogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="P:Py.Logging.FilterLogListener.UseGlobalLock">
            <summary>
            获取或设置一个值，该值指示是否应当使用全局锁。
            </summary>
            <value>如果要使用全局锁，则为 true；否则为 false。默认为 true。</value>
        </member>
        <member name="P:Py.Logging.FilterLogListener.AutoFlush">
            <summary>
            获取或设置是否在增加日志后自动使用 Flush() 输出缓存。
            </summary>
            <value></value>
        </member>
        <member name="P:Py.Logging.FilterLogListener.IsThreadSafe">
            <summary>
            获取一个值，该值指示跟踪侦听器是否是线程安全的。
            </summary>
            <value>如果跟踪侦听器是线程安全的，则为 true；否则为 false。默认值为 false。</value>
        </member>
        <member name="P:Py.Logging.FilterLogListener.LowestLevel">
            <summary>
            获取或设置当前过滤器允许的最低等级的日志。
            </summary>
        </member>
        <member name="T:Py.Logging.HtmlLogStringConverter">
            <summary>
            用于显示Html格式日志。
            </summary>
        </member>
        <member name="T:Py.Logging.LoggingStringConverter">
            <summary>
            用于转换类型到字符串的工具。
            </summary>
        </member>
        <member name="M:Py.Logging.LoggingStringConverter.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.LoggingStringConverter"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Logging.LoggingStringConverter.GetLogLevelDescription(Py.Logging.LogLevel)">
            <summary>
            当被子类重写时，实现生成一个日志等级的描述。
            </summary>
            <param name="level">日志等级。</param>
            <returns>日志的描述字符串。</returns>
        </member>
        <member name="M:Py.Logging.LoggingStringConverter.ToString(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，实现生成一个日志的字符串形式。
            </summary>
            <param name="entry">日志。</param>
            <returns>日志的信息。</returns>
        </member>
        <member name="M:Py.Logging.LoggingStringConverter.Dir(System.Object)">
            <summary>
            遍历指定的对象。
            </summary>
            <param name="obj">对象。</param>
            <returns>转换字符串。</returns>
        </member>
        <member name="M:Py.Logging.LoggingStringConverter.Dir(System.Object,System.Int32)">
            <summary>
            遍历指定的对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>转换字符串。</returns>
        </member>
        <member name="P:Py.Logging.LoggingStringConverter.DirAssgin">
            <summary>
            表示遍历对象的分隔字符串。
            </summary>
        </member>
        <member name="M:Py.Logging.HtmlLogStringConverter.ToString(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dt">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <param name="size">列的宽度。</param>
            <param name="header">如果 true ，则添加行首。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:Py.Logging.HtmlLogStringConverter.ToString(Py.Logging.LogEntry)">
            <summary>
            实现生成一个日志的字符串形式。
            </summary>
            <param name="entry">日志。</param>
            <returns>日志的信息。</returns>
        </member>
        <member name="P:Py.Logging.HtmlLogStringConverter.WrappingWithHtmlCommands">
            <summary>
            获取或设置是否将输出放入注释。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlComment">
            <summary>
            表示 HTML 注释的内容。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlComment.#ctor(System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlComment"/> 类的新实例。
            </summary>
            <param name="comment">注释元素的内容。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlComment.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。由于注释节点没有子级，因此克隆的节点始终包含文本内容，而不管参数的设置如何。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlComment.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点的所有子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。因为注释节点没有子级，所以此方法不会产生任何效果。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlComment.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlComment.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>对于注释节点，该值为 #comment。</returns>
        </member>
        <member name="P:Py.Html.HtmlComment.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>对于注释节点，该值为 #comment。</returns>
        </member>
        <member name="P:Py.Html.HtmlComment.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>对于注释节点，该值为 HtmlNodeType.Comment。</returns>
        </member>
        <member name="T:Py.Html.HtmlDocumentType">
            <summary>
            表示 HTML 声明节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocumentType.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.DocumentType"/> 类的新实例。
            </summary>
            <param name="name">此文档类型的名称。</param>
            <param name="publicId">此文档类型的公共标识符或 null。可以指定公共 URI 以及系统标识符，以标识外部 DTD 子集的位置。</param>
            <param name="systemId">此文档类型的系统标识符或 null。指定外部 DTD 子集的文件位置的 URL。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlDocumentType.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。由于 DocumentType 节点没有子级，因此克隆的节点始终包含数据值，而不管参数的设置如何。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlDocumentType.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点的子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。由于 DocumentType 节点没有子级，因此该方法无效。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlDocumentType.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.InnerText">
            <summary>
            获取或设置 DocumentType 的连接的值。
            </summary>
            <value></value>
            <returns>DocumentType 的连接的值（即 &lt;?xml 和 ?&gt; 之间的每一个字符）。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>对于 DocumentType 节点，本地名称为 xml。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>对于 DocumentType 节点，该名称为 !。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>对于 DocumentType 节点，该值为 HtmlNodeType.DocumentType。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.NodeValue">
            <summary>
            获取或设置 DocumentType 的值。
            </summary>
            <returns>DocumentType 的内容（即 &lt;?xml 和 ?&gt; 之间的每一个字符）。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentType.Version">
            <summary>
            获取文档的 HTML 版本。
            </summary>
            <returns>HTML 版本。如 HTML 4.01 Traditional</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.ReadOnlyCollection`1">
            <summary>
            为泛型只读集合提供基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Py.Collections.ObjectModel.ReadOnlyCollection`1._list">
            <summary>
            列表。
            </summary>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化 Py.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="list">要包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            初始化 Py.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; 类的新实例，该实例是指定列表周围的只读包装。
            </summary>
            <param name="list">要包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="value">要在集合中定位的对象。对于引用类型，该值可以为空。</param>
            <returns>如果在集合中找到 value，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个集合复制到兼容的一维 System.Array。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -源集合中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>用于集合的序列。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="value">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.IsCompatibleObject(System.Object)">
            <summary>
            检查对象是否为当前 <typeparamref name="T"/> 型。
            </summary>
            <param name="value">值。</param>
            <returns>如果正确，则返回 true。</returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            将某项添加到集合中。
            </summary>
            <param name="value">要添加到集合的对象。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
             从集合中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            将一个项插入指定索引处的 集合。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入到 集合 中的对象。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的 集合 项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            将某项添加到 <see cref="T:System.Collections.IList"/> 中。
            </summary>
            <param name="value">要添加到 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
            <returns>新元素的插入位置。</returns>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
            <summary>
            从集合中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在 <see cref="T:System.Collections.IList"/> 中找到 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。
            </returns>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> 在 <see cref="T:System.Collections.IList"/> 中是 null 引用。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IList"/> 中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 <see cref="T:System.Collections.IList"/> 移除的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的集合项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 为空。</exception>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.Count">
            <summary>
            包含在集合实例中的元素数。
            </summary>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            获取指定索引处的元素。
            </summary>
            <param name="index">要获取的元素的索引（索引从零开始）。</param>
            <returns>指定索引处的元素。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。- 或 - <paramref name="index"/> 等于或大于数量。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.Items">
            <summary>
            返回集合包装的集合。
            </summary>
            <value>集合包装的集合。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <returns>指定索引处的元素。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是有效的索引。</exception>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:Py.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取或设置指定位置的 <see cref="T:System.Object"/>。
            </summary>
            <value>内容。</value>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="T:Py.Zip.ZipWriteDelegateEntry">
            <summary>
            来自委托的单元。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipWriteDelegateEntry.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipWriteDelegateEntry"/> 的新实例。
            </summary>
            <param name="file">所有者。</param>
        </member>
        <member name="F:Py.Zip.ZipWriteDelegateEntry._entryDelegate">
            <summary>
            关闭的委托。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipWriteDelegateEntry.#ctor(Py.Zip.ZipFile,System.String,Py.Zip.EntryDelegate)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="name">名字。</param>
            <param name="writeDelegate">写入流的委托。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="M:Py.Zip.ZipWriteDelegateEntry.WriteInternal(System.IO.Stream,Py.Algorithm.Crc32.CrcCalculatorStream,System.Int64)">
            <summary>
            写入当前内容到流。
            </summary>
            <param name="input">输入流。</param>
            <param name="output">输出流。</param>
            <param name="fileLength">文件大小。</param>
        </member>
        <member name="M:Py.Zip.ZipWriteDelegateEntry.FigureCrc32">
            <summary>
            设置当前的 CRC32 。
            </summary>
        </member>
        <member name="T:Py.Core.Util">
            <summary>
            大部分常用函数的集合。
            </summary>
        </member>
        <member name="M:Py.Core.Util.Swap``1(``0@,``0@)">
            <summary>
            交换2个参数的值。
            </summary>
            <param name="x">第一个元素。</param>
            <param name="y">第二个元素。</param>
        </member>
        <member name="M:Py.Core.Util.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            交换2个参数的值。
            </summary>
            <typeparam name="T"><paramref name="list"/> 的类型。</typeparam>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <param name="x">第一个元素。</param>
            <param name="y">第二个元素。</param>
        </member>
        <member name="M:Py.Core.Util.SwapIf``1(``0@,``0@,System.Comparison{``0})">
            <summary>
            若 x &gt; y ，则交换2个参数的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">第一个元素。</param>
            <param name="y">第二个元素。</param>
            <param name="comp">比较函数。</param>
        </member>
        <member name="M:Py.Core.Util.Max(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            求数组中找最大值。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始位置。</param>
            <param name="end">结束位置。</param>
            <returns>最大值。</returns>
        </member>
        <member name="M:Py.Core.Util.Max``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            求数组中找最大值。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始位置。</param>
            <param name="end">结束位置。</param>
            <param name="comp">比较函数。</param>
            <returns>最大值。</returns>
        </member>
        <member name="M:Py.Core.Util.BuildHeap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            构建堆。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="heapsize">堆大小。</param>
            <param name="position">位置。</param>
            <param name="start">开始位置。</param>
            <param name="comp">比较函数。</param>
        </member>
        <member name="M:Py.Core.Util.Maxbit(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            辅助函数，求数据的最大位数。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始位置。</param>
            <param name="end">结束位置。</param>
            <returns>最大位数。</returns>
        </member>
        <member name="F:Py.Core.Util._seed">
            <summary>
            用于生产id的种子。
            </summary>
        </member>
        <member name="M:Py.Core.Util.NewId">
            <summary>
            返回一个新的Id。
            </summary>
            <returns>id整数。</returns>
        </member>
        <member name="M:Py.Core.Util.HelloWorld">
            <summary>
            显示一个 "hello" 字符串。
            </summary>
        </member>
        <member name="M:Py.Core.Util.NewArray(System.Int32)">
            <summary>
            返回一个数组，每个元素初始值为 相应索引 。
            </summary>
            <param name="length">数组长度。</param>
            <returns>生成的数组。</returns>
        </member>
        <member name="M:Py.Core.Util.NewArray(System.Int32,System.Int32)">
            <summary>
            返回一个数组，每个元素初始值为 value 。
            </summary>
            <param name="length">数组长度。</param>
            <param name="value">值。</param>
            <returns>生成的数组。</returns>
        </member>
        <member name="M:Py.Core.Util.RunTime(Py.Core.Action,System.Int32)">
            <summary>
            测试一个函数的运行时间。
            </summary>
            <param name="action">要测试的函数。</param>
            <param name="time">运行次数。</param>
            <returns>毫秒数。</returns>
        </member>
        <member name="M:Py.Core.Util.ClearArray(System.Array)">
            <summary>
            将 System.Array 中的一系列元素设置为零、false 或 null，具体取决于元素类型。
            </summary>
            <param name="array">System.Array，需要清除其元素。</param>
        </member>
        <member name="T:Py.Sql.SqlOperation">
            <summary>
            所有Sql进行的操作枚举。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlOperation.Select">
            <summary>
            选择。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlOperation.Insert">
            <summary>
            插入。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlOperation.Update">
            <summary>
            更新。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlOperation.Delete">
            <summary>
            删除。
            </summary>
        </member>
        <member name="T:Py.Sql.Database">
            <summary>
            所有支持的数据库的枚举。
            </summary>
            <remarks>
            该枚举包含的一个数据库的多版本。可以对枚举值模 100 获得原始值。
            如 SqlSever2008 % 100 == SqlServer。
            </remarks>
        </member>
        <member name="F:Py.Sql.Database.Access">
            <summary>
            Microsoft Office Access。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SqlServer">
            <summary>
            Microsoft Sql Server。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.MySql">
            <summary>
            MySql。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Oracle">
            <summary>
            Oracle。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.FoxPro">
            <summary>
            FoxPro。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.PostgreSQL">
            <summary>
            PostgreSQL。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Sybase">
            <summary>
            Sybase。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Informix">
            <summary>
            Informix。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.DBase">
            <summary>
            DBase。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.DB2">
            <summary>
            DB2。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Oledb">
            <summary>
            Oledb。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Odbc">
            <summary>
            Odbc。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Excel">
            <summary>
            Microsoft Office Excel。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Access97">
            <summary>
            Microsoft Office Access 1997。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Access2000">
            <summary>
            Microsoft Office Access 2000。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Access2003">
            <summary>
            Microsoft Office Access 2003。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Access2007">
            <summary>
            Microsoft Office Access 2007。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Access2010">
            <summary>
            Microsoft Office Access 2010。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SqlServer2000">
            <summary>
            Microsoft Sql Server 2000。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SqlServer2005">
            <summary>
            Microsoft Sql Server 2005。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SqlServer2008">
            <summary>
            Microsoft Sql Server 2008。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SqlServer2010">
            <summary>
            Microsoft Sql Server 2010。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Excel97">
            <summary>
            Microsoft Office Excel 1997。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Excel2003">
            <summary>
            Microsoft Office Excel 2003。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.Excel2007">
            <summary>
            Microsoft Office Excel 2007。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.MySql5">
            <summary>
            MySql 5。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.MsText">
            <summary>
            MS text。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.SQLite">
            <summary>
            SQLite。
            </summary>
        </member>
        <member name="F:Py.Sql.Database.NotSupported">
            <summary>
            不支持的服务器。
            </summary>
        </member>
        <member name="T:System.IO.FileExistsException">
            <summary>
            试图写入磁盘上已存在的文件时引发的异常。
            </summary>
        </member>
        <member name="F:System.IO.FileExistsException.COR_E_POINTER">
            <summary>
            错误指针的 API long 值。
            </summary>
        </member>
        <member name="F:System.IO.FileExistsException._fileName">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:System.IO.FileExistsException._fusionLog">
            <summary>
            日志。
            </summary>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor">
            <summary>
            初始化 System.IO.FileExistsException 类的新实例，使其消息字符串设置为系统所提供的消息，其 HRESULT 设置为 COR_E_POINTER。
            </summary>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor(System.String)">
            <summary>
            初始化 System.IO.FileNotFoundException 类的新实例，使其消息字符串设置为 message，其 HRESULT 设置为 COR_E_POINTER。
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用指定的序列化和上下文信息初始化 System.IO.FileExistsException 类的新实例。
            </summary>
            <param name="info">用于序列化或反序列化文件的数据。</param>
            <param name="context">文件的源和目标。</param>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 System.IO.FileExistsException 类的新实例。
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor(System.String,System.String)">
            <summary>
            初始化 System.IO.FileNotFoundException 类的新实例，使其消息字符串设置为 message（用于指定无法找到的文件名），其 HRESULT 设置为 COR_E_POINTER。
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
            <param name="fileName">一个 System.String，它包含具有无效图像的文件的完整名称。		</param>
        </member>
        <member name="M:System.IO.FileExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 System.IO.FileExistsException 类的新实例。
            </summary>
            <param name="message">释异常原因的错误信息。</param>
            <param name="fileName">一个 System.String，它包含具有无效图像的文件的完整名称。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
        </member>
        <member name="M:System.IO.FileExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            设置带有文件名和附加异常信息的 System.Runtime.Serialization.SerializationInfo 对象。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:System.IO.FileExistsException.ToString">
            <summary>
            返回该异常的完全限定名，还可能返回错误信息、内部异常的名称和堆栈跟踪。
            </summary>
            <returns> 一个字符串，包含该异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪。</returns>
        </member>
        <member name="P:System.IO.FileExistsException.FileName">
            <summary>
            获取无法找到的文件的名称。
            </summary>
            <value>包含文件名的 System.String；或者，如果没有将文件名传递给此实例的构造函数，则为 null。</value>
        </member>
        <member name="P:System.IO.FileExistsException.FusionLog">
            <summary>
            获取日志文件，该文件描述加载程序集失败的原因。
            </summary>
            <value>一个 String，包含由程序集缓存报告的错误。</value>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="P:System.IO.FileExistsException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
            <returns>解释异常原因的错误消息或空字符串 ("")。</returns>
        </member>
        <member name="T:Py.RunTime.Thrower">
            <summary>
            用于抛出异常。
            </summary>
        </member>
        <member name="F:Py.RunTime.Thrower.DEBUG">
            <summary>
            调试标记。
            </summary>
        </member>
        <member name="F:Py.RunTime.Thrower.LIBSTD">
            <summary>
            检查参数的标记。
            </summary>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowObjectDisposedExceptionIf(System.Boolean,System.String)">
            <summary>
            如果满足条件，则触发异常。
            </summary>
            <param name="disposed">资源是否释放。</param>
            <param name="objectName">对象名字。</param>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.Object,System.String)">
            <summary>
            如果参数空，则触发异常。
            </summary>
            <param name="argument">参数。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.String,System.String)">
            <summary>
            如果参数空，则触发异常。
            </summary>
            <param name="argument">参数。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
            <exception cref="T:System.ArgumentException">参数空。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果参数空，则触发异常。
            </summary>
            <param name="c">条件。</param>
            <param name="paramName">参数名。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.Object,System.String,System.String)">
            <summary>
            如果参数空，则触发异常。
            </summary>
            <param name="argument">参数。</param>
            <param name="paramName">参数名。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowInvalidOperationExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="c">条件。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.InvalidOperationException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowIf(System.Boolean,Py.Core.Func{System.Exception})">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="c">条件。</param>
            <param name="e">获取异常的参数。</param>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowZlibExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="c">条件。</param>
            <param name="message">信息。</param>
            <exception cref="T:Py.Zip.Zlib.ZlibException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowZipExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="c">条件。</param>
            <param name="message">信息。</param>
            <exception cref="T:Py.Zip.ZipException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentOutOfRangeExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="p">条件。</param>
            <param name="paramName">参数名。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowOverflowExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="p">条件。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.OverflowException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentOutOfRangeExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="p">条件。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowNotSupportedExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="p">条件。</param>
            <param name="message">信息。</param>
            <exception cref="T:System.NotSupportedException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.ThrowArgumentExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果条件符合，则触发异常。
            </summary>
            <param name="p">条件。</param>
            <param name="message">信息。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentException">非法的操作。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.CheckArgumentException(System.Byte[],System.Int32,System.Int32)">
            <summary>
            检查参数是否合法。
            </summary>
            <param name="buffer">缓存。</param>
            <param name="offset">操作的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 或 <paramref name="count"/> 小于 0 。</exception>
            <exception cref="T:System.ArgumentException">偏移加上长度大于数据长度。</exception>
        </member>
        <member name="M:Py.RunTime.Thrower.CheckArgumentException``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            检查参数是否合法。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <param name="start">开始的位置。</param>
            <param name="end">结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:Py.RunTime.Thrower.CheckArgumentException(System.Array,System.Int32,System.Int32)">
            <summary>
            检查参数是否合法。
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <param name="count">复制的个数。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="T:Py.Zip.ZipFileSystemEntry">
            <summary>
            表示文件系统中的单元。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipFileSystemEntry.#ctor(Py.Zip.ZipFile,System.String,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipFileSystemEntry"/> 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="fileName">要操作的字符串。</param>
            <param name="isDirectory">如果 true ，则记为文件夹 。</param>
        </member>
        <member name="M:Py.Zip.ZipFileSystemEntry.#ctor(Py.Zip.ZipFile,System.String,System.String,System.Boolean)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="name">名字。</param>
            <param name="fileName">文件名。</param>
            <param name="isDirectory">如果 true ，则是文件夹。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="M:Py.Zip.ZipFileSystemEntry.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Zip.ZipFileSystemEntry.ExtractInternal(System.String,System.IO.Stream,Py.Core.OverwriteType,System.String)">
            <summary>
            解压文件。
            </summary>
            <param name="baseDir">源文件夹。</param>
            <param name="outstream">输出流。</param>
            <param name="overwrite">覆盖方式。</param>
            <param name="password">密码。</param>
        </member>
        <member name="M:Py.Zip.ZipFileSystemEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
            设置并返回输入流和长度。
            </summary>
            <param name="input">输入的流。</param>
            <returns>长度。</returns>
        </member>
        <member name="P:Py.Zip.ZipFileSystemEntry.FilePath">
            <summary>
            获取或设置文件路径。
            </summary>
            <seealso cref="P:Py.Zip.ZipFileSystemEntry.FileName"/>
        </member>
        <member name="P:Py.Zip.ZipFileSystemEntry.FileName">
            <summary>
            获取文件名。
            </summary>
        </member>
        <member name="T:Py.Zip.Zip64Option">
            <summary>
            保存Zip64时的选项。
            </summary>
        </member>
        <member name="F:Py.Zip.Zip64Option.Default">
            <summary>
            默认；相当于从不。
            </summary>
        </member>
        <member name="F:Py.Zip.Zip64Option.Never">
            <summary>
            不使用 ZIP64 扩展。
            </summary>
        </member>
        <member name="F:Py.Zip.Zip64Option.AsNecessary">
            <summary>
            需要时才使用。
            </summary>
        </member>
        <member name="F:Py.Zip.Zip64Option.Always">
            <summary>
            总是使用。
            </summary>
        </member>
        <member name="T:Py.Windows.Hotkey">
            <summary>
            提供设置系统热键功能。
            </summary>
        </member>
        <member name="M:Py.Windows.Hotkey.RegisterHotKey(System.IntPtr,System.UInt32,Py.Windows.Modifiers,System.Windows.Forms.Keys)">
            <summary>
            定义一个系统范围的热键。
            </summary>
            <param name="hWnd">接收热键产生WM_HOTKEY消息的窗口句柄。若该参数NULL，传递给调用线程的WM_HOTKEY消息必须在消息循环中中进行处理。</param>
            <param name="id">定义热键的标识符。调用线程中的其他热键不能使用同样的标识符。应用功能程序必须定义一个0X0000-0xBFFF范围的值。一个共享的动态链接库（DLL）必须定义一个0xC000-0xFFFF范围的值伯GlobalAddAtom函数返回该范围）。为了避免与其他动态链接库定义的热键冲突，一个DLL必须使用GlobalAddAtom函数获得热键的标识符。</param>
            <param name="fsModifiers">定义为了产生WM_HOTKEY消息而必须与由nVirtKey参数定义的键一起按下的键。</param>
            <param name="vk">定义热键的虚拟键码。</param>
            <returns></returns>
            <remarks>
            当某键被接下时，系统在所有的热键中寻找匹配者。一旦找到一个匹配的热键，系统将把WM_HOTKEY消息传递给登记了该热键的线程的消息队列。该消息被传送到队列头部，因此它将在下一轮消息循环中被移去。该函数不能将热键同其他线程创建的窗口关联起来。
            
             若为一热键定义的击键己被其他热键所定义，则RegisterHotKey函数调用失败。
            
            若hWnd参数标识的窗口已用与id参数定义的相同的标识符登记了一个热键，则参数fsModifiers和vk的新值将替代这些参数先前定义的值。
            </remarks>
        </member>
        <member name="M:Py.Windows.Hotkey.UnregisterHotKey(System.IntPtr,System.UInt32)">
            <summary>
            释放调用线程先前登记的热键。
            </summary>
            <param name="hWnd">与被释放的热键相关的窗口句柄。若热键不与窗口相关，则该参数为NULL。</param>
            <param name="id">定义被释放的热键的标识符。</param>
            <returns></returns>
        </member>
        <member name="M:Py.Windows.Hotkey.GlobalAddAtom(System.String)">
            <summary>
            在系统原子表中加入字符串。
            </summary>
            <param name="lpString">字符串。</param>
            <returns>唯一序列。</returns>
        </member>
        <member name="M:Py.Windows.Hotkey.GlobalDeleteAtom(System.UInt32)">
            <summary>
            在系统原子表中加入字符串。
            </summary>
            <param name="nAtom">唯一序列。</param>
            <returns>唯一序列。</returns>
        </member>
        <member name="M:Py.Windows.Hotkey.#ctor">
            <summary>
            初始化 <see cref="T:Py.Windows.Hotkey"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Windows.Hotkey.#ctor(System.IntPtr)">
            <summary>
            初始化 <see cref="T:Py.Windows.Hotkey"/> 的新实例。
            </summary>
            <param name="owner">注册窗口。</param>
        </member>
        <member name="M:Py.Windows.Hotkey.#ctor(System.Windows.Forms.Form)">
            <summary>
            初始化 <see cref="T:Py.Windows.Hotkey"/> 的新实例。
            </summary>
            <param name="owner">注册窗口。</param>
        </member>
        <member name="M:Py.Windows.Hotkey.RegisterHotKey(System.Windows.Forms.Keys,Py.Windows.Modifiers,Py.Core.Func{System.Boolean})">
            <summary>
            注册一个全局热键。
            </summary>
            <param name="key">键名。</param>
            <param name="kf">修饰符。</param>
            <param name="action">按键之后的处理函数。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:Py.Windows.Hotkey.UnregisterHotKey(System.Windows.Forms.Keys)">
            <summary>
            取消一个热键。
            </summary>
            <param name="key">注册的键。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hotkey.UnregisterHotKey(System.Windows.Forms.Keys,Py.Windows.Modifiers)">
            <summary>
            取消一个热键。
            </summary>
            <param name="key">注册的键。</param>
            <param name="kf">修饰符。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hotkey.UnregisterAllHotKeys">
            <summary>
            删除全部注册的热键。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hotkey.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            在调度消息之前将其筛选出来。
            </summary>
            <param name="m">要调度的消息。无法修改此消息。</param>
            <returns>
            如果筛选消息并禁止消息被调度，则为 true；如果允许消息继续到达下一个筛选器或控件，则为 false。
            </returns>
        </member>
        <member name="M:Py.Windows.Hotkey.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:Py.Web.Server">
            <summary>
            用于返回服务器的信息。
            </summary>
        </member>
        <member name="M:Py.Web.Server.MapPath(System.String)">
            <summary>
            返回与 Web 服务器上的指定虚拟路径相对应的物理文件路径。
            </summary>
            <param name="path">Web 服务器的虚拟路径。</param>
            <returns>与 path 相对应的物理文件路径。</returns>
        </member>
        <member name="M:Py.Web.Server.ToUrl(System.String)">
            <summary>
            将一个文件路径转换为等效的 URL 。
            </summary>
            <param name="path">文件位置。</param>
            <returns>URL。</returns>
        </member>
        <member name="M:Py.Web.Server.GetFullPath(System.Uri,System.String)">
            <summary>
            返回与 Web 服务器上的指定虚拟路径相对应的物理文件路径。
            </summary>
            <param name="page">页面位置。</param>
            <param name="url">相对位置。</param>
            <returns>与 page 相对应的网址。</returns>
        </member>
        <member name="P:Py.Web.Server.RootURI">
            <summary>
            取得网站的根目录的URL 。
            </summary>
            <returns>地址。</returns>
        </member>
        <member name="T:Py.RunTime.ReflectionHelper">
            <summary>
            反射帮助类。
            </summary>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetReflectionField(System.Object@,System.String)">
            <summary>
            获取反射对象的字段值。
            </summary>
            <param name="fieldName">要返回的字段名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回对象的字段值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetReflectionProperty(System.Object@,System.String)">
            <summary>
            获取反射对象的属性值。
            </summary>
            <param name="propertyName">要返回的属性名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>得到的值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetReflectionPropertyValue(System.Object@,System.String)">
            <summary>
            获取反射对象的属性值。
            </summary>
            <param name="propertyName">要返回的属性名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>得到的值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.SetPropertyValue(System.Object@,System.Reflection.PropertyInfo@,System.Object)">
            <summary>
            设置反射对象的属性值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="pi">属性。</param>
            <param name="propertyValue">属性值。</param>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.SetFieldValue(System.Object@,System.Reflection.FieldInfo@,System.Object)">
            <summary>
            设置反射对象的字段值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="field">字段[变量/域]。</param>
            <param name="fieldValue">字段值。</param>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.SetPropertyValue(System.Object@,System.String,System.Object)">
            <summary>
            设置反射对象的属性值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="propertyName">属性名。</param>
            <param name="propertyValue">属性值。</param>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.SetFieldValue(System.Object@,System.String,System.Object)">
            <summary>
            设置反射对象的字段值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="fieldn">字段名[变量/域]。</param>
            <param name="fieldValue">字段值。</param>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectFieldInfo(System.Object@,System.String)">
            <summary>
            获取反射对象的域[变量]。
            </summary>
            <param name="reflectionObj">反射的对象。</param>
            <param name="fieldName">域名。</param>
            <returns>字段信息。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectPropertyInfo(System.Object@,System.String)">
            <summary>
            获取反射对象的域。
            </summary>
            <param name="reflectionObj">反射的对象。</param>
            <param name="propertyName">域名。</param>
            <returns>字段信息。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectPropertyInfoList(System.Object@)">
            <summary>
            获取反射对象的所有属性。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回为public 声明的所有属性。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectPropertyInfoList(System.Object@,System.Reflection.BindingFlags)">
            <summary>
            获取反射对象的所有属性。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <param name="flagArgs">绑定标记。</param>
            <returns>
            返回根据flagArgs指定范围的所有属性，默认为所有public声明的所有属性。
            </returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectFieldInfoList(System.Object@)">
            <summary>
            获取反射对象的所有字段。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回为public 声明的所有字段。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.GetObjectFieldInfoList(System.Object@,System.Reflection.BindingFlags)">
            <summary>
            获取反射对象的所有字段。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <param name="flagArgs">绑定的标记。</param>
            <returns>
            返回根据flagArgs指定范围的所有字段，默认为所有public声明的所有字段。
            </returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.CreateInstance(System.String,System.String)">
            <summary>
            动态创建对象。
            </summary>
            <param name="assemblyName">创建对象的程序集名称。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.TryCreateInstance(System.String,System.String,System.Object@)">
            <summary>
            动态创建对象。
            </summary>
            <param name="assemblyName">创建对象的程序集名称。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <param name="value">值。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.CreateInstanceFormDll(System.String,System.String)">
            <summary>
            动态创建对象。
            </summary>
            <param name="path">创建对象的程序集文件。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.RunTime.ReflectionHelper.TryCreateInstanceFormDll(System.String,System.String,System.Object@)">
            <summary>
            动态创建对象。
            </summary>
            <param name="path">创建对象的程序集文件。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <param name="value">值。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:Py.IO.StreamBuffer">
            <summary>
            实现一个 <see cref="T:Py.IO.TextBuffer" />，使其以一种特定的编码从字节流中读取字符。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer._byteBuffer">
            <summary>
            缓存。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer._byteLen">
            <summary>
            字节长度。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer._decoder">
            <summary>
            解码。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer._encoding">
            <summary>
            编码。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer.Null">
            <summary>
            空流周围的 <see cref="T:Py.IO.StreamBuffer" />。
            </summary>
        </member>
        <member name="F:Py.IO.StreamBuffer._s">
            <summary>
            流。
            </summary>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.IO.Stream)">
            <summary>
            用指定的字节顺序标记检测选项，为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> 为 null。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.Uri)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="uri">载入的Uri。</param>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.Uri,System.Text.Encoding,System.Int32)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="uri">载入的Uri。</param>
            <param name="encoding">指定的编码。</param>
            <param name="bufferSize">载入缓存大小。</param>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.Uri,System.Int32)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="uri">载入的Uri。</param>
            <param name="bufferSize">载入缓存大小。</param>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.String)">
            <summary>
            为指定的文件名初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的新实例，带有指定的字节顺序标记检测选项。
            </summary>
            <param name="path">要读取的完整文件路径。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="path"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.IO.IOException">
            	<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.String,System.Text.Encoding)">
            <summary>
            为指定的文件名初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的新实例，带有指定的字符编码和字节顺序标记检测选项。
            </summary>
            <param name="path">要读取的完整文件路径。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            为指定的流初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。
            </summary>
            <param name="stream">要读取的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="bufferSize">最小缓冲区大小。</param>
            <exception cref="T:System.ArgumentException">流不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> 小于或等于零。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.#ctor(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            为指定的文件名初始化 <see cref="T:Py.IO.StreamBuffer"/> 类的新实例，带有指定字符编码、字节顺序标记检测选项和缓冲区大小。
            </summary>
            <param name="path">要读取的完整文件路径。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="path"/> 或 <paramref name="encoding"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> 小于或等于零。 </exception>
        </member>
        <member name="M:Py.IO.StreamBuffer.Dispose(System.Boolean)">
            <summary>
            关闭基础流，释放 <see cref="T:Py.IO.StreamBuffer"/> 使用的未托管资源，同时还可以根据需要释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:Py.IO.StreamBuffer.ReadBuffer">
            <summary>
            当被子类重写时，实现从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.IO.StreamBuffer.MarkReadBuffer">
            <summary>
            带标记从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="P:Py.IO.StreamBuffer.BaseStream">
            <summary>
            返回基础流。
            </summary>
            <value>流。</value>
            <returns>基础流。</returns>
        </member>
        <member name="P:Py.IO.StreamBuffer.CurrentEncoding">
            <summary>
            获取当前 <see cref="T:Py.IO.StreamBuffer"/> 对象正在使用的当前字符编码。
            </summary>
            <value>使用的当前字符编码。</value>
            <returns>当前读取器所使用的当前字符编码。第一次调用 <see cref="T:Py.IO.StreamBuffer"/> 的任何 <see cref="M:Py.IO.TextBuffer.Read"/> 方法后，该值可能会不同，因为直到第一次调用 <see cref="M:Py.IO.TextBuffer.Read"/> 方法时，才会进行编码的自动检测。</returns>
        </member>
        <member name="P:Py.IO.StreamBuffer.EndOfStream">
            <summary>
            获取一个值，该值表示当前的流位置是否在流的末尾。
            </summary>
            <returns>
            如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
            <exception cref="T:System.ObjectDisposedException">基础流已释放。</exception>
        </member>
        <member name="T:Py.Html.HtmlNameTable">
            <summary>
            原子化字符串对象表。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNameTable.#ctor">
            <summary>初始化 <see cref="T:Py.Html.HtmlNameTable" /> 类的新实例。</summary>
        </member>
        <member name="M:Py.Html.HtmlNameTable.Add(System.String)">
            <summary>当在派生类中被重写时，将指定的字符串原子化并将其添加到 HtmlNameTable。</summary>
            <returns>新的原子化字符串；如果已存在原子化字符串，则为此现有的原子化字符串。</returns>
            <param name="array">要添加的名称。 </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> 为 null。 </exception>
        </member>
        <member name="M:Py.Html.HtmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
            <summary>当在派生类中被重写时，将指定的字符串原子化并将其添加到 HtmlNameTable。</summary>
            <returns>新的原子化字符串；如果已存在原子化字符串，则为此现有的原子化字符串。如果 length 为零，则返回 String.Empty。</returns>
            <param name="array">包含要添加的名称的字符数组。 </param>
            <param name="offset">数组中指定名称第一个字符的从零开始的索引。 </param>
            <param name="length">名称中的字符数。 </param>
            <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />- 或 - <paramref name="offset" /> &gt;= <paramref name="array" />.Length - 或 - <paramref name="length" /> &gt; <paramref name="array" />.Length 如果 <paramref name="length" /> =0，则上述条件不会导致引发异常。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> &lt; 0. </exception>
        </member>
        <member name="M:Py.Html.HtmlNameTable.Get(System.String)">
            <summary>当在派生类中被重写时，获取与指定的字符串包含相同值的原子化字符串。</summary>
            <returns>原子化字符串；如果字符串尚未原子化，则为 null。</returns>
            <param name="array">要查找的名称。 </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> 为 null。 </exception>
        </member>
        <member name="M:Py.Html.HtmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>当在派生类中被重写时，获取与给定数组中指定范围的字符包含相同字符的原子化字符串。</summary>
            <returns>原子化字符串；如果字符串尚未原子化，则为 null。如果 <paramref name="length" /> 为零，则返回 String.Empty。</returns>
            <param name="array">包含要查找的名称的字符数组。 </param>
            <param name="offset">数组中指定名称第一个字符的从零开始的索引。 </param>
            <param name="length">名称中的字符数。 </param>
            <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />- 或 - <paramref name="offset" /> &gt;= <paramref name="array" />.Length - 或 - <paramref name="length" /> &gt; <paramref name="array" />.Length 如果 <paramref name="length" /> =0，则上述条件不会导致引发异常。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> &lt; 0. </exception>
        </member>
        <member name="T:Py.Html.HtmlAttribute">
            <summary>
            表示一个属性。此属性的有效值和默认值在文档类型定义 (DTD) 或架构中进行定义。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlAttribute._name">
            <summary>
            信息。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlAttribute.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlAttribute" /> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀。</param>
            <param name="localName">属性的本地名称。</param>
            <param name="namespaceURI">命名空间统一资源标识符 (URI)。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlAttribute.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <returns>重复的节点。</returns>
            <param name="deep">
            如果为 true，则以递归方式克隆指定节点下的子树；如果为 false，则只克隆节点本身。</param>
        </member>
        <member name="M:Py.Html.HtmlAttribute.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点的所有子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlAttribute.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlAttribute.BaseURI">
            <summary>
            获取节点的基统一资源标识符 (URI)。
            </summary>
            <returns>从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。属性节点与它们的所有者元素具有相同的基 URI。如果属性节点没有所有者元素，则 BaseURI 返回 String.Empty。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>移除了前缀的属性节点的名称。在下面的 &lt;book bk:genre= 'novel'&gt; 示例中，属性的 LocalName 是 genre。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>属性节点的限定名。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.NamespaceURI">
            <summary>
            获取该节点的命名空间 URI。
            </summary>
            <returns>该节点的命名空间 URI。如果没有显式地为属性指定一个命名空间，则该属性返回 String.Empty。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>HtmlAttribute 节点的节点类型是 HtmlNodeType.Attribute。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.OwnerDocument">
            <summary>
            获取该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>一个 <see cref="T:Py.Html.HtmlDocument" />。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.OwnerElement">
            <summary>
            获取该属性所属的 <see cref="T:Py.Html.HtmlElement" />。
            </summary>
            <returns>该属性所属的 HtmlElement；如果该属性不是 HtmlElement 的一部分，则为 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.ParentNode">
            <summary>
            获取该节点的父级。对于 HtmlAttribute 节点，该属性总是返回 null。
            </summary>
            <returns>对于 HtmlAttribute 节点，该属性总是返回 null。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.Prefix">
            <summary>
            获取或设置该节点的命名空间前缀。
            </summary>
            <returns>该节点的命名空间前缀。如果没有前缀，则该属性返回 String.Empty。</returns>
            <exception cref="T:System.ArgumentException">该节点是只读的。</exception>
            <exception cref="T:Py.Html.HtmlException">指定的前缀包含无效字符。指定的前缀格式不正确。该节点的 namespaceURI 为 null。指定的前缀为“xml”，而该节点的 namespaceURI 与“http://www.w3.org/HTML/1998/namespace”不同。该节点是一个属性，指定的前缀为“xmlns”，并且该节点的 namespaceURI 与“http://www.w3.org/2000/xmlns/”不同。该节点是一个属性，并且该节点的 qualifiedName 是“xmlns”[Namespaces]。</exception>
        </member>
        <member name="P:Py.Html.HtmlAttribute.Specified">
            <summary>
            获取一个值，该值指示是否显式设置了属性值。
            </summary>
            <returns>
            如果在原始实例文档中显式地为该属性给定一个值，则为 true；否则为 false 。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.InnerText">
            <summary>
            获取或设置节点及其所有子节点的串联值。
            </summary>
            <returns>节点及其所有子节点的串联值。</returns>
        </member>
        <member name="P:Py.Html.HtmlAttribute.NodeValue">
            <summary>
            获取或设置节点的值。
            </summary>
            <returns>返回的值取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType"/>。对于 HtmlAttribute 节点，此属性是属性的值。</returns>
            <exception cref="T:System.ArgumentException">该节点是只读节点，但调用了设置操作。</exception>
        </member>
        <member name="T:Py.Html.HtmlFormElement">
            <summary>
            表示一个 form 标签。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlFormElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlFormElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlFormElement.Submit">
            <summary>
            提交当前的表单。
            </summary>
            <returns>返回响应。</returns>
        </member>
        <member name="M:Py.Html.HtmlFormElement.Submit(System.Net.HttpWebRequest)">
            <summary>
            提交当前的表单。
            </summary>
            <param name="req">处理的表单。</param>
            <returns>返回响应。</returns>
        </member>
        <member name="M:Py.Html.HtmlFormElement.Reset">
            <summary>
            重置当前的表单。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlFormElement.GetData">
            <summary>
            返回用于提交的数据。
            </summary>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Html.HtmlFormElement.GetData(System.IO.StreamWriter,System.String)">
            <summary>
            返回用于提交的数据。
            </summary>
            <param name="s">写入的流。</param>
            <param name="boundary">分隔字符。</param>
        </member>
        <member name="M:Py.Html.HtmlFormElement.CreateRequest">
            <summary>
            创建一个请求，不额外处理数据， 这个请求用于提交当前表单内容。
            </summary>
            <returns>请求的对象。</returns>
        </member>
        <member name="P:Py.Html.HtmlFormElement.AcceptCharset">
            <summary>
            获取或设置当前表单支持的字符集。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Action">
            <summary>
            获取或设置当前表单的动作。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Encoding">
            <summary>
            获取或设置当前表单的编码。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Length">
            <summary>
            获取当前表单所有输入元素的个数。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Method">
            <summary>
            获取或设置当前表单的提交方式。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Enctype">
            <summary>
            获取或设置当前表单的编码方式。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlFormElement.Target">
            <summary>
            获取或设置当前表单提交的方式。
            </summary>
        </member>
        <member name="T:Py.Collections.ObjectModel.Set`1">
            <summary>
            为不含重复元素的集合提供基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Py.Collections.ObjectModel.Set`1.OnAddItem(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <returns>继续添加返回 true， 否则返回 false 。</returns>
        </member>
        <member name="T:Py.Windows.Win32Client">
            <summary>
            为 Windows 程序提供函数。
            </summary>
        </member>
        <member name="M:Py.Windows.Win32Client.SendKey(System.String)">
            <summary>
            向活动应用程序发送击键。
            </summary>
            <param name="keys">要发送的击键字符串。</param>
            <remarks>
            关于参数见 <see href="ms-help://MS.VSCC.v90/MS.MSDNQTR.v90.chs/fxref_system.windows.forms/html/f07a526d-2af7-758a-b335-b7ca34552b93.htm"/>
            </remarks>
            <exception cref="T:System.ArgumentException">keys 并不表示有效击键</exception>
        </member>
        <member name="M:Py.Windows.Win32Client.SendKeyWait(System.String)">
            <summary>
            向活动应用程序发送给定的键，然后等待消息被处理。
            </summary>
            <param name="keys">要发送的击键字符串。</param>
            <exception cref="T:System.ArgumentException">keys 并不表示有效击键</exception>
        </member>
        <member name="M:Py.Windows.Win32Client.Activate(System.IntPtr)">
            <summary>
            激活指定的窗口。
            </summary>
            <param name="hWnd">窗口。</param>
            <returns>成功返回 true， 否则返回false。 </returns>
        </member>
        <member name="M:Py.Windows.Win32Client.ActivateWait(System.IntPtr)">
            <summary>
            激活指定的窗口。如果窗口任未激活，将一直等待直到激活成功。
            </summary>
            <param name="hWnd">The h WND.</param>
        </member>
        <member name="M:Py.Windows.Win32Client.WaitActive(System.String)">
            <summary>
            等待指定窗口出现。
            </summary>
            <param name="lpWindowName">搜索的窗口名。</param>
            <returns>找到的窗口。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.IsActived(System.IntPtr)">
            <summary>
            获取一个值，该值指示指定的窗口是否被激活。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <returns>如果被激活，返回 true 。 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetScreenshots">
            <summary>
            截取整个屏幕并返回。
            </summary>
            <returns>位图。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetScreenshots(System.Drawing.Rectangle)">
            <summary>
            截取一个区域的屏幕，同时返回。
            </summary>
            <param name="rect">要截取的区域。</param>
            <returns>位图。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetScreenshots(System.Windows.Forms.Control)">
            <summary>
            截取一个控件所在区域的屏幕，同时返回。
            </summary>
            <param name="c">要截取的区域。</param>
            <returns>位图。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.LoadDelegate(System.String,System.String,System.Type)">
            <summary>
            从一个非托管的动态链接库中载入一个函数。
            </summary>
            <param name="dllFilePath">要载入的文件名。</param>
            <param name="fName">要载入的函数节点名。</param>
            <param name="t">要转换的委托类型。</param>
            <returns>获取的委托。 如获取失败 返回 null 。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.EnableTaskManager(System.Nullable{System.Boolean})">
            <summary>
            设置启用或禁用 任务管理器 。
            </summary>
            <param name="enable">如果为 null ，则不设置。 如果为 false , 禁用 ，如果为 true ,启用。</param>
            <exception cref="T:System.UnauthorizedAccessException">权限不够。</exception>
        </member>
        <member name="M:Py.Windows.Win32Client.FindWindow(System.String)">
            <summary>
            获得一个顶层窗口的句柄，该窗口的类名和窗口名与给定的字符串相匹配。
            </summary>
            <param name="lpWindowName">指向一个指定了窗口名（窗口标题）的空结束字符串。如果该参数为空，则为所有窗口全匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为NULL。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.FindWindow(System.Predicate{System.String})">
            <summary>
            获得一个顶层窗口的句柄，该窗口的类名和窗口名与给定的条件匹配。
            </summary>
            <param name="predicate">要匹配的条件。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为NULL。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.FindControl(System.IntPtr,System.String,System.String)">
            <summary>
            获得一个窗口的句柄，该窗口的类名和窗口名与给定的字符串相匹配。这个函数查找子窗口，从排在给定的子窗口后面的下一个子窗口开始。在查找时不区分大小写。
            </summary>
            <param name="window">要查找子窗口的父窗口句柄。如果hwnjParent为NULL，则函数以桌面窗口为父窗口，查找桌面窗口的所有子窗口。 如果hwndParent是HWND_MESSAGE，函数仅查找所有消息窗口。</param>
            <param name="lpClassName">指向一个指定了类名的空结束字符串，或一个标识类名字符串的成员的指针。如果该参数为一个成员，则它必须为前次调用theGlobaIAddAtom函数产生的全局成员。该成员为16位，必须位于lpClassName的低16位，高位必须为0。</param>
            <param name="lpWindowName">指向一个指定了窗口名（窗口标题）的空结束字符串。如果该参数为 NULL，则为所有窗口全匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄。如果函数失败，返回值为NULL。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            加亮任务栏。这意味着窗口的标题和说明文字会发生变化，似乎从活动切换到非活动状态、或反向切换。通常对不活动的窗口应用这个函数，引起用户的注意。
            </summary>
            <param name="hWnd">要闪烁显示的窗口的句柄。</param>
            <param name="bInvert">表示切换窗口标题；FALSE返回最初状态。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetTaskbarWindow">
            <summary>
            返回任务栏的句柄。
            </summary>
            <returns>任务栏的句柄。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetActivedWindow">
            <summary>
            返回当前激活的窗口。
            </summary>
            <returns>窗口句柄。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetDesktopWindow">
            <summary>
            返回桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是一个要在其上绘制所有的图标和其他窗口的区域。
            </summary>
            <returns>桌面窗口的句柄。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.IsPressed(System.Windows.Forms.Keys)">
            <summary>
            检取指定虚拟键的状态。该状态指定此键是UP状态，DOWN状态，还是被触发的（开关每次按下此键时进行切换）。
            </summary>
            <param name="virtKey">定义一虚拟键。若要求的虚拟键是字母或数字（A～Z，a～z或0～9），nVirtKey必须被置为相应字符的ASCII码值，对于其他的键，nVirtKey必须是一虚拟键码。若使用非英语键盘布局，则取值在ASCIIa～z和0～9的虚拟键被用于定义绝大多数的字符键。例如，对于德语键盘格式，值为ASCII0（OX4F）的虚拟键指的是"0"键，而VK_OEM_1指"带变音的0键"</param>
            <returns>
            如果键被 DOWN 返回 true ， 否则返回 false 。
            </returns>
            <remarks>
            本函数为 API 的扩展。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32Client.Click(System.Int32,System.Int32)">
            <summary>
            模拟一次鼠标的点击。
            </summary>
            <param name="x">点击的水平位置。</param>
            <param name="y">点击的垂直位置。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.DoubleClick(System.Int32,System.Int32)">
            <summary>
            模拟鼠标双击。
            </summary>
            <param name="x">点击的水平位置。</param>
            <param name="y">点击的垂直位置。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.RightClick(System.Int32,System.Int32)">
            <summary>
            模拟一次鼠标右击。
            </summary>
            <param name="x">点击的水平位置。</param>
            <param name="y">点击的垂直位置。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.MouseEvent(Py.Windows.MouseEventFlag,System.Int32,System.Int32)">
            <summary>
            综合鼠标击键和鼠标动作。
            </summary>
            <param name="mef">指定点击按钮和鼠标动作方式。</param>
            <param name="dx">鼠标沿x轴的绝对位置或者从上次鼠标事件产生以来移动的数量，依赖于MOOSEEVENTF_ABSOLOTE的设置。给出的绝对数据作为鼠标的实际X坐标；给出的相对数据作为移动的mickeys数。一个mickey表示鼠标移动的数量，表明鼠标已经移动。</param>
            <param name="dy">鼠标沿y轴的绝对位置或者从上次鼠标事件产生以来移动的数量，依赖于MOOSEEVENTF_ABSOLVTE的设置。给出的绝对数据作为鼠标的实际y坐标，给出的相对数据作为移动的mickeys数。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.MouseMove(Py.Core.Func{System.Int32,System.Int32},Py.Core.Func{System.Int32,System.Int32},System.Predicate{System.Int32},System.Int32)">
            <summary>
            使鼠标于一个区域运动。
            </summary>
            <param name="x">返回 x 位置的函数， 参数为计时器的时间 。</param>
            <param name="y">返回 y 位置的函数， 参数为计时器的时间 。</param>
            <param name="stop">确定是否停止运行， 参数为计时器的时间 。</param>
            <param name="p">间隔步骤。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.SetInterval(System.Predicate{System.Int32},System.Int32,System.Action{System.Int32})">
            <summary>
            设置每隔一定时间运行某个函数。
            </summary>
            <param name="fn">每次运行委托， 参数为运行时间， 返回是否停止。</param>
            <param name="timeout">时间间隔。</param>
            <param name="callBack">函数执行后的回调函数。该函数结束参数，表示运行的次数。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.MouseWheel(System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟鼠标滚动。
            </summary>
            <param name="x">点击的水平位置。</param>
            <param name="y">点击的垂直位置。</param>
            <param name="data">滚动大小。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.GetWindowText(System.IntPtr)">
            <summary>
            获取窗口的标题条文本（如果存在）。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <returns>标题。如果失败 返回 null 。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetWindowText(System.IntPtr,System.Int32)">
            <summary>
            获取窗口的标题条文本（如果存在）。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="capacity">最大的容量。</param>
            <returns>标题。如果失败 返回 null 。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.ToggleDesktop">
            <summary>
            显示桌面。
            </summary>
        </member>
        <member name="M:Py.Windows.Win32Client.SetWindowText(System.IntPtr,System.String)">
            <summary>
            改变指定窗口的标题栏的文本内容（如果窗口有标题栏）。如果指定窗口是一个控制，则改变控制的文本内容。然而，SetWindowText函数不改变其他应用程序中的控制的文本内容。
            </summary>
            <param name="hWnd">要改变文本内容的窗口或控制的句柄。</param>
            <param name="windowText">指向一个空结束的字符串的指针，该字符串将作为窗口或控制的新文本。</param>
            <returns>如果函数成功，返回值为非零；如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.SetWindowState(System.IntPtr,Py.Windows.WindowState)">
            <summary>
            设置指定窗口的显示状态。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="showCmd">指定窗口如何显示。如果发送应用程序的程序提供了STARTUPINFO结构，则应用程序第一次调用ShowWindow时该参数被忽略。否则，在第一次调用ShowWindow函数时，该值应为在函数WinMain中nCmdShow参数。</param>
            <returns>如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.GetBound(System.IntPtr)">
            <summary>
            返回窗口的边框矩形的尺寸。该尺寸以相对于屏幕坐标左上角的屏幕坐标给出。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.SetBound(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            改变指定窗口的位置和尺寸。对于顶层窗口，位置和尺寸是相对于屏幕的左上角的：对于子窗口，位置和尺寸是相对于父窗口客户区的左上角坐标的。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="rect">指向一个RECT结构的指针，该结构接收窗口的左上角和右下角的屏幕坐标。</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32Client.Slide(System.IntPtr,System.Drawing.Rectangle,System.Int32,System.Action{System.Int32})">
            <summary>
            在指定时间中改变控件大小，位置。
            </summary>
            <param name="hWnd">窗口。</param>
            <param name="rect">目标大小位置。</param>
            <param name="time">使用的时间。</param>
            <param name="callBack">函数执行后的回调函数。该函数结束参数，表示运行的次数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">times 超过范围。</exception>
        </member>
        <member name="M:Py.Windows.Win32Client.SlideX(System.IntPtr,System.Drawing.Rectangle,System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            修改控件大小，位置，处理用户的操作。
            </summary>
            <param name="hWnd">窗口。</param>
            <param name="rect">目标大小位置。</param>
            <param name="time">使用的时间。</param>
            <param name="timeout">每次移动间隔。</param>
            <param name="callBack">函数执行后的回调函数。该函数结束参数，表示运行的次数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">times 超过范围。</exception>
        </member>
        <member name="M:Py.Windows.Win32Client.Click(System.IntPtr,System.Boolean)">
            <summary>
            单击某个控件。
            </summary>
            <param name="hWnd">窗口的句柄。</param>
            <param name="active">是否先激活，然后继续点击。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.Shake(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            抖动某个窗口。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="s">抖动速度。默认 1 。</param>
            <param name="l">抖动范围。默认 8 。</param>
            <param name="t">持续次数。默认 9 。 </param>
            <param name="callBack">函数执行后的回调函数。该函数结束参数，表示运行的次数。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.SetRunOnStart(System.Boolean)">
            <summary>
            设置一个软件在 Windows 启动后自动执行。
            </summary>
            <param name="set">仅当值为true， 设置开机启动</param>
        </member>
        <member name="M:Py.Windows.Win32Client.SetRunOnStart(System.String,System.String,System.Boolean,Py.Windows.RunMethod)">
            <summary>
            设置一个软件在 Windows 启动后自动执行。
            </summary>
            <param name="filePath">要启动的程序位置。</param>
            <param name="name">要设置的名字。</param>
            <param name="set">仅当值为true， 设置开机启动</param>
            <param name="rm">启动的位置。</param>
        </member>
        <member name="M:Py.Windows.Win32Client.GetFileType(System.String)">
            <summary>
            根据扩展名获得该类型的描述。
            </summary>
            <param name="filePath">文件名。</param>
            <returns>字符串。</returns>
        </member>
        <member name="T:Py.Windows.NativeFileInfos">
            <summary>
            表示一个文件信息。
            </summary>
        </member>
        <member name="M:Py.Windows.NativeFileInfos.GetFileInfo(System.String,System.Int32,System.Int32,Py.Windows.GetFileInfoFlags)">
            <summary>
            获取文件信息。
            </summary>
            <param name="pszPath">位置。</param>
            <param name="dwFileAttributes">属性。</param>
            <param name="cbFileInfo">文件信息。</param>
            <param name="uFlags">标记。</param>
            <returns>成功返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Windows.NativeFileInfos.SHGetFileInfo(System.String,System.Int32,Py.Windows.NativeFileInfos@,System.Int32,Py.Windows.GetFileInfoFlags)">
            <summary>
            获取文件信息。
            </summary>
            <param name="pszPath">位置。</param>
            <param name="dwFileAttributes">属性。</param>
            <param name="psfi">信息属性。</param>
            <param name="cbFileInfo">文件信息。</param>
            <param name="uFlags">标记。</param>
            <returns>成功返回 true， 否则返回 false 。</returns>
        </member>
        <member name="F:Py.Windows.NativeFileInfos.hIcon">
            <summary>
            图标。
            </summary>
        </member>
        <member name="F:Py.Windows.NativeFileInfos.iIcon">
            <summary>
            本地图标。
            </summary>
        </member>
        <member name="F:Py.Windows.NativeFileInfos.dwAttributes">
            <summary>
            属性。
            </summary>
        </member>
        <member name="F:Py.Windows.NativeFileInfos.szDisplayName">
            <summary>
            显示名。
            </summary>
        </member>
        <member name="F:Py.Windows.NativeFileInfos.szTypeName">
            <summary>
            类型名。
            </summary>
        </member>
        <member name="T:Py.Core.ErrorEventArgs">
            <summary>
            产生错误事件的参数。
            </summary>
        </member>
        <member name="F:Py.Core.ErrorEventArgs._error">
            <summary>
            发生错误的异常。
            </summary>
        </member>
        <member name="F:Py.Core.ErrorEventArgs._message">
            <summary>
            发生错误的异常信息。
            </summary>
        </member>
        <member name="M:Py.Core.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            使用相关错误信息生成新的 Py.Core.ErrorEventArgs 实例。
            </summary>
            <param name="e">错误产生的异常</param>
        </member>
        <member name="M:Py.Core.ErrorEventArgs.#ctor(System.String)">
            <summary>
            使用相关错误信息生成新的 Py.Core.ErrorEventArgs 实例。
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:Py.Core.ErrorEventArgs.#ctor(System.Exception,System.String)">
            <summary>
            使用相关错误信息生成新的 Py.Core.ErrorEventArgs 实例。
            </summary>
            <param name="e">错误产生的异常</param>
            <param name="message">错误信息</param>
        </member>
        <member name="P:Py.Core.ErrorEventArgs.Error">
            <summary>
            获取产生错误的异常。
            </summary>
            <value>这个值可空。</value>
        </member>
        <member name="P:Py.Core.ErrorEventArgs.Message">
            <summary>
            获取产生错误的异常信息。
            </summary>
        </member>
        <member name="T:Py.Core.ValueChangedEventArgs`1">
            <summary>
            表示一个值改变造成的事件参数。
            </summary>
            <typeparam name="T">类型。</typeparam>
        </member>
        <member name="F:Py.Core.ValueChangedEventArgs`1._from">
            <summary>
            初始值。
            </summary>
        </member>
        <member name="F:Py.Core.ValueChangedEventArgs`1._to">
            <summary>
            变化值。
            </summary>
        </member>
        <member name="M:Py.Core.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            初始化 <see cref="T:Py.Core.ValueChangedEventArgs`1"/> 的新实例。
            </summary>
            <param name="from">初始值。</param>
            <param name="to">变化值。</param>
        </member>
        <member name="P:Py.Core.ValueChangedEventArgs`1.From">
            <summary>
            获取初始的值。
            </summary>
        </member>
        <member name="P:Py.Core.ValueChangedEventArgs`1.To">
            <summary>
            获取变化后的值。
            </summary>
        </member>
        <member name="T:Py.Core.ForEachAction`1">
            <summary>
            用于 ForEach 的参数。
            </summary>
            <param name="value">值。</param>
            <param name="index">表示循环次数的索引。</param>
            <returns>继续执行返回true，否则false。</returns>
        </member>
        <member name="T:Py.Core.EqualityComparison`1">
            <summary>
            表示比较同一类型的两个对象的方法。
            </summary>
            <typeparam name="T">要比较的对象的类型。</typeparam>
            <param name="x"> 要比较的第一个对象。</param>
            <param name="y">要比较的第二个对象。</param>
            <returns>如果 <paramref name="x"/> 和 <paramref name="y"/> 相同，返回 true， 否则返回 false。</returns>
        </member>
        <member name="T:Py.Core.Func`1">
            <summary>
            表示一个根据一个函数传回返回值的委托。
            </summary>
            <typeparam name="TResult">返回类型。</typeparam>
            <returns>返回值。</returns>
        </member>
        <member name="T:Py.Core.Func`2">
            <summary>
            表示一个根据一个函数传回返回值的委托。
            </summary>
            <typeparam name="TResult">返回值类型。</typeparam>
            <typeparam name="K">参数的类型。</typeparam>
            <param name="p">参数。</param>
            <returns>返回值。</returns>
        </member>
        <member name="T:Py.Core.Func`3">
            <summary>
            表示一个根据一个函数传回返回值的委托。
            </summary>
            <typeparam name="TResult">返回值类型。</typeparam>
            <typeparam name="K">参数的类型。</typeparam>
            <typeparam name="R">参数的类型。</typeparam>
            <param name="p">参数。</param>
            <param name="r">第二个参数。</param>
            <returns>返回值。</returns>
        </member>
        <member name="T:Py.Core.Action">
            <summary>
            表示一个无参数不返回值的函数。
            </summary>
        </member>
        <member name="T:Py.Core.ValueChangedEventHandler`1">
            <summary>
            值改变的委托。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="sender">事件发生者。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:Py.Core.ErrorEventHandler">
            <summary>
            表示将处理出现错误的事件的方法。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">错误事件参数实例。</param>
        </member>
        <member name="T:Py.Core.ErrorEventHandler`1">
            <summary>
            表示将处理出现错误的事件的方法。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">错误事件参数实例。</param>
        </member>
        <member name="T:Py.RunTime.Arithmetic">
            <summary>
            读算式辅助工具。
            </summary>
            <remarks>
            要求表达式以空格作为分隔符
            转换表达式折分为：
            变量及数值 ,变量不允许为@
            字符串“”
            运算符号{+、-、*、/、++、+=、--、-=、*=、/=、!、!=、&gt;、&gt;=、&gt;&gt;、&lt;、&lt;=、&lt;&gt;、|、|=、||、&amp;、&amp;=、&amp;&amp;}
            括号{包括(、)}
            
            <example>
            以下示例演示了如何使用 Arithmetic 计算表达式。
            <code>
            using System;
            using Py.RunTime;
            
            class Sample{
            
                public static void Main(){
                    Arithmetic calc = new Arithmetic();
                    double result = (double)calc.Compute("1 + 2sin 4");
                    Console.Write(result);
                    Console.Read();
                }
            }
            </code>
            一个表达式中的函数可自定义。
            以下演示了如何自定义函数。
            <code>
            using System;
            using Py.RunTime;
            
            class Sample{
            
                public static void Main(){
                    Arithmetic calc = new Arithmetic();
                    calc.Operators.Add(new Arithmetic.FunctionCallOperator("in", v => v + 1);
                    double result = (double)calc.Compute("1 + in 4");
                    Console.Write(result); //  1 + ( 4 + 1 ) == 6
                    Console.Read();
                }
            }
            </code>
            </example>
            默认计算器直接支持 Boolean Int32 Double Char String 这 4 个类型。因此下列表达式合法:
            1 + ( 2 == 2 )   // 2
            "1" + 'd'  //  "1d"
            true || false // true
            </remarks>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ParseExpression(System.String)">
            <summary>
            表达式分割为列表形式。
            </summary>
            <param name="ex">表达式。</param>
            <returns>表达式。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> 为空。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ConvertToPostfix(System.Collections.Generic.List{Py.RunTime.Arithmetic.Token})">
            <summary>
            中缀表达式转换为后缀表达式。
            </summary>
            <param name="ex">表达式。</param>
            <returns>表达式。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ComputePostfix(System.Collections.Generic.List{Py.RunTime.Arithmetic.Token})">
            <summary>
            计算后缀表达式。
            </summary>
            <param name="expression">表达式。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">表达式不符合运算规则。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Compute(System.String)">
            <summary>
            计算表达式。
            </summary>
            <param name="expression">表达式。</param>
            <returns>计算的结果。</returns>
            <exception cref="T:Py.Core.SyntaxException">表达式不符合运算规则。</exception>
            <exception cref="T:System.ArithmeticException">表达式不符合运算规则。</exception>
            <exception cref="T:System.ArgumentNullException">表达式是空字符串。</exception>
            <exception cref="T:System.DivideByZeroException">被 0 除。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.#ctor">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic"/> 的新实例。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic._vars">
            <summary>
            当前的变量集合。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic._operators">
            <summary>
            操作符数组。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Setup">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.GetOperators(System.String)">
            <summary>
            根据名字获取操作符。
            </summary>
            <param name="name">名字。</param>
            <returns>操作符。</returns>
            <exception cref="T:Py.Core.SyntaxException">找不到需要的操作符。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ComputeExpression(System.String)">
            <summary>
            计算表达式。
            </summary>
            <param name="expression">表达式。</param>
            <returns>计算的结果。</returns>
            <exception cref="T:Py.Core.SyntaxException">表达式不符合运算规则。</exception>
            <exception cref="T:System.ArithmeticException">表达式不符合运算规则。</exception>
            <exception cref="T:System.ArgumentNullException">表达式是空字符串。</exception>
            <exception cref="T:System.DivideByZeroException">被 0 除。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Vars">
            <summary>
            获取当前的变量。
            </summary>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Operators">
            <summary>
            获取支持的操作符。
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> 为空。</exception>
        </member>
        <member name="T:Py.RunTime.Arithmetic.VarCollection">
            <summary>
            变量集合。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.VarCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.VarCollection.Item(System.String)">
            <summary>
            获取或设置指定名字的变量值。
            </summary>
            <param name="varName">变量名，不包括 $ 。</param>
            <returns>指定变量的值。</returns>
            <exception cref="T:System.ArithmeticException">变量不存在。</exception>
        </member>
        <member name="T:Py.RunTime.Arithmetic.Token">
            <summary>
            表示表达式。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.Token.Type">
            <summary>
            表达式的类型。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.Token.Value">
            <summary>
            表达式的值。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Token.ToString">
            <summary>
            返回该实例的完全限定类型名。
            </summary>
            <returns>
            包含完全限定类型名的 <see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Token.IsVar">
            <summary>
            获取当前表达式是否为变量。
            </summary>
        </member>
        <member name="T:Py.RunTime.Arithmetic.TokenType">
            <summary>
            表示一个表达式的类型。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Operator">
            <summary>
            操作符。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Var">
            <summary>
            变量。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Integer">
            <summary>
            整数。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Boolean">
            <summary>
            布尔。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Double">
            <summary>
            浮点数。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.String">
            <summary>
            字符串。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.Char">
            <summary>
            字符。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.LeftBucket">
            <summary>
            左括号。
            </summary>
        </member>
        <member name="F:Py.RunTime.Arithmetic.TokenType.RightBucket">
            <summary>
            右括号。
            </summary>
        </member>
        <member name="T:Py.RunTime.Arithmetic.Operator">
            <summary>
            表示一个操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.Operator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.OnError(System.Object,System.Object)">
            <summary>
            当计算发生错误时运行。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.Operator.OnError(System.Object)">
            <summary>
            当计算发生错误时运行。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>值。</returns>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Operator.Priority">
            <summary>
            获取或设置当前操作法的优先等级。
            </summary>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Operator.Name">
            <summary>
            获取或设置当前操作符的名字。
            </summary>
        </member>
        <member name="P:Py.RunTime.Arithmetic.Operator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
        </member>
        <member name="T:Py.RunTime.Arithmetic.ArithmeticOperator">
            <summary>
            表示四则计算的操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ArithmeticOperator.#ctor(System.String,System.Int32,Py.Core.Func{System.Int32,System.Int32,System.Int32},Py.Core.Func{System.Double,System.Double,System.Double})">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.ArithmeticOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
            <param name="intC">计算的委托。</param>
            <param name="doubleC">计算的委托。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="intC"/> 或 <paramref name="doubleC"/> 为空。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ArithmeticOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.ArithmeticOperator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.ArithmeticOperator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.RunTime.Arithmetic.BoolOperator">
            <summary>
            表示转为布尔的操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.BoolOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.Double,System.Double)">
            <summary>
            计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:System.DivideByZeroException">被 0 除。</exception>
            <exception cref="T:Py.Core.SyntaxException">不支持的运算符。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.Boolean,System.Boolean)">
             <summary>
             计算表达式的值。
             </summary>
            <param name="left">左值。</param>
             <param name="right">右值。</param>
             <returns>值。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.String,System.String)">
            <summary>
            计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.Int32,System.Int32)">
            <summary>
            计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:System.DivideByZeroException">被 0 除。</exception>
            <exception cref="T:Py.Core.SyntaxException">不支持的运算符。</exception>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BoolOperator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.BoolOperator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.RunTime.Arithmetic.BitOperator">
            <summary>
            表示位操作的操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BitOperator.#ctor(System.String,System.Int32,Py.Core.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.BitOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
            <param name="intC">返回计算结果的委托。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BitOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.BitOperator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.BitOperator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.RunTime.Arithmetic.SingleOperator">
            <summary>
            表示单表达式的操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.SingleOperator.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.SingleOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.SingleOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.SingleOperator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.SingleOperator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.RunTime.Arithmetic.FunctionCallOperator">
            <summary>
            表示调用一个函数的操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.FunctionCallOperator.#ctor(System.String,Py.Core.Func{System.Double,System.Double})">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.FunctionCallOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="fn">计算的委托。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.FunctionCallOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="T:Py.RunTime.Arithmetic.OtherOperator">
            <summary>
            表示其它操作符。
            </summary>
        </member>
        <member name="M:Py.RunTime.Arithmetic.OtherOperator.#ctor(System.String,System.Int32)">
            <summary>
            初始化 <see cref="T:Py.RunTime.Arithmetic.OtherOperator"/> 的新实例。
            </summary>
            <param name="name">名字。</param>
            <param name="priority">优先等级。</param>
        </member>
        <member name="M:Py.RunTime.Arithmetic.OtherOperator.Compute(System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="right">要计算的值。</param>
            <returns>计算的结果。</returns>
        </member>
        <member name="M:Py.RunTime.Arithmetic.OtherOperator.Compute(System.Object,System.Object)">
            <summary>
            通过当前操作符计算表达式的值。
            </summary>
            <param name="left">左值。</param>
            <param name="right">右值。</param>
            <returns>值。</returns>
            <exception cref="T:Py.Core.SyntaxException">无法计算。</exception>
        </member>
        <member name="P:Py.RunTime.Arithmetic.OtherOperator.IsSingle">
            <summary>
            获取指示当前操作符是否是单目操作的布尔值。
            </summary>
            <value></value>
        </member>
        <member name="T:Py.Html.HtmlCDataSection">
            <summary>
            表示 CDATA 节。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlCDataSection.#ctor(System.String,Py.Html.HtmlDocument)">
            <summary>初始化 <see cref="T:Py.Html.HtmlCDataSection" /> 类的新实例。</summary>
            <param name="data"></param>
            <param name="doc"></param>
        </member>
        <member name="M:Py.Html.HtmlCDataSection.CloneNode(System.Boolean)">
            <summary>
            创建此节点的一个副本。
            </summary>
            <param name="deep">如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。由于 CDATA 节点没有子级，因此不管参数的设置如何，克隆的节点都将始终包含数据内容。</param>
            <returns>克隆的节点。</returns>
            <exception cref="T:System.InvalidOperationException">在不能被克隆的节点类型上调用该方法。</exception>
        </member>
        <member name="M:Py.Html.HtmlCDataSection.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>将节点的子级保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。</summary>
            <param name="w">要保存到其中的 HtmlWriter。 </param>
        </member>
        <member name="M:Py.Html.HtmlCDataSection.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>将节点保存到指定的 <see cref="T:System.Web.UI.HtmlTextWriter"/> 中。</summary>
            <param name="w">要保存到其中的 HtmlWriter。 </param>
        </member>
        <member name="P:Py.Html.HtmlCDataSection.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>对于 CDATA 节点，本地名称是 #cdata-section。</returns>
        </member>
        <member name="P:Py.Html.HtmlCDataSection.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>对于 CDATA 节点，该名称为 #cdata-section。</returns>
        </member>
        <member name="P:Py.Html.HtmlCDataSection.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>节点类型。对于 CDATA 节点，该值是 HtmlNodeType.CDATA。</returns>
        </member>
        <member name="P:Py.Html.HtmlCDataSection.ParentNode">
            <summary>
            获取该节点（对于可以具有父级的节点）的父级。
            </summary>
            <value></value>
            <returns>为当前节点父级的 HtmlNode。如果节点刚刚创建还未添加到树中，或如果已从树中移除了节点，则父级为 null。对于所有其他节点，返回的值取决于节点的 <see cref="P:Py.Html.HtmlNode.NodeType"/>。下表描述 ParentNode 属性可能的返回值。NodeType ParentNode 的返回值 Attribute、Document、DocumentFragment、Entity、Notation 返回 null；这些节点不具有父级。CDATA 返回包含 CDATA 节的元素或实体引用。Comment 返回包含注释的元素、实体引用、文档类型或文档。DocumentType 返回文档节点。Element 返回该元素的父节点。如果该元素是树中的根节点，则父级是文档节点。EntityReference 返回包含该实体引用的元素、属性或实体引用。ProcessingInstruction 返回包含该处理指令的文档、元素、文档类型或实体引用。Text 返回包含该文本节点的父元素、属性或实体引用。</returns>
        </member>
        <member name="T:Py.Text.StringHelper">
            <summary>
            处理字符串的工具。
            </summary>
            <remarks>
            匹配字符串模式。
            {$Value:Expression} 表示一个匹配单元。 其中 Value 是单元名。 Expression 为匹配表达式。 如果 Expression 为空，则匹配任何值。
            {$Value#Expression} 表示一个匹配单元。 其中 Value 是单元名。 Expression 为子匹配表达式。 
            {Pattern} Pattern 不得用$开头， 表示一个正则表达式。
            <example>
            以下演示了匹配的示例：
            输入->"号码 1"   模式->"号码 {$号码}"   结果-> 号码="1"
            输入->"号码 1 和 -1"   模式->"号码 {$号码1} 和 {$号码2}"   结果-> 号码1="1"     号码2="-1"
            输入->"号码 1 和 -1"   模式->"号码 {$号码:{\d} 和 {\d}}"   结果-> 号码.$0="1"     号码.$1="-1"
            输入->"号码：3"   模式->"号码 {}"   结果-> 号码.$0="1"     号码.$1="-1"
            </example>
            字符{ 使用 {{ 代替。字符} 使用 }}代替。
            </remarks>
        </member>
        <member name="F:Py.Text.StringHelper._pattern">
            <summary>
            模式。
            </summary>
        </member>
        <member name="F:Py.Text.StringHelper._vars">
            <summary>
            当前全部变量。
            </summary>
        </member>
        <member name="M:Py.Text.StringHelper.#ctor">
            <summary>
            初始化 <see cref="T:Py.Text.StringHelper"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Text.StringHelper.#ctor(System.String)">
            <summary>
            使用指定的模式初始化 <see cref="T:Py.Text.StringHelper"/> 的新实例。
            </summary>
            <param name="pattern">进行匹配的模式。</param>
        </member>
        <member name="M:Py.Text.StringHelper.Match(System.String)">
            <summary>
            使用匹配指定的输入匹配现有的模式。
            </summary>
            <param name="input">用于匹配的字符串。</param>
            <returns>返回匹配是否成功。</returns>
        </member>
        <member name="M:Py.Text.StringHelper.Match(System.String,System.String)">
            <summary>
            匹配指定的输入和模式。
            </summary>
            <param name="input">用于匹配的字符串。</param>
            <param name="pattern">用于匹配的模式。</param>
            <returns>返回匹配是否成功。</returns>
            <exception cref="T:Py.Core.SyntaxException">模式语法错误。</exception>
        </member>
        <member name="M:Py.Text.StringHelper.Format(System.String)">
            <summary>
            使用当前的变量格式化字符串。
            </summary>
            <param name="input">输入字符串。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.IndexOutOfRangeException">格式化错误。</exception>
            <exception cref="T:System.NullReferenceException">参数为空。</exception>
        </member>
        <member name="M:Py.Text.StringHelper.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Text.StringHelper.Pattern">
            <summary>
            获取或设置当前的模式。
            </summary>
        </member>
        <member name="P:Py.Text.StringHelper.Item(System.String)">
            <summary>
            获取或设置指定名字的变量。
            </summary>
            <param name="name">变量名。</param>
            <returns>值。</returns>
        </member>
        <member name="P:Py.Text.StringHelper.Count">
            <summary>
            返回变量的个数。
            </summary>
        </member>
        <member name="P:Py.Text.StringHelper.Vars">
            <summary>
            获取当前的所有变量。
            </summary>
        </member>
        <member name="P:Py.Text.StringHelper.RegexOptions">
            <summary>
            获取或设置当前使用的正则选项。
            </summary>
        </member>
        <member name="T:Py.Core.Base.AssembyInfo">
            <summary>
            提供程序集信息处理。
            </summary>
        </member>
        <member name="F:Py.Core.Base.AssembyInfo.Name">
            <summary>
            当前的库文件名。
            </summary>
        </member>
        <member name="F:Py.Core.Base.AssembyInfo.By">
            <summary>
            获取类库版权信息。
            </summary>
        </member>
        <member name="F:Py.Core.Base.AssembyInfo.BY">
            <summary>
            xuld。
            </summary>
        </member>
        <member name="P:Py.Core.Base.AssembyInfo.Version">
            <summary>
            获取类库的版本。
            </summary>
        </member>
        <member name="P:Py.Core.Base.AssembyInfo.Path">
            <summary>
            获取当前库文件的位置。
            </summary>
        </member>
        <member name="P:Py.Core.Base.AssembyInfo.IsInWeb">
            <summary>
            获取一个值，指示当前程序是在 WebForm 还是 WinForm 运行。 
            </summary>
        </member>
        <member name="T:Py.Algorithm.Numerics.Complex">
            <summary>
            表示一个复数。
            </summary>
            <remarks>见 <see href="http://msdn.microsoft.com/zh-cn/library/system.numerics.complex.aspx"/> 。</remarks>
        </member>
        <member name="F:Py.Algorithm.Numerics.Complex.Zero">
            <summary>
            返回新的 Complex 实例，其实数和虚数都等于零。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Numerics.Complex.One">
            <summary>
            返回新的 Complex 实例，其实数等于一，虚数等于零。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Numerics.Complex.ImaginaryOne">
            <summary>
            返回新的 Complex 实例，其实数等于零，虚数等于一。
            </summary>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            使用指定的实数值和虚数值初始化 Complex 结构的新实例。
            </summary>
            <param name="real">复数的实部。</param>
            <param name="imaginary">复数的虚部。</param>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
            <summary>
            从点的极坐标创建复数。
            </summary>
            <param name="magnitude">量值，它是从原点（x 轴与 y 轴的交点）到数字的距离。</param>
            <param name="phase">相位，它是直线相对于水平轴的角度，以弧度为单位。</param>
            <returns>一个复数。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Negate(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的加法逆元。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 参数的 Real 和 Imaginary 部分乘以 -1 的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Add(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            从一个复数中减去另一个复数并返回结果。
            </summary>
            <param name="left">要从中减去的值（被减数）。</param>
            <param name="right">要减去的值（减数）。</param>
            <returns>right 减 left 所得的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Subtract(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            从一个复数中减去另一个复数。
            </summary>
            <param name="left">要从中减去的值（被减数）。</param>
            <param name="right">要减去的值（减数）。</param>
            <returns>right 减 left 所得的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Multiply(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            将两个指定复数相乘。
            </summary>
            <param name="left">要相乘的第一个值。</param>
            <param name="right">要相乘的第二个值。</param>
            <returns>left 与 right 的乘积。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Divide(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            用一个指定复数除另一个指定复数。
            </summary>
            <param name="dividend">要作为被除数的值。</param>
            <param name="divisor">要作为除数的值。</param>
            <returns>left 除以 right 的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_UnaryNegation(Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 - 。
            </summary>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Addition(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 + 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Subtraction(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 - 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Multiply(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 * 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Division(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 / 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Abs(Py.Algorithm.Numerics.Complex)">
            <summary>
            获取复数的绝对值（或量值）。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 的绝对值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Conjugate(Py.Algorithm.Numerics.Complex)">
            <summary>
            计算复数的共轭，并返回结果。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 的共轭。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Reciprocal(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回复数的乘法倒数。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 的倒数。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Equality(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 == 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Inequality(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            实现操作 != 。
            </summary>
            <param name="left">要计算的第一个值。</param>
            <param name="right">要计算的第二个值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Equals(System.Object)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="obj">要比较的另一个对象。</param>
            <returns>
            如果 <paramref name="obj"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Equals(Py.Algorithm.Numerics.Complex)">
            <summary>
            指示此实例与指定对象是否相等。
            </summary>
            <param name="value">值。</param>
            <returns>
            如果 <paramref name="value"/> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Int16)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Int16"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Int32)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Int32"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Int64)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Int64"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.UInt16)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.UInt16"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.UInt32)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.UInt32"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.UInt64)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.UInt64"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.SByte)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.SByte"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Byte)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Byte"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Single)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Single"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Implicit(System.Double)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Double"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的隐性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Explicit(Py.Algorithm.Numerics.BigInteger)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:Py.Algorithm.Numerics.BigInteger"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.op_Explicit(System.Decimal)~Py.Algorithm.Numerics.Complex">
            <summary>
            实现从 <see cref="T:System.Decimal"/> 到 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的显性的转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.ToString">
            <summary>
            将当前复数的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
            <returns>
            当前实例的采用笛卡尔形式的字符串表示形式。
            </returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.ToString(System.String)">
            <summary>
            通过对当前复数的实部和虚部使用指定格式，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
            <param name="format">标准或自定义的数值格式字符串。</param>
            <returns>当前实例的采用笛卡尔形式的字符串表示形式。</returns>
            <exception cref="T:System.FormatException"><paramref name="format"/>  不是有效的格式字符串。</exception>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.ToString(System.IFormatProvider)">
            <summary>
            通过对当前复数的实部和虚部使用指定格式和区域性特定格式信息，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>由 format 和 provider 指定的当前实例的采用笛卡尔形式的字符串表示形式。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>
            通过对当前复数的实部和虚部使用指定格式和区域性特定格式信息，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。
            </summary>
            <param name="format">标准或自定义的数值格式字符串。</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>由 format 和 provider 指定的当前实例的采用笛卡尔形式的字符串表示形式。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
            <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Sin(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的正弦值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 的正弦值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Sinh(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的双曲正弦值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>value 的双曲正弦值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Asin(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回表示指定复数的反正弦值的角度。
            </summary>
            <param name="value">一个复数。</param>
            <returns>表示 value 的反正弦值的角度。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Cos(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的双曲余弦值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的双曲余弦值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Cosh(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的双曲余弦值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的双曲余弦值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Acos(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回表示指定复数的反余弦值的角度。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的反余弦值的角度。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Tan(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的正切值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的正切值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Tanh(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的双曲正切值。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的双曲正切值。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Atan(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回表示指定复数的反正切值的角度。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的反正切值的角度。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Log(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的自然对数（底为 e）。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的自然对数（底为 e）。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Log(Py.Algorithm.Numerics.Complex,System.Double)">
            <summary>
            返回指定复数在使用指定底时的对数。
            </summary>
            <param name="value">一个复数。</param>
            <param name="baseValue">进行取对数的底。</param>
            <returns>复数 value 在使用指定底时的对数。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Log10(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数以 10 为底的对数。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 以 10 为底的对数。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Exp(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回 e 的由一个复数指定的次幂。
            </summary>
            <param name="value">一个复数。</param>
            <returns> e 的由一个复数 value 指定的次幂。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Sqrt(Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的平方根。
            </summary>
            <param name="value">一个复数。</param>
            <returns>复数 value 的平方根。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Pow(Py.Algorithm.Numerics.Complex,Py.Algorithm.Numerics.Complex)">
            <summary>
            返回指定复数的由复数指定的次幂。
            </summary>
            <param name="value">要对其求幂的复数。</param>
            <param name="power">指定幂的双精度浮点数。</param>
            <returns>复数 value 的由复数指定的次幂。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.Pow(Py.Algorithm.Numerics.Complex,System.Double)">
            <summary>
            返回指定复数的由复数指定的次幂。
            </summary>
            <param name="value">要对其求幂的复数。</param>
            <param name="power">指定幂的复数。</param>
            <returns>复数 value 的 power 次幂。</returns>
        </member>
        <member name="M:Py.Algorithm.Numerics.Complex.#cctor">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Numerics.Complex"/> 的静态成员。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Numerics.Complex.Real">
            <summary>
            获取当前 Complex 对象的实部。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Numerics.Complex.Imaginary">
            <summary>
            获取当前 Complex 对象的虚部。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Numerics.Complex.Magnitude">
            <summary>
            获取复数的量值（或绝对值）。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Numerics.Complex.Phase">
            <summary>
            获取复数的相位。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.FlushType">
            <summary>
            表示一个压缩缓存输出类型。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.FlushType.None">
            <summary>
            不输出。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.FlushType.Partial">
            <summary>
            仅关闭当前的模块。
            </summary>
            <remarks>
            不输出缓存，这只在一些极端情况使用。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.FlushType.Sync">
            <summary>
            所有的缓存均输出。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.FlushType.Full">
            <summary>
            输出全部缓存，并重置所有状态。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.FlushType.Finish">
            <summary>
            标识压缩结束。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.BlockState">
            <summary>
            表示块状态的枚举。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.BlockState.NeedMore">
            <summary>
            块未填满。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.BlockState.BlockDone">
            <summary>
            块准备完。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.BlockState.FinishStarted">
            <summary>
            正在结束。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.BlockState.FinishDone">
            <summary>
            完成。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateFlavor">
            <summary>
            表示 Deflate 执行速度的枚举。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateFlavor.Store">
            <summary>
            存储。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateFlavor.Fast">
            <summary>
            快速。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateFlavor.Slow">
            <summary>
            低速。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateManager">
            <summary>
            用于操作 Deflate 的类。不可继承此类。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.MEM_LEVEL_MAX">
            <summary>
            等级的最大值。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.MEM_LEVEL_DEFAULT">
            <summary>
            等级默认大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.WindowBitsMax">
            <summary>
            压缩最大的窗口大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.REP_3_6">
            <summary>
            重复先前的字节长度 3 至 6 倍。 （每2）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.REPZ_3_10">
            <summary>
            重复先前的字节长度 3 至 10 倍。（每3）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.REPZ_11_138">
            <summary>
            重复先前的字节长度 11 至 138 倍。 （每6）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.DeflateFunction">
            <summary>
            压缩的方法。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._status">
            <summary>
            当前状态。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Pending">
            <summary>
            追加的字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.NextPending">
            <summary>
            需要追加到流的字节。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.PendingCount">
            <summary>
            追加的大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._dataType">
            <summary>
            数据格式的类型。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._lastFlush">
            <summary>
            最后一次输出的数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._size">
            <summary>
            LZ77 的默认窗口。 （默认 32k）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._bits">
            <summary>
            窗口大小的质。 （log2(_size) ）  （ 8..16 ）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._mask">
            <summary>
            遮罩的大小。  （_size - 1）
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._window">
            <summary>
            内部字典。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._windowSize">
            <summary>
            窗口大小。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._compressionLevel">
            <summary>
            压缩等级。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager._compressionStrategy">
            <summary>
            压缩策略。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.OptLen">
            <summary>
            当前块的附加树的长度。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.StaticLen">
            <summary>
            当前块的静态树的长度。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.#ctor">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.DeflateManager"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Initialize(Py.Zip.Zlib.ZlibCodec,Py.Zip.Zlib.CompressionLevel)">
            <summary>
            使用指定的解码器，压缩等级初始化。
            </summary>
            <param name="codec">解码器。</param>
            <param name="level">初始化。</param>
            <returns>初始化的返回码。成功返回 0 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Initialize(Py.Zip.Zlib.ZlibCodec,Py.Zip.Zlib.CompressionLevel,System.Int32)">
            <summary>
            使用指定的解码器，压缩等级初始化。
            </summary>
            <param name="codec">解码器。</param>
            <param name="level">初始化。</param>
            <param name="bits">大小。</param>
            <returns>初始化的返回码。成功返回 0 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Initialize(Py.Zip.Zlib.ZlibCodec,Py.Zip.Zlib.CompressionLevel,System.Int32,Py.Zip.Zlib.CompressionStrategy)">
            <summary>
            使用指定的解码器，压缩等级初始化。
            </summary>
            <param name="codec">解码器。</param>
            <param name="level">初始化。</param>
            <param name="bits">大小。</param>
            <param name="compressionStrategy">压缩策略。</param>
            <returns>初始化的返回码。成功返回 0 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Initialize(Py.Zip.Zlib.ZlibCodec,Py.Zip.Zlib.CompressionLevel,System.Int32,System.Int32,Py.Zip.Zlib.CompressionStrategy)">
            <summary>
            使用指定的解码器，压缩等级初始化。
            </summary>
            <param name="codec">解码器。</param>
            <param name="level">初始化。</param>
            <param name="windowBits">大小。</param>
            <param name="strategy">压缩策略。</param>
            <param name="memLevel">内存大小。</param>
            <returns>初始化的返回码。成功返回 0 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Reset">
            <summary>
            重新设置管理器的状态。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.SetDeflater">
            <summary>
            设置 Deflate 需要的函数。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.SetParams(Py.Zip.Zlib.CompressionLevel,Py.Zip.Zlib.CompressionStrategy)">
            <summary>
            设置解压参数。
            </summary>
            <param name="level">压缩等级。</param>
            <param name="strategy">压缩策略。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.SetDictionary(System.Byte[])">
            <summary>
            设置解压时的字典。
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Deflate(Py.Zip.Zlib.FlushType)">
            <summary>
            解压数据。
            </summary>
            <remarks>
            必须先设置 InputBuffer 和 OutputBuffer 。
            </remarks>
            <param name="flush">输出方式。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateManager.CompressFunc">
            <summary>
            表示压缩函数的委托。
            </summary>
            <param name="flush">输出类型。</param>
            <returns>状态。</returns>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateManager.Config">
            <summary>
            表示一个配置类。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.GoodLength">
            <summary>
            已合格的大小。
            </summary>
            <remarks>
            如果上次的匹配比这次多，使搜索更快，减小重复的搜索。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.MaxLazy">
            <summary>
            最大的暴力计算长度。
            </summary>
            <remarks>
            在这个值以上不再进行暴力计算。
            对压缩等级不小于 4 时，这个值有效，对于压缩等级1-3 ， 这个值和  MaxInsertLength 一样。 （见  DeflateFast 。 ）
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.NiceLength">
            <summary>
            正确的长度。
            </summary>
            <remarks>
            到这个长度后不继续。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.MaxChainLength">
            <summary>
            需要的最大值。
            </summary>
            <remarks>
            为了加快速度，哈希链在此值后不计算。这个值随压缩率增加而变大，但同时速度变小。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.Flavor">
            <summary>
            速度。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Config.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Py.Zip.Zlib.DeflateFlavor)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.DeflateManager.Config"/> 的新实例。
            </summary>
            <param name="goodLength">合格的长度。</param>
            <param name="maxLazy">最大的暴力计算长度。</param>
            <param name="niceLength">正确的长度。</param>
            <param name="maxChainLength">需要的最大值。</param>
            <param name="flavor">速度。</param>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Config.Lookup(Py.Zip.Zlib.CompressionLevel)">
            <summary>
            返回指定等级的配置。
            </summary>
            <param name="level">压缩等级。</param>
            <returns>配置。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.DeflateManager.Config.#cctor">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.DeflateManager.Config"/> 的静态成员。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.DeflateManager.Config.Table">
            <summary>
            配置表。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.DeflateManager.ManagerState">
            <summary>
            当前的状态。
            </summary>
        </member>
        <member name="T:Py.Zip.ZipEntryEncryptionAlgorithm">
            <summary>
            表示加密的算法。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryEncryptionAlgorithm.None">
            <summary>
            无加密。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryEncryptionAlgorithm.PkzipWeak">
            <summary>
            传统 pkzip 加密。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryEncryptionAlgorithm.WinZipAes128">
            <summary>
            WinZip AES encryption (128 key bits).
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryEncryptionAlgorithm.WinZipAes256">
            <summary>
            WinZip AES encryption (256 key bits).
            </summary>
        </member>
        <member name="F:Py.Zip.ZipEntryEncryptionAlgorithm.Unsupported">
            <summary>
            不支持的加密算法。
            </summary>
        </member>
        <member name="T:Py.Json.JsonParser">
            <summary>
            表示一个可用于操作Json的操作符。
            </summary>
        </member>
        <member name="F:Py.Json.JsonParser._index">
            <summary>
            表示当前的索引。
            </summary>
        </member>
        <member name="F:Py.Json.JsonParser._source">
            <summary>
            表示当前操作符的来源。
            </summary>
        </member>
        <member name="M:Py.Json.JsonParser.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonTokener 的新实例。
            </summary>
            <param name="json">Json。</param>
        </member>
        <member name="M:Py.Json.JsonParser.Back">
            <summary>
            返回一个字节。
            </summary>
        </member>
        <member name="M:Py.Json.JsonParser.Next">
            <summary>
            获取下一个字符。读取不到返回  \0
            </summary>
            <returns>下一个字符。</returns>
        </member>
        <member name="M:Py.Json.JsonParser.Next(System.Char)">
            <summary>
            获取下一个期待的字符。
            </summary>
            <param name="c">字符。</param>
            <returns>字符。</returns>
            <exception cref="T:Py.Core.SyntaxException">需要的字符不匹配。</exception>
        </member>
        <member name="M:Py.Json.JsonParser.Next(System.Int32)">
            <summary>
            获取连续n个字符串。
            </summary>
            <param name="n">个数。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Json.JsonParser.NextClean">
            <summary>
            获取下一个非空格的字符。
            </summary>
            <returns>字符。如果读不到，返回 \0。</returns>
        </member>
        <member name="M:Py.Json.JsonParser.NextString(System.Char)">
            <summary>
            获取一下个字符串。
            </summary>
            <param name="quote">引号，可以为 ' 或 ""</param>
            <returns>A String.</returns>
        </member>
        <member name="M:Py.Json.JsonParser.NextObject">
            <summary>
            返回下一个对象， 值可以是 JSONArray, JSONObject, String, 或 JSONValue 对象。
            </summary>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.Json.JsonParser.NextKey">
            <summary>
            返回下一个键名。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Json.JsonParser.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Json.JsonParser.Unescape">
            <summary>
            解码当前操作符。
            </summary>
        </member>
        <member name="P:Py.Json.JsonParser.Index">
            <summary>
            返回当前的索引。
            </summary>
        </member>
        <member name="P:Py.Json.JsonParser.CheckSyntax">
            <summary>
            获取或设置是否在语法出错时，并可忽略的情况抛出异常。
            </summary>
            <remarks>
            如下列情况，是可忽略的错误:
            [1,,1]
            {a:2,}
            但缺少括号的错误是不能忽略的， 因为缺失一个扩号会到时整个 Json 的对象改变。
            </remarks>
        </member>
        <member name="T:Py.Json.JsonArray">
            <summary>
            表示 Json 的数组。
            </summary>
        </member>
        <member name="M:Py.Json.JsonArray.#ctor">
            <summary>
            初始化 Py.Json.JsonArray 的新实例。
            </summary>
        </member>
        <member name="M:Py.Json.JsonArray.#ctor(Py.Json.JsonParser)">
            <summary>
            初始化 Py.Json.JsonArray 的新实例。
            </summary>
            <param name="x">转换工具。</param>
        </member>
        <member name="M:Py.Json.JsonArray.#ctor(System.String)">
            <summary>
            初始化 Py.Json.JsonArray 的新实例。
            </summary>
            <param name="json">Json。</param>
        </member>
        <member name="M:Py.Json.JsonArray.#ctor(System.Collections.Generic.IList{Py.Json.IJsonObject})">
            <summary>
            初始化 Py.Json.JsonArray 的新实例。
            </summary>
            <param name="list">列表。</param>
        </member>
        <member name="M:Py.Json.JsonArray.#ctor(System.Collections.ICollection)">
            <summary>
            初始化 Py.Json.JsonArray 的新实例。
            </summary>
            <param name="collection">集合。</param>
        </member>
        <member name="M:Py.Json.JsonArray.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:Py.Json.JsonArray.Add(System.String)">
            <summary>
            增加一个项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Add(System.String,System.Char)">
            <summary>
            增加一个项。
            </summary>
            <param name="value">插入的值。</param>
            <param name="quote">引号。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Add(System.Int32)">
            <summary>
            增加一个项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Add(System.Double)">
            <summary>
            增加一个项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Add(System.Boolean)">
            <summary>
            增加一个项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.AddRange(System.Collections.IDictionary)">
            <summary>
            增加多项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.AddRange(System.Collections.ICollection)">
            <summary>
            增加多项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.AddRange(Py.Json.JsonArray)">
            <summary>
            增加多项。
            </summary>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.Object)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.String)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.String,System.Char)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
            <param name="quote">引号。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.Int32)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.Double)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Insert(System.Int32,System.Boolean)">
            <summary>
            增加一个项。
            </summary>
            <param name="index">插入的位置。</param>
            <param name="value">插入的值。</param>
        </member>
        <member name="M:Py.Json.JsonArray.Add">
            <summary>
            增加一个 Null 项。
            </summary>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonArray(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonObject(System.Int32)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonValue(System.Int32)">
            <summary>
            获取当前数组下指定位置的插入的值。
            </summary>
            <param name="index">位置。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonArray(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonObject(System.String)">
            <summary>
            获取当前数组下指定位置的数组。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.GetJsonValue(System.String)">
            <summary>
            获取当前数组下指定位置的插入的值。
            </summary>
            <param name="name">名字。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.op_Explicit(Py.Json.JsonArray)~Py.Json.JsonExpression">
            <summary>
            实现从 <see cref="T:Py.Json.JsonArray"/> 到 <see cref="T:Py.Json.JsonExpression"/>的显性转换。
            </summary>
            <param name="j">数组。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.op_Explicit(Py.Json.JsonArray)~Py.Json.JsonObject">
            <summary>
            转换当前对象至等效的JsonObject。
            </summary>
            <returns>JsonObject。</returns>
        </member>
        <member name="M:Py.Json.JsonArray.ToArray">
            <summary>
            将当前对象的子节点所有转换为字符串，并返回合成的集合。
            </summary>
            <returns>返回的集合。</returns>
        </member>
        <member name="P:Py.Json.JsonArray.Json">
            <summary>
            返回当前表达式对应的Json字符串。
            </summary>
        </member>
        <member name="P:Py.Json.JsonArray.Value">
            <summary>
            获取插入的值。
            </summary>
        </member>
        <member name="P:Py.Json.JsonArray.Item(System.String)">
            <summary>
            获取或设置插入的值。
            </summary>
            <param name="name">名字。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:Py.Core.Number">
            <summary>
            表示用于数字操作的静态类。
            </summary>
        </member>
        <member name="M:Py.Core.Number.ToHex(System.Char)">
            <summary>
            返回一个字母对应的十六进制值。如果非正常数字，返回 -1 。
            </summary>
            <param name="c">
            一个十六进制使用的字符。
            </param>
            <returns>一个-1 - 16的数字。</returns>
        </member>
        <member name="M:Py.Core.Number.FromHex(System.Int32)">
            <summary>
            返回用于指定数的十六进制表达式。
            </summary>
            <param name="value">数。在 0 - 15 间。</param>
            <returns>字符。</returns>
        </member>
        <member name="F:Py.Core.Number.primes">
            <summary>
            所有质数。
            </summary>
        </member>
        <member name="M:Py.Core.Number.GetPrime(System.Int32)">
            <summary>
            获取不小于某个数的最小质数。
            </summary>
            <param name="min">最小数。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Core.Number.IsPrime(System.Int32)">
            <summary>
            判断某个数是否为质数。
            </summary>
            <param name="candidate">数字。</param>
            <returns>质数返回 true。</returns>
        </member>
        <member name="F:Py.Core.Number._catchT">
            <summary>
            10的次方数组。
            </summary>
        </member>
        <member name="M:Py.Core.Number.Times(System.Int32)">
            <summary>
            求 10 的 n 次幂。
            </summary>
            <param name="n">次数。</param>
            <returns>结果。</returns>
        </member>
        <member name="M:Py.Core.Number.ToCapitalCurrency(System.Decimal)">
            <summary>
            把数字转为汉字大写格式的数字。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Py.Core.Number.FromBase(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。
            </summary>
            <param name="value">包含数字的 System.String。</param>
            <param name="fromBase">value 中数字的基数，它必须是[2,36]。</param>
            <returns>等效于 value 中的数字的 64 位有符号整数。- 或 - 如果 value 为 null，则为零。</returns>
        </member>
        <member name="M:Py.Core.Number.ToBinary(System.Int32,System.Boolean)">
            <summary>
            把一个数转为等效的二进制数。
            </summary>
            <param name="value"></param>
            <param name="split">是否每隔八位后加上空格。</param>
            <returns></returns>
        </member>
        <member name="M:Py.Core.Number.ToBinary(System.Int64,System.Boolean)">
            <summary>
            把一个数转为等效的二进制数。
            </summary>
            <param name="value"></param>
            <param name="split">是否每隔八位后加上空格。</param>
            <returns></returns>
        </member>
        <member name="M:Py.Core.Number.ToBinary(System.Byte)">
            <summary>
            转换值到二进制。
            </summary>
            <param name="value">转换的值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Number.ToBinary(System.Decimal,System.Boolean)">
            <summary>
            转换值到二进制。
            </summary>
            <param name="value">转换的值。</param>
            <param name="split">是否每隔 8 位加上空格。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Number.ToBase(System.Int64,System.Int32)">
            <summary>
            long转化为toBase进制。
            </summary>
            <param name="value">转换的值。</param>
            <param name="toBase">目标进制。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:Py.Core.Number.GetLength(System.Int32)">
            <summary>
            获取一个整数中的整数位长度。
            </summary>
            <param name="value">值。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Core.Number.IsOdd(System.Int32)">
            <summary>
            判断一个数是否为奇数。
            </summary>
            <param name="value">值。</param>
            <returns>如果为奇数，则 true。</returns>
        </member>
        <member name="M:Py.Core.Number.GetPrecision(System.Decimal)">
            <summary>
            获取一个十进制数的精度。
            </summary>
            <param name="value">值。</param>
            <returns>精度。</returns>
        </member>
        <member name="M:Py.Core.Number.ToBCD(System.Int32)">
            <summary>
            转为半角符。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.Number.IsPowerOfTwo(System.UInt64)">
            <summary>
            检查无符号长整形数是否为2的正整次方。
            </summary>
            <param name="value">要检查的数。</param>
            <returns>指示指定的值是否为2的正整次方。</returns>
        </member>
        <member name="M:Py.Core.Number.IsSet(System.Int32,System.Int32)">
            <summary>
            检查一个数字在某位是否被设置。
            </summary>
            <param name="value">检查的值。</param>
            <param name="bit">位数。</param>
            <returns>如果为 1 ，返回 true。 </returns>
        </member>
        <member name="M:Py.Core.Number.Set(System.Int32@,System.Int32)">
            <summary>
            设置指定位置的值为 1 。
            </summary>
            <param name="value">操作的值。</param>
            <param name="bit">位数。</param>
        </member>
        <member name="M:Py.Core.Number.Unset(System.Int32@,System.Int32)">
            <summary>
            取消设置指定位置的值为 1 。
            </summary>
            <param name="value">操作的值。</param>
            <param name="bit">位数。</param>
        </member>
        <member name="M:Py.Core.Number.Pow(System.Int32,System.Int32)">
            <summary>
            返回指定数字的指定次幂。
            </summary>
            <param name="x">要乘幂的双精度浮点数。</param>
            <param name="y">指定幂的双精度浮点数。</param>
            <returns>数字 x 的 y 次幂。</returns>
        </member>
        <member name="M:Py.Core.Number.Log(System.Int32,System.Int32)">
            <summary>
            返回指定数字在使用指定底时的对数。
            </summary>
            <param name="x">要查找其对数的数字。</param>
            <param name="y">对数的底。</param>
            <returns>计算的返回结果。</returns>
        </member>
        <member name="T:Py.Logging.FileLogListener">
            <summary>
            将日志输出到流。
            </summary>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="append">确定是否将数据追加到文件。如果该文件存在，并且 append 为 false，则该文件被覆盖。如果该文件存在，并且 append 为 true，则数据被追加到该文件中。否则，将创建新文件。</param>
            <param name="encoding">要使用的字符编码。</param>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String,System.Text.Encoding)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="encoding">要使用的字符编码。</param>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String,System.Boolean,System.Text.Encoding,Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="append">确定是否将数据追加到文件。如果该文件存在，并且 append 为 false，则该文件被覆盖。如果该文件存在，并且 append 为 true，则数据被追加到该文件中。否则，将创建新文件。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String,Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.FileLogListener.#ctor(System.String,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Logging.FileLogListener"/> 的新实例。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="append">确定是否将数据追加到文件。如果该文件存在，并且 append 为 false，则该文件被覆盖。如果该文件存在，并且 append 为 true，则数据被追加到该文件中。否则，将创建新文件。</param>
        </member>
        <member name="P:Py.Logging.FileLogListener.FileName">
            <summary>
            设置输出的文件。
            </summary>
        </member>
        <member name="T:Py.Logging.DatabaseLogListener">
            <summary>
            将日志存储至数据库。
            </summary>
        </member>
        <member name="F:Py.Logging.DatabaseLogListener.DEFAULT_SQL_INSERTS">
            <summary>
            默认的插入语句。
            </summary>
        </member>
        <member name="F:Py.Logging.DatabaseLogListener.DEFAULT_SQL_DELETES">
            <summary>
            默认的插入语句。
            </summary>
        </member>
        <member name="F:Py.Logging.DatabaseLogListener._uncommitedList">
            <summary>
            未提交的数据单元。
            </summary>
        </member>
        <member name="F:Py.Logging.DatabaseLogListener._dbHelper">
            <summary>
            用于数据库操作辅助的类实例。
            </summary>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.#ctor(System.String,Py.Sql.Database)">
            <summary>
            初始化 <see cref="T:Py.Logging.DatabaseLogListener"/> 的新实例。
            </summary>
            <param name="connectionString">连接字符串。</param>
            <param name="db">数据库的类型。</param>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.#ctor(Py.Sql.DbHelper)">
            <summary>
            初始化 <see cref="T:Py.Logging.DatabaseLogListener"/> 的新实例。
            </summary>
            <param name="dbHelper">数据库辅助类。</param>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Update(Py.Logging.LogEntry)">
            <summary>
            将一个日志插入数据库。
            </summary>
            <param name="entry">日志内容。</param>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Init">
            <summary>
            初始属性。
            </summary>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            当被子类重写时，实现保存一个日志内容。
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Close">
            <summary>
            关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:Py.Logging.DatabaseLogListener.Clear(System.DateTime)">
            <summary>
            清除指定时间之前的全部日志。
            </summary>
            <param name="dt">时间。</param>
        </member>
        <member name="P:Py.Logging.DatabaseLogListener.InsertCommand">
            <summary>
            获取或设置用于插入的命令。其中用 @Level, @Time, @Message, @EventType, @Site 表示参数，分别说明日志的内容。
            </summary>
            <example>
            下面的例子演示了 InsertCommand 默认值。
            <code>
            INSERT INTO [LOGS](Level, [Time], Message, EventType, Site) VALUES(@Level, @Time, @Message, @EventType, @Site)
            </code>
            </example>
        </member>
        <member name="P:Py.Logging.DatabaseLogListener.DeleteCommand">
            <summary>
            获取或设置删除命令。
            </summary>
        </member>
        <member name="P:Py.Logging.DatabaseLogListener.CommandType">
            <summary>
            获取或设置用于插入的命令。
            </summary>
        </member>
        <member name="P:Py.Logging.DatabaseLogListener.EnumToInt">
            <summary>
            获取或设置是否把枚举转为 int 后存入数据库。否则以字符串形式。
            </summary>
            <value>如果为 true， 则吧枚举转为等值的整数，否则取枚举变量的变量名。</value>
        </member>
        <member name="P:Py.Logging.DatabaseLogListener.DbHelper">
            <summary>
            获取当前正在使用的数据库操作类。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlTextReader">
            <summary>
            示提供对 HTML 数据进行快速、非缓存、只进访问的读取器。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._nodeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._closeInput">
            <summary>
            指示当读取器关闭时，是否应关闭基础流或 <see cref="T:System.IO.TextReader" />。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._ignoreComments">
            <summary>
            指示是否忽略注释。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._ignorePIs">
            <summary>
            该值指示是否忽略处理指令。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._ignoreWhitespace">
            <summary>
            指示是否忽略无关紧要的空白。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._nameTable">
            <summary>
            用于原子化字符串比较的 <see cref="T:System.Html.HtmlNameTable" />。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.Close">
            <summary>
            当在派生类中被重写时，将 <see cref="P:Py.Html.HtmlReader.ReadState"/> 更改为 Closed。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.GetAttribute(System.Int32)">
            <summary>
            当在派生类中被重写时，获取具有指定索引的属性的值。
            </summary>
            <param name="i">属性的索引。索引是从零开始的。（第一个属性的索引为 0。）</param>
            <returns>指定属性的值。此方法不移动读取器。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="i"/> 超出范围。它必须是非负数且小于属性集合的大小。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.GetAttributeName(System.Int32)">
            <summary>
            当在派生类中被重写时，获取具有指定索引的属性。
            </summary>
            <param name="i">属性的索引。索引是从零开始的。（第一个属性的索引为 0。）</param>
            <returns>指定属性。此方法不移动读取器。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="i"/> 超出范围。它必须是非负数且小于属性集合的大小。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.GetAttribute(System.String)">
            <summary>
            当在派生类中被重写时，获取具有指定 <see cref="P:Py.Html.HtmlReader.Name"/> 的属性的值。
            </summary>
            <param name="name">属性的限定名。</param>
            <returns>
            指定属性的值。如果找不到该属性，或者值为 String.Empty，则返回 null。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> 为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.LookupNamespace(System.String)">
            <summary>
            当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。
            </summary>
            <param name="prefix">要解析其命名空间 URI 的前缀。若要匹配默认命名空间，请传递一个空字符串。</param>
            <returns>前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlTextReader.Read">
            <summary>
            当在派生类中被重写时，从流中读取下一个节点。
            </summary>
            <returns>
            如果成功读取了下一个节点，则为 true；如果没有其他节点可读取，则为 false。
            </returns>
            <exception cref="T:Py.Html.HtmlException">
            分析 HTML 时出错。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.ParseSpace">
            <summary>
            解析文本。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlTextReader"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(System.String,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <paramref name="inputUri"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="inputUri">包含要读取的 HTML 数据的 inputUri。</param>
            <param name="settings">包含创建的配置。</param>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(System.Uri,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:System.Uri"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="inputUri">要下载的 HTML 文档的 inputUri。</param>
            <param name="settings">包含创建的配置。</param>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(System.Uri,System.Text.Encoding,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:System.Uri"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="inputUri">要下载的 HTML 文档的 inputUri。</param>
             <param name="encoding">指定网站编码。</param>
            <param name="settings">包含创建的配置。</param>
            <exception cref="T:System.Net.WebException">System.Net.HttpWebRequest.Abort() 以前被调用过。 - 或 - 请求的超时期限到期。 - 或 - 处理请求时发生错误。</exception>
            <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，此请求包含要发送到服务器的数据。发送数据的请求不得使用缓存。如果您正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(Py.IO.TextBuffer,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:Py.IO.TextBuffer"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="textReader">包含要读取的 HTML 数据的 TextReader。</param>
            <param name="settings">包含创建的配置。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="textReader"/> 值为 null。
            </exception>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(System.IO.Stream,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:System.IO.Stream"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="stream">包含要读取的 HTML 数据的 TextReader。</param>
            <param name="settings">包含创建的配置。</param>
        </member>
        <member name="M:Py.Html.HtmlTextReader.#ctor(System.IO.Stream,System.Text.Encoding,Py.Html.HtmlReaderSettings)">
            <summary>
            使用指定的 <see cref="T:System.IO.Stream"/> 和 <see cref="T:System.Xml.HtmlReaderSettings"/> 初始化 <see cref="T:Py.Html.HtmlTextReader"/> 类的新实例。
            </summary>
            <param name="stream">包含要读取的 HTML 数据的 TextReader。</param>
            <param name="encoding">要使用的字符编码。</param>
            <param name="settings">包含创建的配置。</param>
        </member>
        <member name="F:Py.Html.HtmlTextReader._baseURI">
            <summary>
            缓存的字符。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._textReader">
            <summary>
            当前使用的读取器。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._nodes">
            <summary>
            缓存当前节点的数组。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._attributesCount">
            <summary>
            当前属性的个数。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlTextReader._attributesCapacity">
            <summary>
            当前属性数组的大小。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.ClearAttributes">
            <summary>
            清除全部的属性节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlTextReader.AddAttribute(System.String,System.String)">
            <summary>
            增加一个属性。
            </summary>
            <param name="name">属性名。</param>
            <param name="value">属性值。</param>
        </member>
        <member name="P:Py.Html.HtmlTextReader.AttributeCount">
            <summary>
            当在派生类中被重写时，获取当前节点上的属性数。
            </summary>
            <value></value>
            <returns>
            当前节点上的属性数。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.EOF">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
            </summary>
            <value></value>
            <returns>
            如果此读取器定位在流的结尾，则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.HasValue">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示当前节点是否可以具有 <see cref="P:Py.Html.HtmlReader.Value"/>。
            </summary>
            <value></value>
            <returns>
            如果读取器当前定位在的节点可以具有 Value，则为 true；否则为 false。如果为 false，则节点值为 String.Empty。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.LocalName">
            <summary>
            当在派生类中被重写时，获取当前节点的本地名称。
            </summary>
            <value></value>
            <returns>
            移除了前缀的当前节点的名称。例如，对于元素 &lt;bk:book&gt;，LocalName 为 book。
            对于没有名称的节点类型（如 Text、Comment 等），该属性返回 String.Empty。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.IsEmptyElement">
            <summary>
            当在派生类中被重写时，获取一个值，该值指示当前节点是否为空元素（例如 &lt;MyElement/&gt;）。
            </summary>
            <returns>
            如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlReader.NodeType" /> 等于 XmlNodeType.Element），则为 true；否则为 false。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.NameTable">
            <summary>
            当在派生类中被重写时，获取与该实现关联的 <see cref="T:Py.Html.HtmlNameTable"/>。
            </summary>
            <value></value>
            <returns>HtmlNameTable，它使您能够获取该节点内字符串的原子化版本。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.NodeType">
            <summary>
            当在派生类中被重写时，获取当前节点的类型。
            </summary>
            <returns>
            	<see cref="T:Py.Html.HtmlNodeType"/> 值之一，表示当前节点的类型。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.Prefix">
            <summary>
            当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
            </summary>
            <value></value>
            <returns>
            与当前节点关联的命名空间前缀。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.Value">
            <summary>
            当在派生类中被重写时，获取当前节点的文本值。
            </summary>
            <value></value>
            <returns>
            返回的值取决于节点的 <see cref="P:Py.Html.HtmlReader.NodeType"/>。下表列出具有要返回的值的节点类型。所有其他节点类型返回 String.Empty。
            节点类型
            值
            Attribute
            属性值。
            CDATA
            CDATA 节的内容。
            Comment
            注释的内容。
            DocumentType
            内部子集。
            ProcessingInstruction
            全部内容（不包括指令目标）。
            SignificantWhitespace
            混合内容模型中标记之间的空白。
            Text
            文本节点的内容。
            Whitespace
            标记之间的空白。
            HtmlDeclaration
            声明的内容。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.BaseURI">
            <summary>
            当在派生类中被重写时，获取当前节点的基 URI。
            </summary>
            <value></value>
            <returns>
            当前节点的基 URI。
            </returns>
        </member>
        <member name="P:Py.Html.HtmlTextReader.NamespaceURI">
            <summary>
            当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。
            </summary>
            <value></value>
            <returns>
            当前节点的命名空间 URI；否则为空字符串。
            </returns>
        </member>
        <member name="T:Py.Html.HtmlTextReader.ParseState">
            <summary>
            当前解析状态。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlOptionElement">
            <summary>
            表示一个 option 标签。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlOptionElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlInputElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="P:Py.Html.HtmlOptionElement.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlOptionElement.Selected">
            <summary>
            获取或设置当前选项是否为选中。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlOptionElement.Disabled">
            <summary>
            获取或设置当前选项是否为选中。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlOptionElement.Form">
            <summary>
            获取当前元素所在的表单。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.ZlibState">
            <summary>
            表示处理状态。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.Success">
            <summary>
            正常。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.StreamEnd">
            <summary>
            流结束。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.NeedDict">
            <summary>
            需要字典。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.StreamError">
            <summary>
            流错误。如不可读。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.DataError">
            <summary>
            数据错误。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.MemoryError">
            <summary>
            内存出现错误。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.BufferError">
            <summary>
            缓存错误。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.VersionError">
            <summary>
            版本错误。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibState.ErrorNo">
            <summary>
            出现错误。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.SharedUtils">
            <summary>
            内部工具。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="T:Py.Zip.ZipStreamEntry">
            <summary>
            来自流的 zip单元。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipStreamEntry._sourceStream">
            <summary>
            源流。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipStreamEntry._sourceStreamOriginalPosition">
            <summary>
            源流源地址。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipStreamEntry._leaveOpen">
            <summary>
            是否保持流打开。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
            设置并返回输入流和长度。
            </summary>
            <param name="input">输入的流。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.#ctor(Py.Zip.ZipFile)">
            <summary>
            初始化 <see cref="T:Py.Zip.ZipStreamEntry"/> 的新实例。
            </summary>
            <param name="file">所有者。</param>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.PrepSourceStream(System.IO.Stream)">
            <summary>
            储存流的初始位置。
            </summary>
            <param name="sourceStream">流。</param>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.WantReadAgain">
            <summary>
            返回是否需要重新读单元。
            </summary>
            <returns>布尔。</returns>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.FigureCompressionMethodForWriting(System.Int32)">
            <summary>
            设置压缩方法。
            </summary>
            <param name="cycle">循环。</param>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.CloseWrite(System.IO.Stream)">
            <summary>
            关闭写入流。
            </summary>
            <param name="input">流。</param>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.FigureCrc32">
            <summary>
            设置当前的 CRC32 。
            </summary>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.OnExtract(System.IO.Stream,System.String)">
            <summary>
            解压。
            </summary>
            <param name="output">目标流。</param>
            <param name="password">解压密码。</param>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.#ctor(Py.Zip.ZipFile,System.String,System.IO.Stream)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="name">名字。</param>
            <param name="s">读取的流。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="M:Py.Zip.ZipStreamEntry.#ctor(Py.Zip.ZipFile,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            初始化 Py.Zip.ZipEntry 的新实例。
            </summary>
            <param name="file">所有者。</param>
            <param name="name">名字。</param>
            <param name="s">读取的流。</param>
            <param name="leaveOpen">是否保持流为打开。</param>
            <exception cref="T:System.ArgumentNullException">名字空</exception>
        </member>
        <member name="P:Py.Zip.ZipStreamEntry.BaseStream">
            <summary>
            获取或设置文件内容的输入流。
            </summary>
        </member>
        <member name="T:Py.Windows.Hook">
            <summary>
            表示一个键盘钩子工具。
            </summary>
            <remarks>
            钩子(Hook)，是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理它。钩子机制允许应用程序截获处理window消息或特定事件。 　　钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。 
            </remarks>
        </member>
        <member name="F:Py.Windows.Hook._tHook">
            <summary>
            键盘钩子句柄
            </summary>
        </member>
        <member name="F:Py.Windows.Hook._r">
            <summary>
            键盘钩子委托实例
            </summary>
        </member>
        <member name="M:Py.Windows.Hook.SetWindowsHookEx(Py.Windows.WindowsHook,Py.Windows.Hook.HookProc,System.IntPtr,System.Int32)">
            <summary>
            安装钩子。
            </summary>
            <param name="idHook">钩子的类型。</param>
            <param name="lpfn">钩子子程的地址指针。如果dwThreadId参数为0 。</param>
            <param name="pInstance">应用程序实例的句柄。如果dwThreadId 标识当前进程创建的一个线程，而且子程代码位于当前进程，hMod必须为NULL。 </param>
            <param name="threadId">与安装的钩子子程相关联的线程的标识符。如果为0，钩子子程与所有的线程关联，即为全局钩子。</param>
            <returns>成功则返回钩子子程的句柄，失败返回 null 。</returns>
        </member>
        <member name="M:Py.Windows.Hook.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            卸载钩子。
            </summary>
            <param name="pHookHandle">钩子的句柄，由SetWindowsHookEx()函数返回。</param>
            <returns>成功返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:Py.Windows.Hook.CallNextHookEx(System.IntPtr,Py.Windows.HookCode,System.Int32,System.Int32)">
            <summary>
            传递钩子。
            </summary>
            <param name="pHookHandle">钩子的句柄，由SetWindowsHookEx()函数返回。</param>
            <param name="nCode">传给钩子过程的事件代码。 </param>
            <param name="wParam">传给钩子子程的wParam值。 </param>
            <param name="lParam">传给钩子子程的lParam值。</param>
            <returns>成功返回 0， 否则返回错误。</returns>
        </member>
        <member name="M:Py.Windows.Hook.CallNextHook(Py.Windows.Hook,Py.Windows.HookCode,System.Int32,System.Int32)">
            <summary>
            传递钩子。
            </summary>
            <param name="hook">钩子。</param>
            <param name="nCode">传给钩子过程的事件代码。 </param>
            <param name="wParam">传给钩子子程的wParam值。 </param>
            <param name="lParam">传给钩子子程的lParam值。</param>
            <returns>成功返回 0， 否则返回错误。</returns>
        </member>
        <member name="M:Py.Windows.Hook.#ctor(System.IntPtr)">
            <summary>
            初始化 <see cref="T:Py.Windows.Hook"/> 的新实例。
            </summary>
            <param name="instance">实例指针。</param>
        </member>
        <member name="M:Py.Windows.Hook.#ctor(System.Reflection.Module)">
            <summary>
            初始化 <see cref="T:Py.Windows.Hook"/> 的新实例。
            </summary>
            <param name="module">模块。</param>
        </member>
        <member name="M:Py.Windows.Hook.#ctor">
            <summary>
            初始化 <see cref="T:Py.Windows.Hook"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Windows.Hook.InstallHook(Py.Windows.WindowsHook,Py.Windows.Hook.HookProc,System.Int32)">
            <summary>
            安装钩子。
            </summary>
            <param name="wh">钩子的类型。</param>
            <param name="hook">钩子调用委托。</param>
            <param name="threadId">线程 id 。可以为 0， 指明全局 。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hook.InstallHook(Py.Windows.WindowsHook)">
            <summary>
            安装钩子。
            </summary>
            <param name="wh">钩子的类型。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hook.InstallHook(Py.Windows.WindowsHook,System.Int32)">
            <summary>
            安装钩子。
            </summary>
            <param name="wh">钩子的类型。</param>
            <param name="threadId">线程 id 。可以为 0， 指明全局 。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hook.UnInstallHook">
            <summary>
            卸载钩子。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Hook.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Py.Windows.Hook.InstallHookOfKeyboard(Py.Windows.Hook.KeyboardProc,System.Int32)">
            <summary>
            安装专处理键盘钩子的委托。
            </summary>
            <param name="k">安装的委托。</param>
            <param name="threadId">调用的线程。 0 表示每个线程。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="P:Py.Windows.Hook.HookProcedure">
            <summary>
            获取或设置钩子委托。
            </summary>
        </member>
        <member name="T:Py.Windows.Hook.HookProc">
            <summary>
            钩子委托声明
            </summary>
            <param name="nCode">Hook代码。</param>
            <param name="wParam">发送的信息。</param>
            <param name="lParam">接收的信息。</param>
            <returns>结果值。</returns>
        </member>
        <member name="T:Py.Windows.Hook.KeyboardProc">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Py.Windows.Hook.KeyPressHookArgs">
            <summary>
            键盘事件的参数。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.Handled">
            <summary>
            获取或设置一个值，该值指示是否处理过 CallNextHookEx 传递钩子事件。
            </summary>
            <value>如果处理过事件，则为 true；否则为 false。</value>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.IsPressed">
            <summary>
            获取当前键是否为按下。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.Key">
            <summary>
            获取发生的事件键位。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.Count">
            <summary>
            获取按键的次数。指连续按住某个键， 此时 Count 将加 1 。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.ScanCode">
            <summary>
            获取给输入法使用的代码。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.Extentional">
            <summary>
            返回按下的是否为在小键盘中的键。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.AltKey">
            <summary>
            获取指示当前 alt 有无按下。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.PrePressed">
            <summary>
            获取一个值，指示原先键是否按下状态。
            </summary>
        </member>
        <member name="P:Py.Windows.Hook.KeyPressHookArgs.State">
            <summary>
            获取当前键状态。
            </summary>
        </member>
        <member name="T:Py.Drawing.Position">
            <summary>
            表示位置。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.Left">
            <summary>
            左。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.Right">
            <summary>
            右。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.Top">
            <summary>
            上。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.Bottom">
            <summary>
            下。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.LeftTop">
            <summary>
            左 上。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.LeftBottom">
            <summary>
            左 下。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.RightBottom">
            <summary>
            右 下。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.RightTop">
            <summary>
            右 上。
            </summary>
        </member>
        <member name="F:Py.Drawing.Position.Center">
            <summary>
            中。
            </summary>
        </member>
        <member name="T:Py.Logging.DebugWindowLogListener">
            <summary>
            将日志输出到新窗体。
            </summary>
        </member>
        <member name="F:Py.Logging.DebugWindowLogListener._colorMapping">
            <summary>
            等级的颜色列表。
            </summary>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.ResetColor">
            <summary>
            重置颜色效果为默认风格。
            </summary>
        </member>
        <member name="F:Py.Logging.DebugWindowLogListener._form">
            <summary>
            当前使用的表单。
            </summary>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.#ctor(System.Windows.Forms.Form)">
            <summary>
            初始化 <see cref="T:Py.Logging.WinFormControlLogListener"/> 的新实例。
            </summary>
            <param name="form">表单。</param>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.#ctor">
            <summary>
            初始化 <see cref="T:Py.Logging.WinFormControlLogListener"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.#ctor(Py.Logging.LoggingStringConverter)">
            <summary>
            初始化 <see cref="T:Py.Logging.ConsoleLogListener"/> 的新实例。
            </summary>
            <param name="c">日志转换实例。</param>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.NewDebugWindow">
            <summary>
            创建新窗口。
            </summary>
            <returns>窗口实例。</returns>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.Close">
            <summary>
            刷新输出缓冲区，关闭当前日志记录使用的流。
            </summary>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.OnLog(System.String)">
            <summary>
            当被子类重写时，将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.OnLog(Py.Logging.LogEntry)">
            <summary>
            实现保存一个日志内容。
            </summary>
            <param name="entry">日志。</param>
        </member>
        <member name="M:Py.Logging.DebugWindowLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="P:Py.Logging.DebugWindowLogListener.UseColorCoding">
            <summary>
            获取或设置是否为不同等级的日志变换颜色输出。
            </summary>
        </member>
        <member name="P:Py.Logging.DebugWindowLogListener.Form">
            <summary>
            获取或设置当前输出表单。
            </summary>
        </member>
        <member name="T:Py.IO.StringBuffer">
            <summary>
            实现从字符串进行读取的 <see cref="T:System.IO.TextReader"/>。
            </summary>
        </member>
        <member name="M:Py.IO.StringBuffer.#ctor(System.String)">
            <summary>
            初始化从指定字符串进行读取的 <see cref="T:System.IO.StringReader"/> 类的新实例。
            </summary>
            <param name="s">应将 <see cref="T:System.IO.StringReader"/> 初始化为的字符串。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> 参数为 null。 </exception>
        </member>
        <member name="M:Py.IO.StringBuffer.ReadBuffer">
            <summary>
            当被子类重写时，实现从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.IO.StringBuffer.MarkReadBuffer">
            <summary>
            带标记从目前缓存载入字符，并重置当前位置。
            </summary>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="T:Py.Html.HtmlDocumentFragment">
            <summary>
            表示对树插入操作有用的轻量对象。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlDocumentFragment.#ctor(Py.Html.HtmlDocument)">
            <summary>初始化 <see cref="T:Py.Html.HtmlDocumentFragment" /> 类的新实例。</summary>
            <param name="ownerDocument">为片段源的 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlDocumentFragment.CloneNode(System.Boolean)">
            <summary>创建此节点的一个副本。</summary>
            <returns>克隆的节点。</returns>
            <param name="deep">
            如果为 true，则递归地克隆指定节点下的子树；如果为 false，则只克隆该节点本身。</param>
        </member>
        <member name="M:Py.Html.HtmlDocumentFragment.WriteContentTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点的所有子级保存到指定的 <see cref="T:Py.Html.HtmlWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="M:Py.Html.HtmlDocumentFragment.WriteTo(System.Web.UI.HtmlTextWriter)">
            <summary>
            将节点保存到指定的 <see cref="T:Py.Html.HtmlWriter"/> 中。
            </summary>
            <param name="w">要保存到其中的 HtmlWriter。</param>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.InnerHtml">
            <summary>
            获取或设置表示此节点子级的标记。
            </summary>
            <value></value>
            <returns>该节点子级的标记。</returns>
            <exception cref="T:Py.Html.HtmlException">设置此属性时指定的 HTML 的格式不合式。</exception>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.LocalName">
            <summary>
            获取节点的本地名称。
            </summary>
            <returns>对于 HtmlDocumentFragment 节点，本地名称为 #document-fragment。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.NodeName">
            <summary>
            获取节点的限定名。
            </summary>
            <returns>对于 HtmlDocumentFragment 节点，该名称为 #document-fragment。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.NodeType">
            <summary>
            获取当前节点的类型。
            </summary>
            <returns>对于 HtmlDocumentFragment 节点，该值是 HtmlNodeType.DocumentFragment。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.OwnerDocument">
            <summary>
            获取该节点所属的 <see cref="T:Py.Html.HtmlDocument" />。
            </summary>
            <returns>该节点所属的 HtmlDocument。</returns>
        </member>
        <member name="P:Py.Html.HtmlDocumentFragment.ParentNode">
            <summary>
            获取该节点（对于可以具有父级的节点）的父级。
            </summary>
            <returns>该节点的父级。对于 HtmlDocumentFragment 节点，该属性总是 null。</returns>
        </member>
        <member name="T:Py.Html.HtmlNamedNodeMap`1">
            <summary>
            表示可以通过名称或索引访问的节点的集合。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNamedNodeMap`1._nodes">
            <summary>
            所有子节点。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNamedNodeMap`1._parent">
            <summary>
            父节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.#ctor(Py.Html.HtmlNode)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlNamedNodeMap"/> 的新实例。
            </summary>
            <param name="parent">父节点。</param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.AddNode(`0)">
            <summary>
            增加一个子节点。
            </summary>
            <param name="node">节点。</param>
            <returns>增加的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.NodeUpdated(`0)">
            <summary>
            完成节点的回调。
            </summary>
            <param name="node">发生改变的节点。</param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.IndexOf(`0)">
            <summary>
            检索节点的位置。
            </summary>
            <param name="node">要检索的节点。</param>
            <returns> <see cref="T:Py.Html.HtmlNode"/> 在目前集合的位置；如果未找到匹配节点，则为 -1。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.IndexOf(System.String)">
            <summary>
             检索具有匹配的 <see cref="P:Py.Html.HtmlNode.LocalName"/> 的节点的位置。
            </summary>
            <param name="name">要检索的节点的本地名称。</param>
            <returns>具有匹配的本地名称的 <see cref="T:Py.Html.HtmlNode"/> 在目前集合的位置；如果未找到匹配节点，则为 -1。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.IndexOf(System.String,System.String)">
            <summary>
             检索具有匹配的 <see cref="P:Py.Html.HtmlNode.LocalName"/> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI"/> 的节点的位置。
            </summary>
            <param name="localName">要检索的节点的本地名称。</param>
            <param name="namespaceURI">要检索的节点的命名空间统一资源标识符 (URI)。</param>
            <returns>具有匹配的本地名称和命名空间 URI 的 <see cref="T:Py.Html.HtmlNode"/> 在目前集合的位置；如果未找到匹配节点，则为 -1。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.GetEnumerator">
            <summary>
            提供对 HtmlNamedNodeMap 中节点集合上“foreach”样式迭代的支持。
            </summary>
            <returns>一个 <see cref="T:System.Collections.IEnumerator" />。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.GetNamedItem(System.String)">
            <summary>
            检索通过名称指定的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>具有指定名称的 HtmlNode；如果未找到匹配节点，则为 null。</returns>
            <param name="name">要检索节点的限定名。它针对匹配节点的 <see cref="P:Py.Html.HtmlNode.Name" /> 属性进行匹配。 </param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.GetNamedItem(System.String,System.String)">
            <summary>
            检索具有匹配的 <see cref="P:Py.Html.HtmlNode.LocalName"/> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI"/> 的节点。
            </summary>
            <param name="localName">要检索的节点的本地名称。</param>
            <param name="namespaceURI">要检索的节点的命名空间统一资源标识符 (URI)。</param>
            <returns>
            具有匹配的本地名称和命名空间 URI 的 <see cref="T:Py.Html.HtmlNode"/>；如果未找到匹配节点，则为 null。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.InsertNodeAt(System.Int32,`0)">
            <summary>
            插入一个子节点。
            </summary>
            <param name="i">插入的节点的位置。</param>
            <param name="node">节点。</param>
            <returns>增加的节点。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.RemoveNamedItem(System.String)">
            <summary>
            从 HtmlNamedNodeMap 中移除节点。
            </summary>
            <returns>从此 HtmlNamedNodeMap 中移除的 HtmlNode；如果未找到匹配的节点，则为 null。</returns>
            <param name="name">要移除的节点的限定名。该名称针对匹配节点的 <see cref="P:Py.Html.HtmlNode.Name" /> 属性进行匹配。 </param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.RemoveNamedItem(System.String,System.String)">
            <summary>
            移除具有匹配的 <see cref="P:Py.Html.HtmlNode.LocalName"/> 和 <see cref="P:Py.Html.HtmlNode.NamespaceURI"/> 的节点。
            </summary>
            <param name="localName">要移除的节点的本地名称。</param>
            <param name="namespaceURI">要移除的节点的命名空间 URI。</param>
            <returns>
            移除的 <see cref="T:Py.Html.HtmlNode"/>；如果未找到匹配的节点，则为 null。
            </returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.RemoveNodeAt(System.Int32)">
            <summary>
            移除一个子节点。
            </summary>
            <param name="i">节点的位置。</param>
            <returns>移除的节点；如果未找到匹配的节点，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.ReplaceNodeAt(System.Int32,`0)">
            <summary>
            替换一个子节点。
            </summary>
            <param name="i">替换的节点位置。</param>
            <param name="node">替换的节点。</param>
            <returns>移除的节点；如果未找到匹配的节点，则为 null。</returns>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.Remove(`0)">
            <summary>
            从集合中移除指定的节点。
            </summary>
            <returns>移除的节点，或者，如果在集合中找不到此节点，则为 null。</returns>
            <param name="node">要移除的节点。</param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.SetNamedItem(`0)">
            <summary>
            使用其 Name 属性添加 <see cref="T:Py.Html.HtmlNode"/>
            </summary>
            <param name="node">要存储在 HtmlNamedNodeMap 中的 HtmlNode。如果具有该名称的节点已存在于映射中，则用新节点将其替换。</param>
            <returns>
            如果 <paramref name="node"/> 替换具有相同名称的现有节点，则返回旧节点；否则返回 null。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="node"/> 是从不同于创建此 HtmlNamedNodeMap 的 <see cref="T:Py.Html.HtmlDocument"/> 创建的；或者 HtmlNamedNodeMap 是只读的。 </exception>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.RemoveAll">
            <summary>
            从集合中移除所有节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.RemoveAt(System.Int32)">
            <summary>
            从集合中移除与指定的索引对应的节点。
            </summary>
            <returns>如果在指定索引处没有节点，则返回 null。</returns>
            <param name="i">要移除的节点的索引。第一个节点的索引为 0。</param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.CopyTo(`0[],System.Int32)">
            <summary>
            从该集合中将所有 <see cref="T:Py.Html.HtmlAttribute"/> 对象复制到给定数组。
            </summary>
            <param name="array">从该集合向其中复制对象的数组。</param>
            <param name="index">array 中复制开始处的索引。</param>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            有关此成员的说明，请参见 <see cref="M:Py.Html.HtmlAttributeCollection.CopyTo(Py.Html.HtmlAttribute[],System.Int32)"/>。
            </summary>
            <param name="array">从该集合向其中复制对象的数组。</param>
            <param name="index">array 中复制开始处的索引。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.Count">
            <summary>
            获取 HtmlNamedNodeMap 中的节点数。
            </summary>
            <returns>节点数。</returns>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.Nodes">
            <summary>
            获取当前的所有节点。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.Item(System.String)">
            <summary>
            检索通过名称指定的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>具有指定名称的 HtmlNode；如果未找到匹配节点，则为 null。</returns>
            <param name="name">要检索节点的限定名。它针对匹配节点的 <see cref="P:Py.Html.HtmlNode.Name" /> 属性进行匹配。 </param>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.Item(System.String,System.String)">
            <summary>
            检索通过名称指定的 <see cref="T:Py.Html.HtmlNode" />。
            </summary>
            <returns>具有指定名称的 HtmlNode；如果未找到匹配节点，则为 null。</returns>
            <param name="localName">要检索节点的限定名。它针对匹配节点的 <see cref="P:Py.Html.HtmlNode.Name" /> 属性进行匹配。 </param>
            <param name="namespaceURI">要检索节点的名字空间地址。它针对匹配节点的 <see cref="P:Py.Html.HtmlNode.NamespaceURI" /> 属性进行匹配。</param>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.Item(System.Int32)">
            <summary>
            获取具有指定索引的节点。
            </summary>
            <returns>指定索引处的 <see cref="T:Py.Html.HtmlAttribute" />。</returns>
            <param name="i">节点的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">正在传递的索引超出范围。</exception>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Html.HtmlNamedNodeMap`1.SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:Py.Html.HtmlNamedNodeMap">
            <summary>
            表示可以通过名称或索引访问的节点的集合。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlNamedNodeMap.#ctor(Py.Html.HtmlNode)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlNamedNodeMap"/> 的新实例。
            </summary>
            <param name="parent">父节点。</param>
        </member>
        <member name="F:Py.Html.HtmlElementList._isMatch">
            <summary>
            说明节点是否满点要求的遍历工具。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlNodeOrder">
            <summary>
            描述一个节点相对于另一个节点的文档顺序。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.Unknown">
            <summary>
            在文档顺序中无法确定节点彼此之间的相对位置。如果两个节点驻留在不同的树中，则可能发生这种情况。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.BeforeBegin">
            <summary>
            此导航器的当前节点位于所提供的导航器的当前节点之前。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.AfterBegin">
            <summary>
            此导航器的当前节点位于所提供的导航器的子节点之前。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.BeforeEnd">
            <summary>
            此导航器的当前节点位于所提供的导航器的子节点之后。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.AfterEnd">
            <summary>
            此导航器的当前节点位于所提供的导航器的当前节点之后。
            </summary>
        </member>
        <member name="F:Py.Html.HtmlNodeOrder.Same">
            <summary>
            两个导航器定位在同一个节点上。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlImageElement">
            <summary>
            表示一个 img 标签。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlImageElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlImageElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="M:Py.Html.HtmlImageElement.Download(System.Boolean)">
            <summary>
            下载当前图片到内存。
            </summary>
            <returns>图片内容。</returns>
            <param name="thumb">是否需要以指定的格式缩放图片。</param>
        </member>
        <member name="M:Py.Html.HtmlImageElement.Download(System.String)">
            <summary>
            下载当前图片到指定文件夹。
            </summary>
            <param name="folder">要操作的字符串。</param>
            <returns>返回文件的保存位置。</returns>
        </member>
        <member name="P:Py.Html.HtmlImageElement.Src">
            <summary>
            获取或设置当前图片地址。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlImageElement.Height">
            <summary>
            获取或设置当前图片高度。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlImageElement.Width">
            <summary>
            获取或设置当前图片宽度。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlImageElement.Border">
            <summary>
            获取或设置当前图片宽度。
            </summary>
        </member>
        <member name="T:Py.Collections.TreeNode`1">
            <summary>
            表示一棵树。
            </summary>
            <typeparam name="T">内容类型。</typeparam>
        </member>
        <member name="M:Py.Collections.TreeNode`1.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:Py.Collections.TreeNode`1"/> 的新实例。
            </summary>
            <param name="name">节点的名字。</param>
        </member>
        <member name="M:Py.Collections.TreeNode`1.#ctor">
            <summary>
            初始化 <see cref="T:Py.Collections.TreeNode`1"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Collections.TreeNode`1.#ctor(System.String,`0)">
            <summary>
            初始化 <see cref="T:Py.Collections.TreeNode`1"/> 的新实例。
            </summary>
            <param name="name">节点的名字。</param>
            <param name="value">节点所在值。</param>
        </member>
        <member name="M:Py.Collections.TreeNode`1.CreateSubTreeNode(System.String,`0)">
            <summary>
            生成当前节点的子节点。
            </summary>
            <param name="name">节点的名字。</param>
            <param name="value">节点所在值。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:Py.Collections.TreeNode`1.NodeValue">
            <summary>
            获取或设置当前节点值。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.ParentNode">
            <summary>
            获取当前树父节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.Depth">
            <summary>
            获取当前节点的深度。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.NextSibling">
            <summary>
            获取或设置下一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.PreciousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.ChildNodes">
            <summary>
            获取当前节点的子节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.Name">
            <summary>
            获取单元的名字。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.Py#Collections#ITreeNode{T}#NextSibling">
            <summary>
            获取下一个相邻的节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNode`1.Py#Collections#ITreeNode{T}#PreviousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="T:Py.Collections.TreeNodeList`1">
            <summary>
            树节点列表。
            </summary>
            <typeparam name="T">内容类型。</typeparam>
        </member>
        <member name="F:Py.Collections.TreeNodeList`1._firstChild">
            <summary>
            首个子节点。
            </summary>
        </member>
        <member name="M:Py.Collections.TreeNodeList`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的  IEnumerator 对象。
            </returns>
        </member>
        <member name="M:Py.Collections.TreeNodeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:Py.Collections.TreeNodeList`1.First">
            <summary>
            获取或设置首节点。
            </summary>
        </member>
        <member name="P:Py.Collections.TreeNodeList`1.Item(System.Int32)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="i">位置。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:Py.Collections.TreeNodeList`1.Item(System.String)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="name">节点名。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:Py.Collections.TreeNodeList`1.Count">
            <summary>
            获取子节点数目。
            </summary>
        </member>
        <member name="T:Py.RunTime.SerializationHelper">
            <summary>
            序列化辅助类。
            </summary>
        </member>
        <member name="F:Py.RunTime.SerializationHelper._serializerDictionary">
            <summary>
            序列化字典。
            </summary>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.GetSerializer(System.Type)">
            <summary>
            获得xml序列化结果。
            </summary>
            <param name="type">类型。</param>
            <returns>xml序列化。</returns>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.Load(System.Type,System.String)">
            <summary>
            反序列化。
            </summary>
            <param name="type">对象类型。</param>
            <param name="filePath">文件路径。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.Save(System.Object,System.String)">
            <summary>
            序列化。
            </summary>
            <param name="obj">对象。</param>
            <param name="filePath">文件路径。</param>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.Serialize(System.Object)">
            <summary>
            xml序列化成字符串。
            </summary>
            <param name="obj">对象。</param>
            <returns>xml字符串。</returns>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.DeSerialize(System.Type,System.String)">
            <summary>
             xml反序列化。
            </summary>
            <param name="type">类型。</param>
            <param name="s">资料。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.Serialize(System.Data.DataSet)">
            <summary>
            将DataSet序列化为2进制数组byte[]。
            </summary>
            <param name="ds">要序列化的DataSet</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.RunTime.SerializationHelper.DeSerialize(System.Byte[])">
            <summary>
            将2进制数组byte[]反序列化为DataSet。
            </summary>
            <param name="bUserData">要反序列化的2进制数组。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Py.Core.QC">
            <summary>
            提供快速转换的函数。
            </summary>
        </member>
        <member name="M:Py.Core.QC.Int(System.String)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回 0 。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Int("a");
                     Console.Write(value);  // 输出   0
                     value = Text.Int("11.333");
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Int(System.String,System.Int32)">
            <summary>
            将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
            <example><code>
            using Py.Core;
            class Sample {
            public static void Main(){
            string value = Text.Int("a");
            Console.Write(value);  // 输出   0
            value = Text.Int("11.333");
            Console.Write(value);  // 输出   11
            }
            }
            </code></example>
        </member>
        <member name="M:Py.Core.QC.Int(System.Object)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回 0。 
             </summary>
             <param name="value">要处理的变量。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "111z";
                     string value = Text.Int(a);
                     Console.Write(value);  // 输出   0
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Int(System.Object,System.Int32)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要处理的变量。</param>
             <param name="dft">默认值。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Long(System.String,System.Int64)">
            <summary>
            将数字的字符串表示形式转换为它的等效 64 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:Py.Core.QC.Long(System.Object,System.Int64)">
            <summary>
            将数字的字符串表示形式转换为它的等效 64 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:Py.Core.QC.Short(System.String,System.Int16)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Short(System.Object,System.Int16)">
            <summary>
            将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>16位整数。</returns>
            <example><code>
            using Py.Core;
            class Sample {
            public static void Main(){
            string a = "111";
            string value = Text.Int(a, 9);
            Console.Write(value);  // 输出   111
            value = Text.Int("11.333", 9);
            Console.Write(value);  // 输出   11
            }
            }
            </code></example>
        </member>
        <member name="M:Py.Core.QC.Double(System.String,System.Double)">
             <summary>
             将数字的字符串表示形式转换为它的等效双精度浮点数。失败返回 0 。
             </summary>
             <param name="value">要做处理字符串。</param>
             <param name="dft">默认值。</param>
             <returns>小数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Double(System.Object,System.Double)">
            <summary>
            将数字的字符串表示形式转换为它的等效双精度浮点数。失败返回 0 。
            </summary>
            <param name="value">要做处理字符串。</param>
            <param name="dft">默认值。</param>
            <returns>小数。</returns>
        </member>
        <member name="M:Py.Core.QC.Float(System.String,System.Single)">
             <summary>
             将数字的字符串表示形式转换为它的等效单精度浮点数。失败返回 0 
             </summary>
             <param name="value">要做处理字符串</param>
             <param name="dft">默认值。</param>
             <returns>小数</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Float(System.Object,System.Single)">
             <summary>
             将数字的字符串表示形式转换为它的等效单精度浮点数。失败返回 0 
             </summary>
             <param name="value">要做处理字符串</param>
             <param name="dft">默认值。</param>
             <returns>小数</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Decimal(System.String,System.Decimal)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Decimal(System.Object,System.Decimal)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16位整数。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a, 9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333", 9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Bool(System.Object)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Bool(System.String,System.Boolean)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.Bool(System.Object,System.Boolean)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.BoolNull(System.String)">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:Py.Core.QC.BoolNull(System.String,System.Nullable{System.Boolean})">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:Py.Core.QC.BoolNull(System.Object)">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:Py.Core.QC.BoolNull(System.Object,System.Nullable{System.Boolean})">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:Py.Core.QC.BoolNull(System.Int32)">
             <summary>
             转到  bool?
             </summary>
             <param name="value">要处理的数字。</param>
             <returns>如果数字1返回true，0返回false，2返回null。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger(new String[]{"4"});
                     Console.Write(d);  // 输出  true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.IntNull(System.String,System.Nullable{System.Int32})">
            <summary>
            转到 int?  。
            </summary>
            <param name="value">要处理的数字。</param>
            <param name="dft">默认值。</param>
            <returns>整数。</returns>
        </member>
        <member name="M:Py.Core.QC.IntNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转到 int?  。
            </summary>
            <param name="value">要处理的数字。</param>
            <param name="dft">默认值。</param>
            <returns>整数。</returns>
        </member>
        <member name="M:Py.Core.QC.DateTime(System.String)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>日期。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.DateTime(System.String,System.DateTime)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认时间。</param>
             <returns>日期。</returns>
             <example><code>
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01",DateTime.Now);
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.DateTime(System.Object)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>日期。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.DateTime(System.Object,System.DateTime)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认时间。</param>
             <returns>日期。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:Py.Core.QC.DateTimeNull(System.Object,System.Nullable{System.DateTime})">
            <summary>
            日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认时间。</param>
            <returns>日期。</returns>
        </member>
        <member name="F:Py.Core.QC._stringConverter">
            <summary>
            当前使用的字符串转换器。
            </summary>
        </member>
        <member name="M:Py.Core.QC.String(System.Collections.IEnumerable)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Collections.IEnumerable,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Data.DataTable,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Data.DataTable)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Data.DataRow)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Data.DataRow,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Array)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Array,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Object)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Object,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Collections.IDictionary)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.String(System.Collections.IDictionary,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.QC.Guid(System.String)">
            <summary>
            将字符串表示全局唯一标示。失败返回默认值。 
            </summary>
            <param name="value">要做处理字符串。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:Py.Core.QC.Guid(System.String,System.Guid)">
            <summary>
            将字符串表示全局唯一标示。失败返回默认值。 
            </summary>
            <param name="value">要做处理字符串。</param>
            <param name="dft">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:Py.Core.QC.IP(System.String)">
            <summary>
            IP地址转长整型。
            </summary>
            <param name="value">输入ip地址 格式127.0.0.1 式。</param>		
            <returns>返回转化成整型后的ip地址,格式不对则返回-1 。</returns>			
        </member>
        <member name="M:Py.Core.QC.IP(System.Int64)">
            <summary>
            长整型转IP地址。
            </summary>
            <param name="value">输入ip地址的整型格式。</param>		
            <returns>转化成ip地址，格式127.0.0.1 。</returns>			
        </member>
        <member name="M:Py.Core.QC.URL(System.String)">
             <summary>
             转换地址。
             </summary>
             <param name="input">要做处理的字符串。</param>
             <returns>地址。</returns>
             <example><code>
             using System.Array;
             using Py.Core;
             class Sample {
            
                 public static void Main(){
                     string input = Text.URL("www.baidu.com");
                     Console.Write(input);  // 输出   http://www.baidu.com
                 }
             
             }
             </code></example>
        </member>
        <member name="P:Py.Core.QC.StringConverter">
            <summary>
            获取或设置使用的字符串转换器。
            </summary>
        </member>
        <member name="T:Py.Html.NameTable">
            <summary>
            实现单线程 <see cref="T:Py.Html.HtmlNameTable" />。
            </summary>
        </member>
        <member name="M:Py.Html.NameTable.#ctor">
            <summary>
            初始化 NameTable 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Html.NameTable.Add(System.String)">
            <summary>
            将指定的字符串原子化，并将其添加到 NameTable。
            </summary>
            <param name="key">要添加的字符串。</param>
            <returns>原子化字符串；如果 NameTable 中已存在字符串，则为现有字符串。</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
        </member>
        <member name="M:Py.Html.NameTable.Add(System.Char[],System.Int32,System.Int32)">
            <summary>
            将指定的字符串原子化，并将其添加到 NameTable。
            </summary>
            <param name="key">包含要添加字符串的字符数组。</param>
            <param name="start">数组中指定字符串第一个字符的从零开始的索引。</param>
            <param name="len">字符串中的字符数。</param>
            <returns>
            原子化字符串；如果 NameTable 中已存在字符串，则为现有字符串。如果 <paramref name="len"/> 为零，则返回 String.Empty。
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start"/>- 或 - <paramref name="start"/> &gt;= <paramref name="key"/>.Length - 或 - <paramref name="len"/> &gt;= <paramref name="key"/>.Length 如果 <paramref name="len"/> =0，则上述条件不会导致引发异常。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="len"/> &lt; 0. </exception>
        </member>
        <member name="M:Py.Html.NameTable.Get(System.String)">
            <summary>
            获取具有指定值的原子化字符串。
            </summary>
            <param name="value">要查找的名称。</param>
            <returns>原子化字符串对象；如果字符串尚未原子化，则为 null。</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> 为 null。 </exception>
        </member>
        <member name="M:Py.Html.NameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            获取包含相同字符（与给定数组中指定范围的字符相同）的原子化字符串。
            </summary>
            <param name="key">包含要查找的名称的字符数组。</param>
            <param name="start">数组中指定名称第一个字符的从零开始的索引。</param>
            <param name="len">名称中的字符数。</param>
            <returns>
            原子化字符串；如果字符串尚未原子化，则为 null。如果 <paramref name="len"/> 为零，则返回 String.Empty。
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start"/>- 或 - <paramref name="start"/> &gt;= <paramref name="key"/>.Length - 或 - <paramref name="len"/> &gt;= <paramref name="key"/>.Length 如果 <paramref name="len"/> =0，则上述条件不会导致引发异常。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="len"/> &lt; 0. </exception>
        </member>
        <member name="T:Py.Web.RH">
            <summary>
            提供网站的操作辅助工具。
            </summary>
        </member>
        <member name="M:Py.Web.RH.SetCookie(System.String,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.SetCookie(System.String,System.String,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns></returns>
        </member>
        <member name="M:Py.Web.RH.SetCookie(System.String,System.String,System.Int32)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <param name="expires">过期时间。 (单位为天) -1 表示永不超时。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.SetCookie(System.String,System.String,System.Int32,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <param name="expires">过期时间。 (单位为天) -1 表示永不超时。</param>
            <param name="domain">属于的站点。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.WriteCookie(System.String,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.WriteCookie(System.String,System.String,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns></returns>
        </member>
        <member name="M:Py.Web.RH.WriteCookie(System.String,System.String,System.Int32)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <param name="expires">过期时间。 (单位为天) -1 表示永不超时。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.WriteCookie(System.String,System.String,System.Int32,System.String)">
            <summary>
            写入一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <param name="value">值。</param>
            <param name="expires">过期时间。 (单位为天) -1 表示永不超时。</param>
            <param name="domain">属于的站点。</param>
            <returns>HttpCookie对象。 </returns>
        </member>
        <member name="M:Py.Web.RH.RemoveCookie(System.String)">
            <summary>
            删除一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
        </member>
        <member name="M:Py.Web.RH.RemoveCookieX(System.String)">
            <summary>
            删除一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
        </member>
        <member name="M:Py.Web.RH.RemoveCookie(System.String,System.String)">
            <summary>
            删除一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="key">使用的键。</param>
        </member>
        <member name="M:Py.Web.RH.GetCookie(System.String)">
            <summary>
            读一个cookie值。
            </summary>
            <param name="name">名称。</param>
            <returns>cookie值。</returns>
        </member>
        <member name="M:Py.Web.RH.SetSession(System.String,System.Object)">
            <summary>
            设置Session 。
            </summary>
            <param name="name">名。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Web.RH.GetSession(System.String)">
            <summary>
            读取一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.RemoveSession(System.String)">
            <summary>
            删除一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
        </member>
        <member name="M:Py.Web.RH.GetSession(System.String,System.Object)">
            <summary>
            读取一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="dft">默认值。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.GetSessionString(System.String,System.String)">
            <summary>
            读取一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="dft">默认值。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.GetSessionInt(System.String,System.Int32)">
            <summary>
            读取一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="dft">默认值。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.GetSession``1(System.String)">
            <summary>
            获取一个类型的变量。
            </summary>
            <param name="name">名。</param>
            <returns>变量。</returns>
        </member>
        <member name="M:Py.Web.RH.GetQueryString(System.String)">
            <summary>
            从请求查询中获取一个值。
            </summary>
            <param name="name">名称。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Web.RH.GetQueryString(System.String,System.String)">
            <summary>
            从请求查询中获取一个值。如果找不到指定值，返回默认值。
            </summary>
            <param name="name">名称。</param>
            <param name="dft">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Web.RH.GetForm(System.String)">
            <summary>
            从请求表单中获取一个值。
            </summary>
            <param name="name">名称。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Web.RH.GetForm(System.String,System.String)">
            <summary>
            从请求表单中获取一个值。如果找不到指定值，返回默认值。
            </summary>
            <param name="name">名称。</param>
            <param name="dft">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Py.Web.RH.SetApplication(System.String,System.Object)">
            <summary>
            设置Application 。
            </summary>
            <param name="name">名。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Py.Web.RH.GetApplication(System.String)">
            <summary>
            读取一个Application的字符串形式。
            </summary>
            <param name="name">名。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.GetApplication(System.String,System.Object)">
            <summary>
            读取一个Application的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="dft">默认值。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.RemoveApplication(System.String)">
            <summary>
            删除一个Session的字符串形式。
            </summary>
            <param name="name">名。</param>
        </member>
        <member name="M:Py.Web.RH.GetApplicationString(System.String,System.String)">
            <summary>
            读取一个Application的字符串形式。
            </summary>
            <param name="name">名。</param>
            <param name="dft">默认值。</param>
            <returns>内容。</returns>
        </member>
        <member name="M:Py.Web.RH.GetApplication``1(System.String)">
            <summary>
            获取一个类型的变量。
            </summary>
            <param name="name">名。</param>
            <returns>变量。</returns>
        </member>
        <member name="M:Py.Web.RH.ResponseScript(System.String)">
            <summary>
            输出脚本。
            </summary>
            <param name="script">脚本的内容。</param>
        </member>
        <member name="M:Py.Web.RH.ResponseFunctionCall(System.String,System.String)">
            <summary>
            输出函数调用的脚本。
            </summary>
            <param name="function">调用的函数。</param>
            <param name="value">参数。</param>
        </member>
        <member name="M:Py.Web.RH.ResponseAlert(System.String)">
            <summary>
            输出一个警告的脚本。
            </summary>
            <param name="value">要警告的文字。</param>
        </member>
        <member name="M:Py.Web.RH.ResponseAlertAndGoBack(System.String)">
            <summary>
            输出一个警告然后返回的脚本。
            </summary>
            <param name="value">要警告的文字。</param>
        </member>
        <member name="M:Py.Web.RH.ResponseAlertAndClose(System.String)">
            <summary>
            输出一个警告然后关闭浏览器的脚本。
            </summary>
            <param name="value">要警告的文字。</param>
        </member>
        <member name="M:Py.Web.RH.ResponseRederctDelay(System.String,System.Int32)">
            <summary>
            输出一个在指定秒内转向其他地址的脚本。
            </summary>
            <param name="url">要转换的地址。</param>
            <param name="delay">等待的时间。</param>
        </member>
        <member name="M:Py.Web.RH.Write(System.String)">
            <summary>
            将一个字符串写入 HTTP 响应输出流。
            </summary>
            <param name="value">要写入 HTTP 输出流的字符串。</param>
        </member>
        <member name="M:Py.Web.RH.Write(System.Object)">
            <summary>
            将一个字符串写入 HTTP 响应输出流。
            </summary>
            <param name="value">要写入 HTTP 输出流的字符串。</param>
        </member>
        <member name="M:Py.Web.RH.Write(System.String,System.Object[])">
            <summary>
            将一个字符串写入 HTTP 响应输出流。
            </summary>
            <param name="value">要写入 HTTP 输出流的字符串。</param>
            <param name="args">用于格式化的参数。</param>
        </member>
        <member name="M:Py.Web.RH.CheckRequests">
            <summary>
            综合判段一个请求是否含不安全的内容。
            </summary>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
        </member>
        <member name="T:Py.Collections.ObjectModel.OwnedCollection`2">
            <summary>
            为泛型集合提供基类。
            </summary>
            <typeparam name="TOwner">所有者。</typeparam>
            <typeparam name="T">元素类型。</typeparam>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedCollection`2.#ctor(`0)">
            <summary>
            初始化空的 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedCollection`2.#ctor(`0,System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedCollection`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            初始化 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="collection">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> 为空。</exception>
        </member>
        <member name="M:Py.Collections.ObjectModel.OwnedCollection`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            将 <see cref="T:Py.Collections.ObjectModel.EntryCollection`2"/>初始化为类的新实例初始化为指定列表的包装。
            </summary>
            <param name="owner">所有者。</param>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="P:Py.Collections.ObjectModel.OwnedCollection`2.Owner">
            <summary>
            获取或设置当前的所有者。
            </summary>
        </member>
        <member name="T:Py.Zip.Zlib.ZlibCodec">
             <summary>
             为 ZLIB， DEFLATE (IETF RFC1950 and RFC1951) 准备的编码解码器。此类不可以继承。
             </summary>
            
             <remarks>
             这个类根据 Deflate 算法压缩和解压数据， ZLIB 格式参 <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> 和 <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>。
             </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.InputBuffer">
            <summary>
            输入的缓存。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.NextIn">
            <summary>
            开始输入的位置。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            可用的输入字节。
            </summary>
            <remarks>
            一般情况，在第一次Inflate() 或 Deflate() 时，AvailableBytesIn 设为 InputBuffer.Length 。
            在 Inflate/Deflate 执行时，AvailableBytesIn 被修改。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            在 Inflate()/Deflate() 的全部输入字节数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            输出的缓存。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.NextOut">
            <summary>
            开始输出的位置。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            可用的输出字节。
            </summary>
            <remarks>
            一般情况，在第一次Inflate() 或 Deflate() 时，AvailableBytesIn 设为 0  。
            在 Inflate/Deflate 执行时，AvailableBytesIn 被修改。
            </remarks>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            在 Inflate()/Deflate() 的全部输出字节数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.Message">
            <summary>
            错误的信息。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.DState">
            <summary>
            操作 Deflate 的类。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.IState">
            <summary>
            操作 Inflate 的类。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.Adler32">
            <summary>
            Adler32 校验码。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.CompressLevel">
            <summary>
            压缩等级。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.WindowBits">
            <summary>
            窗口位数。
            </summary>
        </member>
        <member name="F:Py.Zip.Zlib.ZlibCodec.Strategy">
            <summary>
            压缩策略。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.#ctor">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.ZlibCodec"/> 的新实例。
            </summary>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.#ctor(Py.Zip.Zlib.CompressionMode)">
            <summary>
            初始化 <see cref="T:Py.Zip.Zlib.ZlibCodec"/> 的新实例。
            </summary>
            <param name="mode">指示当前操作是压缩或解压。</param>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            初始化 inflation 状态。
            </summary>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             初始化 inflation 状态。可选需排除 RFC1950 的头字节。
             </summary>
             <param name="expectRfc1950Header">指示是否排除 RFC1950 的头字节。</param>
            
             <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            初始化 inflation 状态，指明窗口位数。
            </summary>
            <param name="windowBits">窗口位数。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
            <summary>
            初始化 inflation 状态，指明窗口位数。可选需排除 RFC1950 的头字节。
            </summary>
            <param name="expectRfc1950Header">指示是否排除 RFC1950 的头字节。</param>
            <param name="windowBits">窗口位数。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.Inflate(Py.Zip.Zlib.FlushType)">
             <summary>
             压缩 InputBuffer 的数据, 存放到 OutputBuffer。
             </summary>
             <remarks>
             必须先设置 InputBuffer ， OutputBuffer， NextIn ， NextOut ， AvailableBytesIn 和 AvailableBytesOut 。
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibState.Success &amp;&amp; rc != ZlibState.StreamEnd)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibState.StreamEnd &amp;&amp; rc != ZlibState.Success)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">缓存类型。</param>
             <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.EndInflate">
            <summary>
            停止处理。
            </summary>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.SyncInflate">
            <summary>
            异步处理。
            </summary>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            初始化 deflation 状态。
            </summary>
            <remarks>
            默认使用 MAX 窗口大小和默认等级的压缩。
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize) {
               compressor.Deflate(FlushType.None);
             }
             
             while (true) {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibState.StreamEnd) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflate(Py.Zip.Zlib.CompressionLevel)">
            <summary>
            初始化 deflation 状态。指定压缩等级。
            </summary>
            <remarks>
            默认使用最大窗口大小。
            </remarks>
            <param name="level">压缩等级。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflate(Py.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            初始化 deflation 状态。指定压缩等级，使用 Rfc1950 文件头。
            </summary>
            <remarks>
            默认使用最大窗口大小。
            </remarks>
            <param name="level">压缩等级。</param>
            <param name="wantRfc1950Header">是否使用 Rfc1950 文件头。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflate(Py.Zip.Zlib.CompressionLevel,System.Int32)">
            <summary>
            初始化 deflation 状态。 指定压缩等级和窗口大小。
            </summary>
            <remarks>
            使用指定的窗口大小。
            </remarks>
            <param name="level">压缩等级。</param>
            <param name="bits">创建的窗口大小。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflate(Py.Zip.Zlib.CompressionLevel,System.Int32,System.Boolean)">
            <summary>
            初始化 deflation 状态。 指定压缩等级，使用 Rfc1950 文件头，窗口大小。
            </summary>
            <param name="level">压缩等级。</param>
            <param name="wantRfc1950Header">是否使用 Rfc1950 文件头。</param>
            <param name="bits">创建的窗口大小。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.InitializeDeflateInternal(System.Boolean)">
            <summary>
            初始化 deflation 状态。
            </summary>
            <param name="wantRfc1950Header">是否使用 Rfc1950 文件头。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.Deflate(Py.Zip.Zlib.FlushType)">
            <summary>
            解压数据。
            </summary>
            <remarks>
            必须先设置 InputBuffer 和 OutputBuffer 。
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibState.Success &amp;&amp; rc != ZlibState.StreamEnd)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibState.StreamEnd &amp;&amp; rc != ZlibState.Success)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">输出方式。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.EndDeflate">
            <summary>
            结束 deflation 状态。
            </summary>
            <remarks>
            在 Deflate() 后调用。
            </remarks>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            重置解压状态。
            </summary>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.SetDeflateParams(Py.Zip.Zlib.CompressionLevel,Py.Zip.Zlib.CompressionStrategy)">
            <summary>
            设置解压参数。
            </summary>
            <param name="level">压缩等级。</param>
            <param name="strategy">压缩策略。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            设置压缩时的字典。
            </summary>
            <param name="dictionary">字典。</param>
            <returns>如果正常返回 ZlibState.Success 。</returns>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.FlushPending">
            <summary>
            输出内容。
            </summary>
            <seealso cref="M:Py.Zip.Zlib.ZlibCodec.ReadBuf(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Py.Zip.Zlib.ZlibCodec.ReadBuf(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前输入流读取指定内容到数组的缓存。
            </summary>
            <param name="buf">缓存。</param>
            <param name="start">开始的位置。</param>
            <param name="count">大小。</param>
            <returns>读取的长度。</returns>
            <remarks>
            操作将自动更新检验码。
            </remarks>
            <seealso cref="M:Py.Zip.Zlib.ZlibCodec.FlushPending"/>
        </member>
        <member name="F:Py.Zip.ZipConstants.ZipEntrySignature">
            <summary>
            标识 ZIP 单元的文件头。
            </summary>
        </member>
        <member name="F:Py.Zip.ZipConstants.ZipDirEntrySignature">
            <summary>
            标识 ZIP 文件夹单元的文件头。
            </summary>
        </member>
        <member name="T:Py.Windows.Win32API">
            <summary>
            包含 Windows 系统 API。
            </summary>
        </member>
        <member name="M:Py.Windows.Win32API.MessageBox(System.IntPtr,System.String,System.String,System.UInt32)">
             <summary>
             弹出对话框。
             </summary>
             <param name="hWnd">标识将被创建的消息框的拥有窗口。如果此参数为NULL，则消息框没有拥有窗口。</param>
             <param name="lpszText">指向一个以NULL结尾的、含有将被显示的消息的字符串的指针。</param>
             <param name="lpszCaption">指向一个以NULL结尾的、用于对话框标题的字符串的指针。</param>
             <param name="nType">指定一个决定对话框的内容和行为的位标志集。此参数可以为下列标志组中标志的组合。</param>
             <returns>如果没有足够的内存来创建消息框，则返回值为零。如果函数调用成功，则返回值为下列对话框返回的菜单项目值中的一个：
            
             IDABORT：Abort 按钮被选中。IDCANCEL：Cancel按钮被选中。IDIGNORE：Ignore按钮被选中。
            
             IDNO：NO按钮被选中。IDOK：OK按钮被选中。IDRETRY：RETRY按钮被选中。
            
             IDYES：YES按钮被选中。
            
             如果一个消息框有一个Cancel按钮，且如果Esc键被按下或Cancel键被选择，则函数返回IDCANCEL值。如果消息框没有Cancel按钮，则按Esc键没有作用。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
            检索指定的对话框中的控制句柄。
            </summary>
            <param name="hDlg">含有控制的对话框。</param>
            <param name="nControlID">被检索的控制标识符。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            可以通过使用任何父子窗口对来使用GetDlgltem函数，而不仅只是对话框。只要hDlg参数指定一个父窗口，且子窗口有一个独立的标识符（象CreateWindow中hMenu参数指定的或创建子窗口的CreateWindowEx指定的那样），GetDlgltem就会返回一个有效的句柄到子窗口。Windows CE：GetDlgltem函数只为对话框中的直接于控制工作，它不通过嵌套的对话框来搜寻。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.EnumThreadWindows(System.Int32,Py.Windows.EnumWindowsCallback,System.Int32)">
            <summary>
            枚举与指定任务相关的窗口。
            </summary>
            <param name="dwThreadId">某线程的标识符，它的窗口将被枚举。</param>
            <param name="lpfn">向一个函数的指针，要求为每个子窗口都调用这个函数。用AddressOf运算符获得函数在标准模式下的地址。</param>
            <param name="lParam">在枚举期间，传递给dwcbkd32d.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的。</param>
            <returns>非零表示成功，零表示失败。</returns>
            <remarks>
            子窗口下属的其他子窗口也可由这个函数枚举。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.EnumChildWindows(System.IntPtr,Py.Windows.EnumWindowsCallback,System.Int32)">
            <summary>
            为指定的父窗口枚举子窗口。
            </summary>
            <param name="hwndParent">欲枚举子窗口的父窗口的句柄。</param>
            <param name="lpEnumFunc">为每个子窗口调用的函数的指针。用AddressOf运算符获得函数在一个标准模块中的地址。</param>
            <param name="lParam">在枚举期间，传递给EnumWindows事件的值。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.EnumWindows(Py.Windows.EnumWindowsCallback,System.Int32)">
            <summary>
            枚举窗口列表中的所有父窗口（顶级和被所有窗口）。
            </summary>
            <param name="lpEnumFunc">为每个子窗口调用的函数的指针。用AddressOf运算符获得函数在一个标准模块中的地址。</param>
            <param name="lParam">在枚举期间，传递给EnumWindows事件的值。</param>
            <returns>非零表示成功，零表示失败。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindow(System.IntPtr,Py.Windows.GW)">
            <summary>
            获得一个窗口的句柄，该窗口与某源窗口有特定的关系。
            </summary>
            <param name="hWnd">源窗口。</param>
            <param name="uCmd">指定结果窗口与源窗口的关系。</param>
            <returns>由wCmd决定的一个窗口的句柄。如没有找到相符窗口，或者遇到错误，则返回零值。</returns>
            <remarks>
            兄弟或同级是指在整个分级结构中位于同一级别的窗口。如某个窗口有五个子窗口，那五个窗口就是兄弟窗口。尽管GetWindow可用于枚举窗口，但倘若要在枚举过程中重新定位、创建和清除窗口，那么EnumWindows和EnumChildWindows更为可靠。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.FindWindow(System.String,System.String)">
            <summary>
            获得一个顶层窗口的句柄，该窗口的类名和窗口名与给定的字符串相匹配。这个函数不查找子窗口。在查找时不区分大小写。
            </summary>
            <param name="lpClassName">指向一个指定了类名的空结束字符串，或一个标识类名字符串的成员的指针。如果该参数为一个成员，则它必须为前次调用theGlobafAddAtom函数产生的全局成员。该成员为16位，必须位于IpClassName的低 16位，高位必须为 0。</param>
            <param name="lpWindowName">指向一个指定了窗口名（窗口标题）的空结束字符串。如果该参数为空，则为所有窗口全匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为NULL。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            加亮任务栏。这意味着窗口的标题和说明文字会发生变化，似乎从活动切换到非活动状态、或反向切换。通常对不活动的窗口应用这个函数，引起用户的注意。
            </summary>
            <param name="hWnd">要闪烁显示的窗口的句柄。</param>
            <param name="bInvert">表示切换窗口标题；FALSE返回最初状态。</param>
            <returns>如窗口在调用前处于活动状态，则返回TRUE（非零）。</returns>
            <remarks>
            该函数通常与一个计数器组合使用，生成连续的闪烁效果。在windows nt及windows for workgroup中，bInvert参数会被忽略。但在windows 95中不会忽略
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            获得一个窗口的句柄，该窗口的类名和窗口名与给定的字符串相匹配。这个函数查找子窗口，从排在给定的子窗口后面的下一个子窗口开始。在查找时不区分大小写。
            </summary>
            <param name="hwndParent">要查找子窗口的父窗口句柄。如果hwnjParent为NULL，则函数以桌面窗口为父窗口，查找桌面窗口的所有子窗口。 如果hwndParent是HWND_MESSAGE，函数仅查找所有消息窗口。</param>
            <param name="hwndChildAfter">子窗口句柄。查找从在Z序中的下一个子窗口开始。子窗口必须为hwndPareRt窗口的直接子窗口而非后代窗口。如果HwndChildAfter为NULL，查找从hwndParent的第一个子窗口开始。如果hwndParent 和 hwndChildAfter同时为NULL，则函数查找所有的顶层窗口及消息窗口。</param>
            <param name="lpClassName">指向一个指定了类名的空结束字符串，或一个标识类名字符串的成员的指针。如果该参数为一个成员，则它必须为前次调用theGlobaIAddAtom函数产生的全局成员。该成员为16位，必须位于lpClassName的低16位，高位必须为0。</param>
            <param name="lpWindowName">指向一个指定了窗口名（窗口标题）的空结束字符串。如果该参数为 NULL，则为所有窗口全匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄。如果函数失败，返回值为NULL。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.CloseWindow(System.IntPtr)">
            <summary>
            该函数最小化指定的窗口，但并不销毁该窗口。
            </summary>
            <param name="hWnd">将要最小化的窗口的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>窗口尺寸被最小化成一个图标，并移动到屏幕的图标区域。系统显示窗口的图标而不显示窗口，并在图标下显示窗口标题。应用程序必须使用DestroyWindow函数销毁窗口。</remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetWindowText(System.IntPtr,System.String)">
            <summary>
            改变指定窗口的标题栏的文本内容（如果窗口有标题栏）。如果指定窗口是一个控制，则改变控制的文本内容。然而，SetWindowText函数不改变其他应用程序中的控制的文本内容。
            </summary>
            <param name="hWnd">要改变文本内容的窗口或控制的句柄。</param>
            <param name="windowText">指向一个空结束的字符串的指针，该字符串将作为窗口或控制的新文本。</param>
            <returns>如果函数成功，返回值为非零；如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            如果目标窗口属于当前进程，SetWindowText函数会使WM_SETTEXT消息发送给指定的窗口或控制。然而，如果控制是以WS_CAPTION风格创建的列表框控制，SetWindowText函数将为控制设置文本，而不是为列表项设置文本。
            
            SetWindowText函数不扩展tab字符（ASCII代码0×09），Tab字符以字符‘}’来显示。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            指定窗口的标题条文本（如果存在）拷贝到一个缓存区内。如果指定的窗口是一个控制，则拷贝控制的文本。但是，GetWindowTeXt不能接收在其他应用程序中的控制文本。
            </summary>
            <param name="hWnd">带文本的窗口或控制的句柄。</param>
            <param name="lpString">指向接收文本的缓冲区的指针。</param>
            <param name="nMaxCount">指定要保存在缓冲区内的字符的最大个数，其中包含NULL字符。如果文本超过界限，它就被截断。</param>
            <returns>如果函数成功，返回值是拷贝的字符串的字符个数，不包括中断的空字符；如果窗口无标题栏或文本，或标题栏为空，或窗口或控制的句柄无效，则返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            如果目标窗口属于当前进程，GetWindowText函数给指定的窗口或控制发送WM_GETTEXT消息。如果目标窗口属于其他进程，并且有一个窗口标题，则GetWindowText返回窗口的标题文本，如果窗口无标题，则函数返回空字符串。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ShowWindow(System.IntPtr,Py.Windows.WindowState)">
            <summary>
            设置指定窗口的显示状态。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="nCmdShow">指定窗口如何显示。如果发送应用程序的程序提供了STARTUPINFO结构，则应用程序第一次调用ShowWindow时该参数被忽略。否则，在第一次调用ShowWindow函数时，该值应为在函数WinMain中nCmdShow参数。</param>
            <returns>如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。</returns>
            <remarks>
            
            <para>
            应用程序第一次调用ShowWindow时，应该使用WinMain函数的nCmdshow参数作为它的nCmdShow参数。在随后调用ShowWindow函数时，必须使用列表中的一个给定值，而不是由WinMain函数的nCmdSHow参数指定的值。
            </para>
            
            <para>
            正如在nCmdShow参数中声明的，如果调用应用程序的程序使用了在STARTUPINFO结构中指定的信息来显示窗口，则在第一次调用ShowWindow函数时nCmdShow参数就被忽略。在这种情况下，ShowWindow函数使用STARTUPINFO结构中的信息来显示窗口。在随后的调用中，应用程序必须调用ShowWindow 函数（将其中nCmdShow参数设为SW_SHOWDEFAULT）来使用由程序调用该应用程序时提供的启动信息。这个处理在下列情况下发生：
            </para>
            
            <para>
            应用程序通过调用带WS_VISIBLE标志的函数来创建它们的主窗口函数；
            </para>
            
            <para>
            应用程序通过调用清除了WS_VISIBLE标志的CteateWindow函数来创建主窗口函数，并且随后调用带SW_SHOW标志的ShowWindow函数来显示窗口；
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ShowWindowAsync(System.IntPtr,Py.Windows.WindowState)">
            <summary>
            设置由不同线程产生的窗口的显示状态。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="nCmdShow">指定窗口如何显示。</param>
            <returns>如果函数原来可见，返回值为非零；如果函数原来被隐藏，返回值为零。</returns>
            <remarks>
            这个函数向给定窗口的消息队列发送show-window事件。应用程序可以使用这个函数避免在等待一个挂起的应用程序完成处理show-window事件时也被挂起。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.DestroyWindow(System.IntPtr)">
            <summary>
            销毁指定的窗口。这个函数通过发送WM_DESTROY 消息和 WM_NCDESTROY 消息使窗口无效并移除其键盘焦点。这个函数还销毁窗口的菜单，清空线程的消息队列，销毁与窗口过程相关的定时器，解除窗口对剪贴板的拥有权，打断剪贴板器的查看链。
            </summary>
            <param name="hWnd">将被销毁的窗口的句柄。 </param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            一个线程不能使用本函数销毁别的线程创建的窗口。如果这个窗口是一个不具有WS_EX_NOPARENTNOTIFY 样式的子窗口，则销毁窗口时将发WM_PARENTNOTIFY 消息给其父窗口。 
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.UpdateWindow(System.IntPtr)">
            <summary>
            如果窗口更新的区域不为空，UpdateWindow函数通过发送一个WM_PAINT消息来更新指定窗口的客户区。函数绕过应用程序的消息队列，直接发送WM_PAINT消息 给指定窗口的窗口过程，如果更新区域为空，则不发送消息。
            </summary>
            <param name="hWnd">要更新的窗口的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.RedrawWindow(System.IntPtr,System.Drawing.Rectangle,System.Drawing.Rectangle,Py.Windows.RDW)">
            <summary>
            根据fuRedraw旗标的设置，重画全部或部分窗口。
            </summary>
            <param name="hWnd">要重画的窗口的句柄。NULL  表示更新桌面窗口。</param>
            <param name="prect">窗口中需要重画的一个矩形区域。</param>
            <param name="hrgnUpdate">一个“区”的句柄，这个区描述了要重画的窗口区域。</param>
            <param name="flags">规定具体重画操作的旗标。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            如针对桌面窗口应用这个函数，则应用程序必须用RDW.Erase旗标重画桌面。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetDesktopWindow">
            <summary>
            返回桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是一个要在其上绘制所有的图标和其他窗口的区域。
            </summary>
            <returns>桌面窗口的句柄。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Py.Windows.SWP)">
            <summary>
            改变一个子窗口，弹出式窗口式顶层窗口的尺寸，位置和Z序。子窗口，弹出式窗口，及顶层窗口根据它们在屏幕上出现的顺序排序、顶层窗口设置的级别最高，并且被设置为Z序的第一个窗口。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="hWndInsertAfter">在z序中的位于被置位的窗口前的窗口句柄。该参数必须为一个窗口句柄，或下列值之一。</param>
            <param name="x">以客户坐标指定窗口新位置的左边界。</param>
            <param name="y">以客户坐标指定窗口新位置的顶边界。</param>
            <param name="Width">以像素指定窗口的新的宽度。</param>
            <param name="Height">以像素指定窗口的新的高度。</param>
            <param name="flags">窗口尺寸和定位的标志。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            本函数允许您改变窗口的区域。
            通常所有窗口都是矩形的——窗口一旦存在就含有一个矩形区域。本函数允许您放弃该区域。这意味着您可以创建圆的、星形的窗口，也可以将它分为两个或许多部分——实际上可以是任何形状。为区域指定的所有坐标都以窗口坐标（不是客户坐标）表示，它们以整个窗口（包括标题栏和边框）的左上角为起点。
            </summary>
            <param name="hWnd">将设置其区域的窗口。</param>
            <param name="hRgn">将设置的区域的句柄，一旦设置了该区域，就不能使用或修改该区域句柄，也不要删除它。</param>
            <param name="redraw">若为TRUE，则立即重画窗口。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
            <seealso cref="T:System.Windows.Forms.Region"/>
        </member>
        <member name="M:Py.Windows.Win32API.GetParent(System.IntPtr)">
            <summary>
            该函数获得一个指定子窗口的父窗口句柄。
            </summary>
            <param name="hWnd">子窗口句柄，函数要获得该子窗口的父窗口句柄。</param>
            <returns>如果函数成功，返回值为父窗口句柄。如果窗口无父窗口，则函数返回NULL。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetTopWindow(System.IntPtr)">
            <summary>
            该函数检查与特定父窗口相联的子窗口z序，并返回在z序顶部的子窗口的句柄
            </summary>
            <param name="hWnd">被查序的父窗口的句柄。如果该参数为NULL，函数返回Z序顶部的窗口句柄。</param>
            <returns>如果函数成功，返回值为在Z序顶部的子窗口句柄。如果指定的窗口无子窗口，返回值为NULL。  </returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            返回指定窗口的边框矩形的尺寸。该尺寸以相对于屏幕坐标左上角的屏幕坐标给出。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="rect">指向一个RECT结构的指针，该结构接收窗口的左上角和右下角的屏幕坐标。</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            改变指定窗口的位置和尺寸。对于顶层窗口，位置和尺寸是相对于屏幕的左上角的：对于子窗口，位置和尺寸是相对于父窗口客户区的左上角坐标的。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="x">指定窗口的新位置的左边界。</param>
            <param name="y">窗口的新位置的顶部边界。</param>
            <param name="width">指定窗口的新的宽度。</param>
            <param name="height">指定窗口的新的高度。</param>
            <param name="repaint">确定窗口是否被刷新。如果该参数为TRUE，窗口接收一个WM_PAINT消息；如果参数为FALSE，不发生任何刷新动作。它适用于客户区，非客户区（包括标题栏和滚动条），及由于移动子窗口而露出的父窗口的区域。如果参数为FALSE，应用程序就必须明确地使窗口无效或重画该窗口和需要刷新的父窗口。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            如果bRepaint为TRUE，系统在窗口移动后立即给窗口过程发送WM_PAINT消息（即由MoveWindow函数调用UpdateWindow函数）。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetClassName(System.IntPtr,System.String@,System.Int32)">
            <summary>
            返回指定窗口所属的类的类名。
            </summary>
            <param name="hWnd">窗口的句柄及间接给出的窗口所属的类。</param>
            <param name="className">接收窗口类名字符串的缓冲区的指针。</param>
            <param name="nMaxCount">指向接收窗口类名字符串的缓冲区的指针。</param>
            <returns>如果函数成功，返回值为拷贝到指定缓冲区的字符个数：如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SetWindowLong(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            改变指定窗口的属性．函数也将指定的一个32位值设置在窗口的额外存储空间的指定偏移位置。
            </summary>
            <param name="hWnd">窗口句柄及间接给出的窗口所属的类。</param>
            <param name="nIndex">指定将设定的大于等于0的偏移值。有效值的范围从0到额外类的存储空间的字节数-4：例如若指定了12位或多于12位的额外类存储空间，则应设为第三个32位整数的索引位8。要设置其他任何值，可以指定下面值之一。
            GWL_EXISTYLE (-20)：设定一个新的扩展风格。
            
            GWL_STYLE (-16)：设定一个新的窗口风格。
            
            GWL_WNDPROC (-4)：为窗口过程设定一个新的地址。
            
            GWL_ID (-12)：设置一个新的窗口标识符。
            
            GWL_HINSTANCE (-6)：设置一个新的应用程序事例句柄。
            
            GWL_USERDATA (-21)：设置与窗口有关的32位值。每一个窗口均有一个由创建该窗口的应用程序使用的32位值。
            </param>
            <param name="dwNewLong">指定的替换值。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.BringWindowToTop(System.IntPtr)">
            <summary>
            将指定的窗口带至窗口列表顶部。倘若它部分或全部隐藏于其他窗口下面，则将隐藏的部分完全显示出来。该函数也对弹出式窗口、顶级窗口以及MDI子窗口产生作用。
            </summary>
            <param name="hWnd">欲带至顶部的那个窗口的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            这个函数也许能随同子窗口使用。函数对一个特定的输入线程来说是“本地的”——换言之，倘若某窗口并非前台应用程序的一部分，那么一旦随同该窗口调用本函数，仍会将窗口带至它自己那个应用程序的窗口列表顶部。但是，不会同时使那个应用成为前台应用程序。这意味着在调用了本函数后，窗口仍会保持隐藏状态。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.IsWindow(System.IntPtr)">
            <summary>
            该函数确定给定的窗口句柄是否识别一个已存在的窗口。
            </summary>
            <param name="hWnd">被测试窗口的句柄。</param>
            <returns>如果窗口句柄标识了一个已存在的窗口，返回值为非零；如果窗口句柄未标识一个已存在窗口，返回值为零。
            </returns>
        </member>
        <member name="M:Py.Windows.Win32API.IsChild(System.IntPtr,System.IntPtr)">
            <summary>
            测试一个窗口是否是指定父窗口的子窗口或后代窗口。如果该父窗口是在父窗口的链表上则子窗口是指定父窗口的直接后代。父窗口链表从原始层叠窗口或弹出窗口一直连到该子窗口。
            </summary>
            <param name="hWndParant">父窗口句柄。</param>
            <param name="hWnd">将被测试的窗口句柄。</param>
            <returns>如果窗口是指定窗口的子窗口或后代窗口，则退回值为非零。如果窗口不是指定窗口的子窗口或后代窗口，则退回值为零。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.IsIconic(System.IntPtr)">
            <summary>
            确定给定窗口是否是最小化（图标化）的窗口。
            </summary>
            <param name="hWnd">被测试窗口的句柄</param>
            <returns>如果窗口已图标化，返回值为非零；如果窗口未图标化，返回值为零。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.IsZoomed(System.IntPtr)">
            <summary>
            确定给定窗口是否是最大化（图标化）的窗口。
            </summary>
            <param name="hWnd">被测试窗口的句柄</param>
            <returns>如果窗口已最大化，返回值为非零；如果窗口未图标化，返回值为零。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.IsWindowVisible(System.IntPtr)">
            <summary>
            获得给定窗口的可视状态。
            </summary>
            <param name="hWnd">被测试窗口的句柄</param>
            <returns>如果指定的窗口及其父窗口具有WS_VISIBLE风格，返回值为非零；如果指定的窗口及其父窗口不具有WS_VISIBLE风格，返回值为零。由于返回值表明了窗口是否具有Ws_VISIBLE风格，因此，即使该窗口被其他窗口遮盖，函数返回值也为非零。</returns>
            <remarks>
            <para>
            窗口的可视状态由WS_VISIBLE位指示。当设置了WS_VISIBLE位，窗口就可显示，而且只要窗口具有
            WS_VISIBLE风格，任何画在窗口的信息都将被显示。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.OpenIcon(System.IntPtr)">
            <summary>
            将一个最小化窗口恢复到原来的位置和尺寸并且激活该窗口。
            </summary>
            <param name="hWnd">被恢复与激活的窗口的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            Openlcon向给出的窗口发送WM_QUERYOPEN消息。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetForegroundWindow(System.IntPtr)">
            <summary>
            将创建指定窗口的线程设置到前台，并且激活该窗口。键盘输入转向该窗口，并为用户改各种可视的记号。系统给创建前台窗口的线程分配的权限稍高于其他线程。
            </summary>
            <param name="hWnd">将被激活并被调入前台的窗口句柄。</param>
            <returns>如果窗口设入了前台，返回值为非零；如果窗口未被设入前台，返回值为零。</returns>
            <remarks>
            前台窗口是z序顶部的窗口，是用户的工作窗口。在一个多任务优先抢占环境中，应让用户控制前台窗口。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetNextWindow(System.IntPtr,Py.Windows.GW)">
            <summary>
            返回z序中的前一个或后一个窗口的句柄。下一窗口在指定窗口的下面，前一窗口则在上面。如果指定的窗口是顶端窗口，该函数返回下一个（或前一个）顶端窗口的句柄。如果指定的窗口是顶层窗口，函数返回下一个（或前一个）顶层窗口的句柄。如果函数是子窗口，则函数搜索下一个或前一个子窗口的句柄。
            </summary>
            <param name="hWnd">一个窗口的句柄。窗口句柄在wCmd参数的基础上获得的相对于这个窗口的句柄。</param>
            <param name="wCmd">指明窗口返回的是前一窗口的句柄还是后一窗口的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            在设定了GW_HWNDNEXT或GW_GETPREV标志时，调用该函数与调用GetWindow函数相同。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            设置窗口的父窗口。
            </summary>
            <param name="child">子窗口。</param>
            <param name="parent">父窗口。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.WinMain(System.IntPtr,System.IntPtr,System.String,Py.Windows.WindowState)">
            <summary>
            被系统调用，作为一个32位应用程序的入口点。
            </summary>
            <param name="hlnstance">应用程序当前事例的句柄</param>
            <param name="hPrelnstance">应用程序的前事例的句柄。对于一个32的位程序，该参数总为NULL。</param>
            <param name="lpCmdLine">指向应用程序命令行的空字符串的指针，不包括函数名。获得整个命令行，参看GetCommandLine。</param>
            <param name="nCmdShow">指明窗口如何显示。</param>
            <returns>如果函数成功，当它接收到一个WM_QUIT消息时就中止，函数应该返回在该消息的wParam参数的退出值。如果函数在进入消息循环时退出，应该返回零。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.AnimateWindow(System.IntPtr,System.Int32,Py.Windows.AW)">
            <summary>
            支持显示与隐藏窗口时能产生特殊的效果。有两种类型的动画效果：滚动动画和滑动动画。
            </summary>
            <param name="hWnd">指定产生动画的窗口的句柄。</param>
            <param name="dwTime">指明动画持续的时间（以微秒计），完成一个动画的标准时间为200微秒。</param>
            <param name="dwFlags">指定动画类型。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            窗口使用了窗口边界；窗口已经可见仍要显示窗口；窗口已经隐藏仍要隐藏窗口。若想获得更多错误信息，请调用GetLastError函数。
            
            可以将AW_HOR_POSITIVE或AW_HOR_NEGTVE与AW_VER_POSITVE或AW_VER_NEGATIVE组合来激活一个窗口。
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetActiveWindow(System.IntPtr)">
            <summary>
            激活一个窗口。该窗口必须与调用线程的消息队列相关联。
            </summary>
            <param name="hWnd">将被激活的最顶层窗口。</param>
            <returns>若函数调用成功，则返回原先活动窗口的句柄。若函数调用失败，则返回值为NULL。若要获得更多错误信息，可以调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.AdjustWindowRect(System.Drawing.Rectangle@,System.UInt32,System.Boolean)">
            <summary>
            依据所需客户矩形的大小，计算需要的窗日矩形的大小。计算出的窗口矩形随后可以传递给CreateWindow函数，用于创建一个客户区所需大小的窗口。
            </summary>
            <param name="lpRect">指向RECT结构的指针，该结构包含所需客户区域的左上角和右下角的坐标。函数返回时，该结构容纳所需客户区域的窗口的左上角和右下角的坐标。</param>
            <param name="dwStyte">指定将被计算尺寸的窗口的窗口风格。</param>
            <param name="bMenu">指示窗口是否有菜单。</param>
            <returns>如果函数成功，返回值为非零；如果函数失败，返回值为零。获取错误信息，参看GetLastError。</returns>
            <remarks>
            <para>
            户矩形是指完全包含一个客户区域的最小矩形；窗日矩形是指完全包含一个窗口的最小矩形，该窗口包含客户区与非客户区。
            </para>
            
            <para>
            当一个菜单条下拉出两行或更多行时，AdjustWindowRect函数不增加额外的空间。</para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.AnyPopup">
            <summary>
            指出一个被属窗口，可见窗口，顶级弹出窗口，或层叠窗日是否在屏幕上存在。这个函数搜索整个屏幕，而不仅仅搜索应用程序的客户区。
            </summary>
            <returns>如果一个弹出式窗口存在，返回值为非零，即使该窗口被其他窗口完全覆盖。如果弹出式窗口不存在，返回值为零。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.WindowFromPoint(System.Drawing.Point)">
            <summary>
            获得包含指定点的窗口的句柄
            </summary>
            <param name="point">一个被检测的点的POINT结构。</param>
            <returns>返回值为包含该点的窗口的句柄。如果包含指定点的窗口不存在，返回值为NULL。如果该点在静态文本控制之上，返回值是在该静态文本控制的下面的窗口。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetDC(System.IntPtr)">
            <summary>
            该函数检索一指定窗口的客户区域或整个屏幕的显示设备上下文环境的句柄，以后可以在GDI函数中使用该句柄来在设备上下文环境中绘图。
            </summary>
            <param name="hWnd">设备上下文环境被检索的窗口的句柄。</param>
            <returns>返回指定窗口的设备场景句柄，出错则为 NULL 。</returns>
            <remarks>
            若窗口所属类具有CS_OWNDC，CS_CLASSDC 或 CS_PARENTDC样式，则获取的设备场景属窗口或类专有。您无须考虑取回的窗体或图片框控件设备场景的默认状态，特别是绘图对象。另外，默认状态随着窗体和控件autoredraw属性的设置而不同。在设备场景释放前您必须回复其状态为初始值。对于没有CS_OWNDC，CS_CLASSDC 或 CS_PARENTDC样式的窗口的设备场景，可从通用windows缓存中获取，其状态为默认值。缓存中可用设备场景数量是有限的，因此只要可能就释放设备场景， 用本函数获取的设备场景一定要用ReleaseDC函数释放，不能用DeleteDC。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            函数释放设备上下文环境（DC）供其他应用程序使用。
            </summary>
            <param name="hWnd">要释放的设备场景相关的窗口句柄。</param>
            <param name="hDC">要释放的设备场景句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            对那些用CreateDC一类的DC创建函数生成的设备场景，不要用本函数。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.DrawText(System.IntPtr,System.String,System.Int32,System.Drawing.Rectangle@,Py.Windows.DT)">
            <summary>
            该函数在指定的矩形里写入格式化文本，根据指定的方法对文本格式化（扩展的制表符，字符对齐、折行等）。
            </summary>
            <param name="hdc">欲在其中显示文字的一个设备场景的句柄。</param>
            <param name="lpString">欲描绘的文本字串。</param>
            <param name="nCount">欲描绘的字符数量。如果要描绘整个字串（直到空中止符），则可将这个参数设为-1。</param>
            <param name="lpRect">定用于绘图的一个格式化矩形（采用逻辑坐标）。</param>
            <param name="uFormat">一个标志位数组，决定了以何种形式执行绘图。</param>
            <returns>描绘文字的高度。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            返回指定窗口客户区矩形的大小。
            </summary>
            <param name="hWnd">欲计算大小的目标窗口。</param>
            <param name="rc">指定一个矩形，用客户区域的大小载入（以像素为单位）。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            pRect的左侧及顶部区域肯定会被这个函数设为零。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetDCEx(System.IntPtr,System.Drawing.Rectangle@,Py.Windows.DCX)">
            <summary>
            为指定窗口获取设备场景。相比GetDC，本函数提供了更多的选项。
            </summary>
            <param name="hWnd">窗口句柄。</param>
            <param name="hRegion">窗口剪裁区。</param>
            <param name="flags">记号。</param>
            <returns>执行成功为指定窗口设备场景句柄。出错则为0 。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindowDC(System.IntPtr)">
            <summary>
            获取整个窗口（包括边框、滚动条、标题栏、菜单等）的设备场景 。
            </summary>
            <param name="hWnd">将获取其设备场景的窗口。</param>
            <returns>执行成功为窗口设备场景，失败则为0。</returns>
            <remarks>
            一定要用ReleaseDC函数释放场景。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.InvalidateRect(System.IntPtr,System.Drawing.Rectangle,System.Int32)">
            <summary>
            屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画。
            </summary>
            <param name="hWnd">待屏蔽窗口的句柄。</param>
            <param name="rect">用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口。</param>
            <param name="bErase">导致指定的区域在重画前先删除。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            一旦系统有些更新屏幕的闲置时间可用，windows就会重画窗口。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.UpdateLayeredWindow(System.IntPtr,System.IntPtr,System.Drawing.Point@,System.Drawing.Size@,System.IntPtr,System.Drawing.Point@,System.Int32,Py.Windows.BlendFunction@,System.UInt32)">
            <summary>
            半透明窗体。
            </summary>
            <param name="hwnd">绘制的窗口。</param>
            <param name="hdcDst">HDC 的目标。</param>
            <param name="pptDst">绘图的位置。</param>
            <param name="psize">绘图的大型。</param>
            <param name="hdcSrc">绘图来源。</param>
            <param name="pprSrc">绘图来源。</param>
            <param name="crKey">键。</param>
            <param name="pblend">结束位置。</param>
            <param name="dwFlags">绘图记号，</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            判断窗口内以客户区坐标表示的一个点的屏幕坐标。
            </summary>
            <param name="hWnd">判断客户区坐标时那个窗口的句柄。</param>
            <param name="pt">用hwnd窗口的客户区坐标表示的点，这个参数会包含屏幕坐标系统中相同的点。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.FillRect(System.IntPtr,System.Drawing.Rectangle@,System.Drawing.Brush)">
            <summary>
            该函数用指定的画刷填充矩形，此函数包括矩形的左上边界，但不包括矩形的右下边界。
            </summary>
            <param name="hDC">设备场景的句柄。</param>
            <param name="rect">对填充区域进行描述的一个矩形，采用逻辑坐标。</param>
            <param name="hBrush">欲使用的刷子的句柄。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            矩形的右边和底边不会描绘。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetMenuItemRect(System.IntPtr,System.IntPtr,System.UInt32,System.Drawing.Rectangle@)">
            <summary>
            取得指定菜单项的边界矩形。
            </summary>
            <param name="hWnd">含有指定菜单的窗口的句柄。</param>
            <param name="hMenu">菜单项相对于零的位置。</param>
            <param name="ultem">指向结构RECT的指针，该结构接收指定菜单项的边界矩形（按屏幕坐标）。</param>
            <param name="lprcltem">指向结构RECT的指针，该结构接收指定菜单项的边界矩形（按屏幕坐标）。</param>
            <returns>如果函数调用成功，返回非零值；如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。 </returns>
        </member>
        <member name="M:Py.Windows.Win32API.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            将指定的消息发送到一个或多个窗口。此函数为指定的窗口调用窗口程序，直到窗口程序处理完消息再返回。而函数PostMessage不同，将一个消息寄送到一个线程的消息队列后立即返回。　
            </summary>
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄。</param>
            <param name="msg">被发送的消息。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="lParam">附加的消息指定信息。</param>
            <returns>返回值指定消息处理的结果，依赖于所发送的消息。</returns>
            <remarks>
            
            <para>
            需要用HWND_BROADCAST通信的应用程序应当使用函数RegisterWindowMessage来为应用程序间的通信取得一个唯一的消息。
            </para>
            
            如果指定的窗口是由调用线程创建的，则窗口程序立即作为子程序调用。如果指定的窗口是由不同线程创建的，则系统切换到该线程并调用恰当的窗口程序。线程间的消息只有在线程执行消息检索代码时才被处理。发送线程被阻塞直到接收线程处理完消息为止。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SendMessageCallback(System.IntPtr,System.Int32,System.Int32,System.Int32,Py.Windows.SendAsyncProc,System.UInt32)">
            <summary>
            将指定的消息发送到一个或多个窗口。此函数为指定的窗口调用窗口程序，并立即返回。当窗口程序处理完消息后，系统调用指定的回调函数，将消息处理的结果和一个应用程序定义的值传给回调函数。
            </summary>
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄。如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，包括无效或不可见的非自身拥有的窗口、被覆盖的窗口和弹出式窗口，但消息不被发送到子窗口。</param>
            <param name="msg">被发送的消息。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="lParam">附加的消息指定信息。</param>
            <param name="IpResultCallBack">指向回收函数的指针，窗曰程序处理完消息后调用该回调函数。参见SendAsyncProc可得到合适的回调函数的信息。如果hwnd为HWND_BROADCAST，系统为每个顶层窗口调用一次SendASyncProc回调函数。</param>
            <param name="dwData">一个应用程序定义的值，被传给由参数IPResultCallBack指向的回调函数。</param>
            <returns>如果函数调用成功，返回非零值。如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            如果发送一个低于WM_USER范围的消息给异步消息函数（PostMessage，SendNotifyMesssge；SendMessageCallback），消息参数不能包含指针。否则，操作将会失败。函数将在接收线程处理消息之前返回，发送者将在内存被使用之前释放。
            </para>
            
            <para>
            需要以HWND_BROADCAST方式通信的应用程序应当用函数RegisterWindwosMessage来获得应用程序间通信的独特的消息。
            </para>
            
            <para>
            此回调函数仅当调用SendMessagecallback的线程调用GetMessage，PeekMessage或WaitMessage时调用。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SendMessageTImeout(System.IntPtr,System.UInt32,System.Int32,System.Int32,Py.Windows.SMTO,System.UInt32,System.UInt32)">
            <summary>
            将指定的消息发送到一个或多个窗口。此函数为指定的窗口调用窗口程序，并且，如果指定的窗口属于不同的线程，直到窗口程序处理完消息或指定的超时周期结束函数才返回。如果接收消息的窗口和当前线程属于同一个队列，窗口程序立即调用，超时值无用。
            </summary>
            <param name="hwnd">其窗口程序将接收消息的窗口的句柄。如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，包括无效或不可见的非自身拥有的窗口。</param>
            <param name="Msg">指定被发送的消息。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="IParam">附加的消息指定信息。</param>
            <param name="fuFlags">如何发送消息。此参数可为下列值的组合</param>
            <param name="uTimeout">为超时周期指定以毫秒为单位的持续时间。如果该消息是一个广播消息，每个窗口可使用全超时周期。例如，如果指定5秒的超时周期，有3个顶层窗回未能处理消息，可以有最多15秒的延迟。</param>
            <param name="lpdwResultult">指定消息处理的结果，依赖于所发送的消息。</param>
            <returns>如果函数调用成功，返回非零值。如果函数调用失败，或超时，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。如果GetLastError返回零，表明函数超时。如果使用HWND_BROADCAST，SenddMessaggTimeout不提供单个窗口超时信息。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SendNotifyMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            将指定的消息发送到一个窗口。如果该窗口是由调用线程创建的；此函数为该窗口调用窗口程序，并等待窗口程序处理完消息后再返回。如果该窗口是由不同的线程创建的，此函数将消息传给该窗口程序，并立即返回，不等待窗口程序处理完消息。
            </summary>
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄。如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，包括无效或不可见的非自身拥有的窗口、被覆盖的窗口和弹出式窗口，但消息不被发送到子窗口。</param>
            <param name="msg">被发送的消息。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="lParam">附加的消息指定信息。</param>
            <returns>返回值指定消息处理的结果，依赖于所发送的消息。</returns>
            <remarks>
            
            <para>
            如果发送一个低于WM_USER范围的消息给异步消息函数（PostMessage，SendNotifyMessage，SendMesssgeCallback），消息参数不能包含指针。否则，操作将会失败。函数将在接收线程处理消息之前返回，发送者将在内存被使用之前释放。
            </para>
            
            需要以HWND_BROADCAST方式通信的应用程序应当用函数RegisterWindwosMessage来获得应用程序间通信的独特的消息。
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.PostMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            将一个消息放入（寄送）到与指定窗口创建的线程相联系消息队列里，不等待线程处理消息就返回。消息队列里的消息通过调用GetMessage和PeekMessage取得。
            </summary>
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄。如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，包括无效或不可见的非自身拥有的窗口。</param>
            <param name="msg">指定被发送的消息。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="lParam">附加的消息指定信息。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.PostQuitMessage(System.Int32)">
            <summary>
            向系统表明有个线程有终止请求。通常用来响应WM_DESTROY消息。
            </summary>
            <param name="nExitCode">指定应用程序退出代码。此值被用作消息WM_QUIT的wParam参数。</param>
            <remarks>
            
            <para>
            PostQuitMessage寄送一个WM_oUT消息给线程的消息队列并立即返回；此函数向系统表明有个线程请求在随后的某一时间终止。
            </para>
            
            当线程从消息队列里取得WM_QUIT消息时，应当退出消息循环并将控制返回给系统。返回给系统的退出值必须是消息WM_QUIT的wParam参数。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.PostMessage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            将一个消息放入（寄送）到指定线程的消息队列里，不等待线程处理消息就返回。
            </summary>
            <param name="idThread">其消息将被寄送的线程的线程标识符。如果线程没有消息队列，此函数将失败。当线程第一次调用一个Win 32 USER或GDI函数时，系统创建线程的消息队列。</param>
            <param name="msg">指定将被寄送的消息的类型。</param>
            <param name="wParam">附加的消息指定信息。</param>
            <param name="lParam">The l param.</param>
            <returns>果函数调用成功，返回非零值。如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。如果idThread不是一个有效的线程标识符或由idThread确定的线程没有消息队列，GetLastError返回ERROR_INVALID_THREAD。</returns>
            <remarks>
            
            <para>
            消息将寄送到的线程必须创建消息队列，否则调用PostThreadMessage会失败。用下列方法之一来处理这种情况：
            </para>
            
            <para>
            调用PostThreadMessage。如果失败，调用Sleep，再调用PostThreadMessage，反复执行，直到PostThreadMessage成功。
            </para>
            
            <para>
            创建一个事件对象，再创建线程。在调用PostThreadMessage之前，用函数WaitForSingleObject来等特事件被设置为被告知状态。消息将寄送到的线程调用PeedMessage（￡msg，NULL，WM_USER，WM_USER，PM_NOREMOVE）来强制系统创建消息队列。设置事件，表示线程已准备好接收寄送的消息。
            </para>
            
            <para>
            消息将寄送到的线程通过调用GetMesssge或PeekMesssge来取得消息。返回的MSG结构中的hwnd成员为NULL。
            </para>
            
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.WaitMessage">
            <summary>
            产生对其他线程的控制，如果一个线程没有其他消息在其消息队列里。此函数中止线程，直到一个新消息被放入该线程的消息队列里，再返回。
            </summary>
            <returns>如果函数调用成功，返回非零值；如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。</returns>
            <remarks>
            在线程调用一个函数来检查队列后，如果有未经阅读的输入在消息队列里，WaitMessage不返回。这是因为PeekMessage，GetMessage，GetQueueStatus：WaitMessage，MsgWaitForMultipleObjects，MsgWaitForMulitpleObjectEx等函数检查队列后，改变队列的状态信息这样输入不再被认为是新的。如果连续调用WaitMessage，将等到指定类型的新输入到达后才返回。已存在的未读过的输入（在上次线程检查队列之前接收的）被忽略。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.PeekMessage(System.Windows.Forms.Message@,System.Int32,System.UInt32,System.UInt32,Py.Windows.PM)">
             <summary>
             该函数为一个消息检查线程消息队列，并将该消息（如果存在）放于指定的结构。
             </summary>
             <param name="msg">接收消息信息的MSG结构指针。</param>
             <param name="hWnd">其消息被检查的窗口的句柄。</param>
             <param name="wFilterMin">被检查的消息范围里的第一个消息。</param>
             <param name="wFilterMax">被检查的消息范围里的最后一个消息。</param>
             <param name="wFlag">确定消息如何被处理。此参数可取下列值之一。</param>
             <returns>成功返回 true， 否则返回 false。</returns>
             <remarks>
             
             <para>
             和函数GetMessage不一样的是，函数PeekMesssge在返回前不等待消息被放到队列里。
             </para>
             
             <para>
             PeekMesssge只得到那些与参数hWnd标识的窗口相联系的消息或被lsChild确定为其子窗口相联系的消息，并且该消息要在由参数wMsgFiterMin和wMsgFiherMax确定的范围内。如果hWnd为NULL，则PeekMessage接收属于当前调用线程的窗口的消息（PeekMessage不接收属于其他线程的窗口的消息）。如果hWnd为C1，PeekMessage只返回hWnd值为NULL的消息，该消息由函数PostThreadMessage寄送。如果wMsgFilterMin和wMsgFilterMax都为零，GetMessage返回所有可得的消息（即，无范围过滤）。
             </para>
             
             <para>
             常数WM_KEYFIRST和WMKEYLAST可作为过滤值取得所有键盘消息；常数WM_MOUSEFIRST和WM_MOUSELAST可用来接收所有的鼠标消息。
             </para>
            
             <para>
             PeekMessage通常不从队列里清除WM_PANT消息。该消息将保留在队列里直到处理完毕。但如果WM_PAINT消息有一个空更新区，PeekMessage将从队列里清除WM_PAINT消息。
             </para>
             
             </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetMessage(System.Windows.Forms.Message@,System.IntPtr,System.UInt32,System.UInt32)">
             <summary>
             从调用线程的消息队列里取得一个消息并将其放于指定的结构。此函数可取得与指定窗口联系的消息和由PostThreadMesssge寄送的线程消息。此函数接收一定范围的消息值。GetMessage不接收属于其他线程或应用程序的消息。
             </summary>
             <param name="msg">指向MSG结构的指针，该结构从线程的消息队列里接收消息信息。</param>
             <param name="hWnd">取得其消息的窗口的句柄。这是一个有特殊含义的值（NULL）。GetMessage为任何属于调用线程的窗口检索消息，线程消息通过PostThreadMessage寄送给调用线程。</param>
             <param name="wFilterMin">被检索的最小消息值的整数。</param>
             <param name="wFilterMax">被检索的最大消息值的整数。</param>
             <returns>如果函数取得WM_QUIT之外的其他消息，返回非零值。如果函数取得WM_QUIT消息，返回值是零。如果出现了错误，返回值是_1。例如，当hWnd是无效的窗口句柄或lpMsg是无效的指针时。若想获得更多的错误信息，请调用GetLastError函数。</returns>
             <remarks>
             
             <para>
             应用程序通常用返回值来确定是否终止主消息循环并退出程序。
             </para>
             
             <para>
             GetMesssge只接收与参数hWnd标识的窗口或子窗口相联系的消息，子窗口由函数IsChild决定，消息值的范围由参数wMsgFilterMin和wMsgFilterMax给出。如果hWnd为NULL，则GetMessage接收属于调用线程的窗口的消息，线程消息由函数PostThreadMessage寄送给调用线程。GetMessage不接收属于其他线程或其他线程的窗口的消息，即使hWnd为NULL。由PostThreadMessage寄送的线程消息，其消息hWnd值为NULL。如果wMsgFilterMin和wMsgFilterMax都为零，GetMessage返回所有可得的消息（即，无范围过滤）。
            </para>
            
             <para>
             常数 WM_KEYFIRST和WM_KEYAST可作为过滤值取得与键盘输入相关的所有消息：常数WM_MOUSEFIRST和WM_MOUSELST可用来接收所有的鼠标消息。如果wMsgFilterMin和wMsgFilterMax都为零，GetMessage返回所有可得的消息（即，无范围过滤）。
            </para>
            
             <para>
             GetMessage不从队列里清除WM.PAINT消息。该消息将保留在队列里直到处理完毕。
             </para>
            
             
             <para>
             注意，此函数的返回值可非零、零或-1，应避免如下代码出现：
            
             while（GetMessage（IpMsg，hwnd，0，0））…
            
             －1返回值的可能性表示这样的代码会导致致命的应用程序错误。
             </para>
            
             </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetMessagePos">
             <summary>
             返回表示屏幕坐标下光标位置的长整数值。此位置表示当上一消息由GetMessage取得时鼠标占用的点。
             </summary>
             <returns>返回值给出光标位置的X，y坐标。X坐标在低位整数，y坐标在高位整数。</returns>
             <remarks>
             
             <para>
             如前所述，X坐标在返回值的低位整数，y坐标在高位整数（都表示有符号值，因为在多显示器的系统里可取得负值）。如果返回值赋给了一个变量，可用MAKEPOINT宏从返回值取得POINT结构。也可用GET_X_LPARAM或GET_Y_LPARAM宏来抽取X，y坐标。
             </para>
             
             <para>
            要得到光标的当前位置而不是上一个消息发生时的位置，调用函数GetCursorPos。
            </para>
            
             <para>
             要点：不要用LOWORD或HIWORD宏来抽取鼠标位置的x，y坐标，因为在多显示器的系统里将返回不正确的结果。多显示器的系统里可取得负的x， y坐标，但LOWORD和HIWORD将坐标当作无符号量。
             </para>
             </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetMessageTime">
            <summary>
            返回由GetMessage从当前线程队列里取得上一消息的消息时间。时间是一个长整数，指定从系统开始到消息创建（即，放入线程消息队列）的占用时间（按毫秒计算）。
            </summary>
            <returns>返回值为消息时间。</returns>
            <remarks>
            由GetMessageTime返回的值对后面的消息并不一定是增长的，因为当计时器计数超过长整数的最大值时，又从零开始计算。为计算消息间的延迟时间，必须验证第二个消息的时间比第一个消息的时间大，然后用第二个消息的时间减去第一个消息的时间。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.TranslateMessage(System.Windows.Forms.Message@)">
             <summary>
             将虚拟键消息转换为字符消息。字符消息被寄送到调用线程的消息队列里，当下一次线程调用函数GetMessage或PeekMessage时被读出。
             </summary>
             <param name="msg">指向含有消息的MSG结构的指针，该结构里含有用函数GetMessage或PeekMessage从调用线程的消息队列里取得的消息信息。</param>
             <returns>如果消息被转换（即，字符消息被寄送到调用线程的消息队列里），返回非零值。如果消息是WM_kEYDOWN，WM_KEYUP WM_SYSKEYDOWN或WM_SYSKEYUP，返回非零值，不考虑转换。如果消息没被转换（即，字符消息没被寄送到调用线程的消息队列里），返回值是零。</returns>
             <remarks>
             
             <para>
             此函数不修改由参数IpMsg指向的消息。
             </para>
            
             <para>
             WM_KEYDOWN和WM_KEYUP组合产生一个WM_CHAR或WM_DEADCHAR消息。
             </para>
            
             <para>
             WM_SYSKEYDOWN和WM_SYSKEYUP组合产生一个SYSWM_CHAR或 WM_SYSDEADCHAR消息。TtanslateMessage为那些由键盘驱动器映射为ASCll字符的键产生WM_CHAR消息。
             </para>
            
             <para>
             如果应用程序为其他用途处理虚拟键消息，不应调用TranslateMessage。例如，如果件ThranslateAccelerator返回一个非零值，应用程序不应调用TranslateMessage。
             </para>
             
             
             </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.DispatchMessage(System.Windows.Forms.Message@)">
            <summary>
            调度一个消息给窗口程序。通常调度从GetMessage取得的消息。
            </summary>
            <param name="msg">指向含有消息的MSG结构的指针。</param>
            <returns>返回值是窗口程序返回的值。尽管返回值的含义依赖于被调度的消息，但返回值通常被忽略。</returns>
            <remarks>
            MSG结构必须包含有效的消息值。如果参数lpmsg指向一个WM_TIMER消息，并且WM_TIMER消息的参数IParam不为NULL，则调用IPa1ram指向的函数，而不是调用窗口程序。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.CreateCaret(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
             <summary>
             为系统插入标记创建一个新的形状，并且将插入标记的属主关系指定给特定的窗口。插入标记的形状。可以是线、块或位图。
             </summary>
             <param name="hWnd">指定佣有插入标记的窗口。</param>
             <param name="hBitmap">标识用于定义插入标记形状的位图。如果该参数为NULL，那么插入标记是实心的（原色），如果该参数为（HBITMAP）1，那么插入标记是灰色的。如果该参数是位图句柄，那么插入标记就是指定的位图。位图句栖必须已中由CreateBitmap、CreatDIBitmap或LoadBitmap函数创建。</param>
             <param name="nWidth">按逻辑单位指定插入标记的宽度，如果该参数为零，那么宽度就设为系统定义的窗口边界宽度。如果hBitmap是位图句柄，那么函数CreateCaret忽略该参数。</param>
             <param name="nHeight">按逻辑单位指定插入标记的高度。如果该参数为零，那么高度就设为系统定义的窗口边界高度如果hBitmap是位图句柄，那么函数CreateCaret忽略该参数。</param>
             <returns>如果函数执行成功，返回值为非零；如果函数执行失败，那么返回值为零。若想获取更多错误 信息，请调用GetLastError函数。</returns>
             <remarks>
             参数nWidth和nHeight指定了插入标记的宽度和高度，这些值按逻辑单位表示；按像素表示的真正 宽度和高度与窗口的映射模式有关。
            
             CreateCaret函数自动清除前一个插入标记的形状，不考虑拥有该插入标记的窗口。新创建的插入标记一直隐藏，直到应用程序调用ShowCaret函数使该插入标记可见为止。
            
             系统为每个队列提供一个插入标记。窗口只有在它有键盘焦点（focus）或者它是活动窗口时才创建插入标记。该窗口应在键盘焦点消失或窗口变为不活动之前，清除插入标记。
            
             可以通过使用GetSystemMetrics函数，并指定SM_CXBORDER和SM_CYBORDER值来检索系统窗口边界的宽度或高度。使用窗口边界的宽度或高度可以保证插入标记在高分辨率屏幕上可见。
            
             对于Windows CE：Windows CE不支持hBitmap参数，并且该参数应设为NULL。Windows CE缺省的是实心（Solid）插入标记。
            
             </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetCaretBlinkTime">
            <summary>
            返回一个公用的时间，单位为毫秒。该时间是转化插入标记的像素而需要的时间。用户可以使用控制面板来设置这个值。
            </summary>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetCaretPos(System.Drawing.Point@)">
            <summary>
            将插入标记的位置（按客户区坐标）信息拷贝到指定的POINT结构中。
            </summary>
            <param name="IpPoint">指向POINT结构的指针。该结构接收插入标记的客户坐标信息。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            插入标记位置通常是按包含该插入标记的窗口的客户坐标形式给出的。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ShowCaret(System.IntPtr)">
            <summary>
            使插入标记在屏幕的当前位置上可见。当插入标记变为可见时，它自动开始闪烁。
            </summary>
            <param name="hWnd">标识拥有插入标记的窗口。如果该参数为NULL，那么ShowCaret搜索当前任务以发现有插入标记的窗口。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            只有指定的窗口拥有插入标记，并且该插入标记具有形状，没有连续隐藏2次或多次时，ShowCaret才能显示该插入标记。如果这几个条件中的一个或多个没满足，那么ShowCaret函数什么也不做，并且返回FALSE。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.HideCaret(System.IntPtr)">
            <summary>
            将屏幕上的插入标记清除。实际上是隐藏插入标记，并不是删除其当前形状或使插入点无效。
            </summary>
            <param name="hWnd">标识有插入标记的窗口。如果该参数为NULL，那么HideCaret函数搜索当前任务，以发现拥有插入标记的窗口。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            只有指定的窗口拥有插入标记时，HideCaret才隐藏插入标记。如果指定的窗口没有插入标记，那么函数HideCaret什么也不做，并且返回FALSE。
            </para>
            
            <para>
            隐藏操作是累计的，如果应用程序连续5次调用HideCaret，那么该程序也必须调用ShowCaret 5次才能显示插入标记。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetCaretPos(System.Int32,System.Int32)">
            <summary>
            将插入标记移动到指定的坐标上。如果拥有该插人标记的窗口是使用CS_OWNDC类样式创建的，那么指定的坐标依据与该窗口相关的设备环境的映射模式而定。
            </summary>
            <param name="x">指定插入标记新的X坐标。</param>
            <param name="y">指定插入标记新的Y坐标。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            函数SetCaretPos不管插入标记是否隐藏都将移动它。系统为每个队列提供一个插入标记。窗口只能对自己拥有的插入标记进行位置的设置。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.DestroyCaret">
            <summary>
            清除插入标记的当前形状，从窗口中释放插入标记，并且删除屏幕上的插入标记。如果插入标记的形状是基于位图的，那么DestroyCaret不释放该位图。
            </summary>
            <returns>如果函数执行成功，则返回值非零:如果函数失败，则返回值为零。若想获取更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            只有当前任务中的窗口拥有插入标记时DestoryCaret才清除插入标记。如果插入标记不为当前任务中的窗口拥有，那么DestroyCaret不执行任何操作，并且返回FALSE。
            </para>
            
            <para>
            系统为每个队列提供一个插入标记。只有当窗口有键盘焦点或窗口是活动的时候，才创建插入记号。窗口应该在键盘焦点消失或窗口变为不活动之前清除插入标记。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetCaretBlinkTime(System.UInt32)">
            <summary>
            将插入标记的闪烁时间设置为一个指定的数目，该数目的单位为毫秒，闪烁时间就是转化插入标记像素所需的时间，单位为毫秒。
            </summary>
            <param name="uMSeconds">指定新的闪烁时间，时间单位为毫秒。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            用户可以使用控制面板来设置闪烁时间。应用程序应遵守用户的设置。只有允许用户设置闪烁时间的应用程序（例如控制面板）才应该使用SetCaretBlinkTime函数。
            </para>
            
            <para>
            如果改变了闪烁时间，那么后续激活的应用程序会使用修改后的闪烁时间，即使在键盘焦点消失或为非活动时，恢复前一个闪烁时间值，这是由于多线程环境的缘故，在这种环境中，禁止使用一个应用程序与激活另一个应用程序并不同步。这种特性允许系统即使在当前应用程序挂起时也可以激活另一个应用程序。
            </para>
            
            <para>
            对于Windows CE：在Windows CE系统中，在一个应用程序中改变插入标记的闪烁时间不会影响后续加载的应用程序中的闪烁时间。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ClipCursor(System.Drawing.Rectangle@)">
            <summary>
            把光标限制在屏幕上的一个矩形区域内，如果调用SetCursor或用鼠标设置的一个随后的光标位置在该矩形区域的外面，则系统自动调整该位置以保持光标在矩形区域之内。
            </summary>
            <param name="lpRect">指向RECT结构的指针，该结构包含限制矩形区域左上角和右下角的屏幕坐标，如果该指针为NULL（空），则光标可以在屏幕的任何区域移动。</param>
            <returns>光标是一个共享资源，如果一个应用控制了光标，在将控制转向另一个应用之前，必须要使用ClipCursor来释放光标，该调用过程必须具有对窗口的WINSTA_WRITEATTRIBUTES访问权。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SetCursor(System.IntPtr)">
            <summary>
            该函数确定光标的形状。
            </summary>
        </member>
        <member name="M:Py.Windows.Win32API.CopyCursor(System.IntPtr)">
            <summary>
            复制一光标。
            </summary>
            <param name="pcur">被复制光标的句柄。</param>
            <returns>如果成功，返回值是复制光标的句柄；如果失败，返回值为NULL（空）。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            CopyCursor函数能使一个应用程序或一个动态连接库（OLL）得到一个属于另一模块的光标形状的句柄。如果另外一个模块被释放，则该应用程序仍然可以使用该光标形状。在关闭之前，一个应用程序必须调用DestroyCursor函数来释放任何与该光标有关的系统资源。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.CreateCursor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            创建一个指定大小、位模式和热点的光标。
            </summary>
            <param name="htnst">创建光标的应用程序的当前实例句柄。</param>
            <param name="xHotSpot">光标热点的水平位置。</param>
            <param name="yHotSpot">光标热点的垂直位置。</param>
            <param name="nWidth">以像素为单位指定光标的宽度。</param>
            <param name="nHeight">以像素为单位指定光标的宽度。</param>
            <param name="pvANDPlane">指向一个字节数组的指针，该数组包含光标AND掩码的位值，就像设备相关的单色位图一样。</param>
            <param name="pvXORPlane">指向一个字节数组的指针，该数组包含光标XOR掩码的位值，就像设备相关的单色位图一样。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.DestroyCursor(System.IntPtr)">
            <summary>
            销毁一个光标并释放它占用的任何内存，不要使用该函数去消毁一个共享光标。
            </summary>
            <param name="hCursor">要销毁的光标的句柄，该光标必须不在使用中。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            DestroyCursor函数销毁一个非共享的光标；不要用它销毁一个共享光标。一个共享光标只要调用它的模块仍在内存中，则该共享光标还是有效的，下面的函数可得到一个共享光标：LoadCursor；LoadCursorFronFile；Loadlmage（如果使用LR-SHARED标志）；
            </para>
            
            <para>
            Copylmage（如果使用LR_COPYRETURORG标志并且hlmags参数是一个共享光标）。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetClipCursor(System.Drawing.Rectangle@)">
            <summary>
            检取一个矩形区域的屏幕坐标，光标被限制在该矩形区域之内。
            </summary>
            <param name="IpRect">一个RECT结构的指针；接收限制矩形的屏幕坐标。如果该光标没有被限制在一个矩形区域内，则该RECT结构接收屏幕的尺寸。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            该光标是一个共享光标，如果一个应用程序使用ClipCursor函数来限制该光标，那么在它放弃控制转向另一个应用之前必须使用ClipCursor来释放该光标，该调用过程必须具有对窗口站的WINSTA_READATTRIBUTES访问权限。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetCursor">
            <summary>
            检取当前光标的句柄。
            </summary>
            <returns>返回值是当前光标的句柄，如果没有光标，返回值为NULL。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetCursorPos(System.Drawing.Rectangle@)">
            <summary>
            检取光标的位置，以屏幕坐标表示。
            </summary>
            <param name="IpPoint">POINT结构指针，该结构接收光标的屏幕坐标。</param>
            <returns>如果函数调用成功则返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL，表示为一个无效的对话框句柄或一个不存在的控制。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            光标的位置通常以屏幕坐标的形式给出，它并不受包含该光标的窗口的映射模式的影响。该调用过程必须具有对窗口站的WINSTA_READATTRIBUTES访问权限。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.LoadCursor(System.IntPtr,System.UInt32)">
            <summary>
            从指定的模块或应用程序实例中载入一个鼠标指针。LoadCursorBynum是LoadCursor函数的类型安全声明。
            </summary>
            <param name="hInstance">标识一个模块事例，它的可执行文件包含要载入的光标。</param>
            <param name="cursor">指向以NULL结束的字符串的指针，该字符串存有等载入的光标资源名。该参数低位字节和高位字节0组成资源标识器也可以由低位字为资源标识符和高位字为零组成。也可以用MADEINTRES_OURCE宏命令创建该值。
            要使用Win32预定义的一个光标，应用程序必须把hlnsfance参数设为NULL，并把IpCursorName设为如下值之一：
             IDC_APPSTARING： (32650) 标准箭头和小沙漏；IDC_ARROW：(32512) 标准光标；IDC_CROSS： (601)十字光标。
            </param>
            <returns>如果成功，返回值是新载入的光标的句柄：如果失败，返回值是NULL。若想获得更多错误信息，请调用GetLastError函数。</returns>
            <remarks>
            LoadCursor函数仅载入没有被载入过的光标资源，否则，它检取已存在的光标资的句柄。仅当IpCursorName参数指向一个光标资源时，该函数才返回一个有效的光标句柄。如果IpCursorName不是指向光标而是指向了其他类型的资源（如icon），则该函数返回值不是NULL，尽管它不是一个有效的光标句柄，该函数为当前显示设备光标搜寻最贴切的光标资源。光标资源可以是彩色或单色的位图。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.LoadCursorFromFile(System.String)">
             <summary>
             根据一个文件中所含的数据创建光标。该文件由它的名字所指定或由一个系统光标鉴别器指定，该函数返回一个新建光标的句柄，文件所包含的光标数据可以是光标格式（CUR）或运动光标格式（.ANI）。
             </summary>
             <param name="IpFileName">创建光标所用的文件数据资源，文件中的数据格式必须是COR或ANI，如果IpFileName的高位字为非零，则IpFileName就是指向一个字符串的指针，该字符串是包含光标数据的文件的名字。
             
             如果IpFileName的高位字为零，低位字是系统光标标识符，则该函数在WIN.INI文件中搜索与系统光标名字有关的[Cursors]条目，下面是系统光标的名字和标识符的清单：
            
             "AppStarting"：OCR_APPSTARTING；"Arrow"：OCR_NORMAL"Crosshair"：OCR_CROSS；"Hand"：WindowsNT5.0 and laterOCR_HAND；"Help"：OCR_HELP；"IBeam"：OCR_IBEAM；"Icon"：OCR_ICON；"No"：OCR_NO；"Size"：OCR_SIZE；
             "SizeAll"：OCR_SIZEALL；"SizeNESW"：OCR_SIZENESW；"SizeNS"：OCR_SIZENS；"SizeNWSE"：OCR_SIZENESW；"SizeWE"：OCR_SIZEWE；"UpArrow"：OCR_UP；"Wait"：OCR_WAIT
             </param>
             <returns>如果成功，返回值是新建光标的句柄；如果失败，返回值为空（NULL）。若想获得更多错误信息，请调用GetLastError函数。GetLastError也许会返回如下的值：ERROR_FILE_NOT_FOUND，没有找到指定的文件。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.DragDetect(System.IntPtr,System.Drawing.Point)">
            <summary>
            捕获并跟踪鼠标的移动直到用户松开左键、按下Esc。键或者将鼠标移动到围绕指定点的“拖动矩形”之外。拖动矩形的宽和高由函数GetSystemMetrics返回的SM_CXDRAG或SM_CYDRAG确定。
            </summary>
            <param name="hwnd">接受鼠标输入的窗口的句柄。</param>
            <param name="pt">鼠标在屏幕坐标下的初始位置，此函数根据这个点来确定拖动矩形的坐标。</param>
            <returns>如果用户在按着鼠标左键时将鼠标移出了拖动矩形之外，则返回非零值；如果用户按着鼠标左键在拖动内移动鼠标，则返回值是零。</returns>
            <remarks>
            拖动矩形的系统度量是可构造的，允许更大或更小的拖动矩形。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetDoubleClickTime">
            <summary>
            取得鼠标的当前双击时间。一次双击是指对鼠标键的两次连击，第一次击键后在指定时间内击第二次。双击时间是指在双击中，第一次击键和第二次击键之间的最大毫秒数。
            </summary>
            <returns>返回是当前双击时间，按毫秒计算。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SetDoubleCIckTime(System.UInt32)">
            <summary>
            为鼠标设置双击时间。
            </summary>
            <param name="ulnterval">指定在双击中第一次和第二次点击之间的毫秒数。如果此参数设置为零则系统使用缺省的双击时间，即500毫秒。</param>
            <returns>如果函数调用成功，返回非零值。如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.SwapMouseButton(System.Boolean)">
            <summary>
            反转或恢复鼠标左右键的含义。
            </summary>
            <param name="fSwap">指定鼠标键的含义是否被反转或恢复。如果此参数为TRUE，则左键产生右键消息而右键产生左键消息，如果此参数为FALSE，则恢复鼠标键的最初含义。</param>
            <returns>如果在函数调用之前鼠标键的含义已被反转，则返回非零值。如果鼠标键的含义没反转，返回值是零</returns>
            <remarks>
            鼠标键交换是为给那些用左手操作鼠标的人提供方便。此函数通常只能由控制板调用。尽管一个应用程序能够自由地调用此函数，但鼠标是一种共享资源，其键的含义反转会影响所有应用程序。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetFocus">
            <summary>
            获取与调用线程消息队列相关的窗口的句柄，该窗口拥有输入焦点。
            </summary>
            <returns>为拥有键盘输入焦点的窗口句柄，若调用线程的消息队列没有相关的持有键盘输入焦点的窗口，则返回值为NULL。</returns>
            <remarks>
            尽管GetFocus返回NULL，但可能另一线程的队列与拥有输入焦点的窗口相关。便用GetForeyroundWindow函数来获得用户目前工作的窗口。可以使用AttachThreadlnPut函数把线程的消息队列与另一线程的窗口关联起来。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            该函数允许／禁止指定的窗口或控制接受鼠标和键盘的输入，当输入被禁止时，窗口不响应鼠标和按键的输入，输入允许时，窗口接受所有的输入。
            </summary>
            <param name="hWnd">被允许/禁止的窗口句柄。</param>
            <param name="bEnable">定义窗口是被允许，还是被禁止。若该参数为TRUE，则窗口被允许。若该参数为FALSE，则窗口被禁止。</param>
            <returns>如果窗口原来是被禁止的，返回值不为零；如果窗口原来不是被禁止的，返回值为零。若想获得更多的错误信息，可调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            若窗口的允许状态将发生变化，WM_ENABLE消息将在Enblewindow函数返回前发送出去，若窗口已已被禁止，它所有的子窗口也被禁止，仅管并未向子窗口发送WM_ENABLE消息。
            </para>
            
            <para>
            窗口被激活前必须处于允许状态。比如，一个应用程序将显示一个无模式对话框并且已使该对话框的主窗口处于禁止状态，则在撤消该对话框之前须使其主窗口处于允许状态。否则，其他窗口将接受并被少活。若子窗口被禁止，则系统决定由哪个窗口接受鼠标消息时将忽略该窗口。
            </para>
            
            <para>
            缺省情况下，窗口被创建时被置为允许。若创建一个初始化为禁止状态的窗口，应用程序需要在GeateWindow或GeateWindowEX函数中定义WS_DOSABLED样式。窗口创建后，应用程序可用EnbleWindow来允许禁止窗口。
            </para>
            
            <para>
            应用程序可利用此函数允许／禁止对话框中的某个控制。被禁止的控制既不能接受键盘输入，也不能被用户访问。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetKeyState(System.Int32)">
            <summary>
            检取指定虚拟键的状态。该状态指定此键是UP状态，DOWN状态，还是被触发的（开关每次按下此键时进行切换）。
            </summary>
            <param name="virtKey">定义一虚拟键。若要求的虚拟键是字母或数字（A～Z，a～z或0～9），nVirtKey必须被置为相应字符的ASCII码值，对于其他的键，nVirtKey必须是一虚拟键码。若使用非英语键盘布局，则取值在ASCIIa～z和0～9的虚拟键被用于定义绝大多数的字符键。例如，对于德语键盘格式，值为ASCII0（OX4F）的虚拟键指的是"0"键，而VK_OEM_1指"带变音的0键"</param>
            <returns>
            
            <para>
            返回值给出了给定虚拟键的状态，状态如下：
            </para>
            
            若高序位为1，则键处于DOWN状态，否则为UP状态。
            
            若低序位为1，则键被触发。例如CAPS LOCK键，被找开时将被触发。若低序位置为0，则键被关闭，且不被触发。触发键在键盘上的指示灯，当键被触发时即亮，键不被触发时即灭。
            
            </returns>
            <remarks>
            
            <para>
            当给定线程从它的消息队列中读键消息时，该函数返回的键状态发生改变。该状态井不反映与硬件相关的中断级的状态。使用SetKeyboardState可获取这一信息。
            </para>
            
            <para>
            欲检取所有虚拟键状态信息，可以使用SetKeyboardState函数。
            </para>
            
            <para>
            应用程序可以使用虚拟键码常数VK_SHIFT，VK_CONTROL和VK_MENU作为nVirtKey参数的值。它给出shift，ctrl或alt键的值而不区分左右键，应用程序也可以使用如下的虚拟键码常数作nVirtKey的值来区分前述键的左键、右键的情形。
            </para>
            
            <para>
            VK_LSHIFT，VK_RSHIFT；VK_LCONTROL，VK_RCONTROL；VK_LMENU，VK_RMENU
            </para>
            
            <para>
            仅当应用程序调用GetKeyboardSlate，SetKeyboardState，GetAsyncKeystate；GetKeyState和MapVirtualKey函数时，才可用这些区分左右键的常数。
            </para>
            
            <para>
            GetKeyState函数只能用于检查VK_CAPITAL虚拟键的触发状态。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetFocus(System.IntPtr)">
            <summary>
            该函数对指定的窗口设置键盘焦点。
            </summary>
            <param name="hWnd">接收键盘输入的窗口指针。若该参数为NULL，则击键被忽略。</param>
            <returns>若函数调用成功，则返回原先拥有键盘焦点的窗口句柄。若hWnd参数无效或窗口未与调用线程的消息队列相关，则返回值为NULL。若要获得更多错误信息，可以调用GetLastError函数。</returns>
            <remarks>
            <para>
            SetFocus函数发送WM_KILLFOCUS消息到失去键盘焦点的窗口，并且发送WM_SETFOCUS消息到接受键盘焦点的窗口。它也激活接受键盘焦点的窗口或接受键盘焦点的窗口的父窗口。
            </para>
            
            <para>
            若一个窗口是活动的，但没有键盘焦点，则任何按键将会产生WM_SYSCHAR,WM_SYSKEYDOWN或WM_SYSKEYUP消息。若VK_MENU键也被按下，则消息的IParam参数将设置第30位。否则，所产生的消息将不设置此位。
            </para>
            
            <para>
            使用AttachThreadInput函数，一个线程可将输入处理连接到其他线程。这使得线程可以调用SetFocus函数为一个与其他线程的消息队列相关的窗口设置键盘焦点。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetKeyboardState(System.Byte[])">
            <summary>
            将256个虚拟键的状态拷贝到指定的缓冲区中。
            </summary>
            <param name="pbKeyState">指向一个256字节的数组，数组用于接收每个虚拟键的状态。</param>
            <returns>若函数调用成功，则返回0值。若函数调用不成功，则返回值为0。若要获得更多的错误信息，可以调用GetLastError函数。</returns>
            <remarks>
            应用程序可以调用该函数来检取所有虚拟键的当前状态。当键盘消息被从该线程的消息队列中移去时，虚拟键的状态发生改变。当键盘消息被发送到该线程的消息队列中，或者，当键盘消息被发送到其他线程的消息队列或被从其他线程的消息队列中检取到时，虚拟键的状态不发生改变。（例外：通过AttachThreadlnput连接的线程共享同一键盘状态。）当函数返回时，由lpKeyState参数指向的每一个数组成员中都包含了一个虚拟键的状态数据。若最高位被置为1，则该键处于down状态；否则，该键处于up状态。若最低位被置为1，则该键被触发。当一个键被打开时称之为被触发，如capslock键。若最低位被置为0，该键被关闭且不被触发。一个触发键也键盘上的指示灯（如果有的话）在该键被触发时点亮，在不被触发时灭掉。若要检取单个虚拟键的状态信息，可以调用GetKeyState函数。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            该函数将指定的虚拟键码和键盘状态翻译为相应的字符或字符串。该函数使用由给定的键盘布局句柄标识的物理键盘布局和输入语言来翻译代码。
            </summary>
            <param name="uVirtKey">指定要翻译的虚拟键码。</param>
            <param name="uScanCode">定义被翻译键的硬件扫描码。若该键处于up状态，则该值的最高位被设置。</param>
            <param name="lpbKeyState">指向包含当前键盘状态的一个256字节数组。数组的每个成员包含一个键的状态。若某字节的最高位被设置，则该键处于down状态。若最低位被设置，则表明该键被触发。在此函数中，仅有capslock键的触发位是相关的。NumloCk和scroll loCk键的触发状态将被忽略。</param>
            <param name="lpwTransKey">指向接受翻译所得字符或字符串的缓冲区。</param>
            <param name="fuState">定义一个菜单是否处于激活状态。若一菜单是活动的，则该参数为1，否则为0。</param>
            <returns>若定义的键为死键，则返回值为负值。否则，返回值应为如下的值：
            
            0：对于当前键盘状态，所定义的虚拟键没有翻译。
            
            1：一个字符被拷贝到缓冲区。
            
            2：两个字符被拷贝到缓冲区。当一个存储在键盘布局中的死键（重音或双音字符）无法与所定义的虚拟键形成一个单字符时，通常会返回该值。
            </returns>
            <remarks>
            
            <para>
            若键盘布局中原先存放了一个死键，则提供给ToAscii函数的参数可能不足以翻译虚拟键码。
            </para>
            
            <para>
            典型地，ToAscii函数执行基于虚拟键码的翻译。然而，在某些情况下，uScanCode参数的第15位可能被用来区分一个键的按下状态和释放状态。扫描码用于翻译Alt+数字键的键组合。
            </para>
            
            <para>
            尽管NUMLOCK事实影响键盘状态的触发键，TOAscii将忽略lpKeyState的触发设置（VK_NUMLOCK），因为仅uVirtKey参数就足以区分光标移动键（VL_HOME，INSERT,等等）和数字键（VK_DECIMAL，VK_NUMPADO_VK_NUMPAD9）。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.AttachThreadInput(System.Int32,System.Int32,System.Boolean)">
            <summary>
            允许线程和进程共享输入队列。连接了线程后，输入焦点、窗口激活、鼠标捕获、键盘状态以及输入队列状态都会进入共享。
            </summary>
            <param name="idAttach">欲连接线程的标识符。</param>
            <param name="idAttachTo">与idAttach线程连接的另一个线程的标识符。</param>
            <param name="fAttach">TRUE（非零）连接，FALSE撤消连接。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
            <remarks>
            调用这个函数时，会重设键盘状态。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindowThreadProcessId(System.IntPtr,System.UInt32)">
            <summary>
            获取与指定窗口关联在一起的一个进程和线程标识符。
            </summary>
            <param name="hwnd">指定窗口句柄。</param>
            <param name="lpdwProcessId">指定一个变量，用于装载拥有那个窗口的一个进程的标识符。</param>
            <returns>拥有窗口的线程的标识符。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetForegroundWindow">
            <summary>
            返回前台窗口（用户当前工作的窗口）。系统分配给产生前台窗口的线程一个稍高一点的优先级
            </summary>
            <returns>函数返回前台窗回的句柄。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.ReleaseCapture">
            <summary>
            从当前线程中的窗口释放鼠标捕获，并恢复通常的鼠标输入处理。捕获鼠标的窗口接收所有的鼠标输入（无论光标的位置在哪里），除非点击鼠标键时，光标热点在另一个线程的窗口中。
            </summary>
            <returns>如果函数调用成功，返回非零值；如果函数调用失败，返回值是零。若想获得更多的错误信息，请调用GetlastError函数。</returns>
            <remarks>
            应用程序在调用函数SetCaPture之后调用此函数。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.TrackMouseEvent(Py.Windows.TrackMouseEvents@)">
            <summary>
            当在指定时间内鼠标指针离开或盘旋在一个窗口上时，此函数寄送消息。
            </summary>
            <param name="tme">指向结构TRACKMOUSEEVENT的指针。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.mouse_event(Py.Windows.MouseEventFlag,System.Int32,System.Int32,System.Int32,System.UIntPtr)">
            <summary>
            综合鼠标击键和鼠标动作。
            </summary>
            <param name="flags">指定点击按钮和鼠标动作方式。</param>
            <param name="dx">鼠标沿x轴的绝对位置或者从上次鼠标事件产生以来移动的数量，依赖于MOOSEEVENTF_ABSOLOTE的设置。给出的绝对数据作为鼠标的实际X坐标；给出的相对数据作为移动的mickeys数。一个mickey表示鼠标移动的数量，表明鼠标已经移动。</param>
            <param name="dy">鼠标沿y轴的绝对位置或者从上次鼠标事件产生以来移动的数量，依赖于MOOSEEVENTF_ABSOLVTE的设置。给出的绝对数据作为鼠标的实际y坐标，给出的相对数据作为移动的mickeys数。</param>
            <param name="data">dwFlags为MOOSEEVENTF_WHEEL，则dwData指定鼠标轮移动的数量。正值表明鼠标轮向前转动，即远离用户的方向；负值表明鼠标轮向后转动，即朝向用户。一个轮击定义为WHEEL_DELTA，即120。</param>
            <param name="extraInfo">指定与鼠标事件相关的附加32位值。应用程序调用函数GetMessgeExtrajnfo来获得此附加信息。</param>
            <remarks>
            
            <para>
            如果鼠标被移动，用设置MOUSEEVENTF_MOVE来表明，dX和dy保留移动的信息。给出的信息是绝对或相对整数值。
            </para>
            
            <para>
            如果指定了MOWSEEVENTF_ABSOLOTE值，则dX和dy含有标准化的绝对坐标，其值在0到65535之间。事件程序将此坐标映射到显示表面。坐标（0，0）映射到显示表面的左上角，（6553，65535）映射到右下角。
            </para>
            
            <para>
            如果没指定MOWSEEVENTF_ABSOLOTE，dX和dy表示相对于上次鼠标事件产生的位置（即上次报告的位置）的移动。正值表示鼠标向右（或下）移动；负值表示鼠标向左（或上）移动。
            </para>
            
            <para>
            鼠标的相对移动服从鼠标速度和加速度等级的设置，一个最终用户用鼠标控制面板应用程序来设置这些值，应用程序用函数SystemParameterslnfo来取得和设置这些值。
            </para>
            
            <para>
            在应用加速时系统对指定相对鼠标移动提供了两个测试。如果指定的沿X轴y轴的距离比第一个鼠标阈值大，并且鼠标的加速等级非零，则操作系统将距离加倍。如果指定的沿X轴或y轴的距离比第二个鼠标阈值大，并且鼠标的加速等级为2，则操作系统将从第一个阈测试得来的距离加倍。这样就允许操作系统将指定鼠标沿X轴或y轴的相对位移加到4倍。
            </para>
            
            <para>
            一旦应用了加速，系统用期望的鼠标速度换算合成的值。鼠标速度的范围是从1（最慢）到20（最快），并代表基于鼠标移动的距离指示符移动的数量。缺省值是10，表示对鼠标的移动设有附加的修改。
            </para>
            
            <para>
            函数mouse_event需要用的应用程序用来合成鼠标事件。也被应用程序用来取得鼠标位置和鼠标按键状态之外的鼠标信息。例如，如果输入板制造商想将基于画笔的信息传给自己的应用程序，可以写一个直接与输入板硬件通信的动态键接库（DLL），获得附加的信息，并保存到一个队列中。DLL然后调用mouse_event，用标准按键和x/y位置数据，并在参数dwExtralnfo设置排列的附加信息的指针或索引。当应用程序需要附加信息时，调用DLL（连同存贮在dwEXtralnfo中的指针或索引），则DLL返回附加信息。
            </para>
            
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.SetClassLong(System.IntPtr,Py.Windows.GCL,System.Int64)">
            <summary>
            替换指定窗口所属的窗口类的额外存储空间中的指定偏移地址的16位值。由16位窗口支持的GCW_值己经过时，必须使用SetClassLong函数来设置此前使用SetClassword函数的GCW_值设置的类值。
            </summary>
            <param name="hWnd">窗口的句柄及间接给出的窗口所属的类。</param>
            <param name="nlndex">指定要获得的值的大于等于0字节的偏移量。有效值为从0开始到额外类存储空间字节数-2。例如: 若指定了10位或更多的额外类存储空间，则应设为第5个16位整数的索引位8。</param>
            <param name="dwNewLong">指定替换值。</param>
            <returns>如果函数成功，返回值是指定的16为整数的原来的值。如果该值未被预先设定，返回值为0。如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数</returns>
            <remarks>
            通过使用函数RegisterClassEx将结构WNDCLASSEX中的cbClsExtra单元指定为一个非0值来保留额外类的存储空间。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetClassLong(System.IntPtr,Py.Windows.GCL)">
            <summary>
            返回与指定窗口相关的WNDCLASSEX结构的指定32位值。
            </summary>
            <param name="hWnd">窗口句柄间接给出的窗口所属的类。</param>
            <param name="nlndex">指定要恢复的32位值。从额外的类存储空间恢复一个32位的值，指定的一个大于等于0的被恢复值的偏移量。有效值为从0开始到额外类存储空间字节数一4。例如，若指定了12位或多于12位的额外类存储空间，则应设为第三个32位整数的索引位8。</param>
            <returns>如果函数成功，返回值是所需的32位值；如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetWindowLong(System.IntPtr,Py.Windows.GCL)">
            <summary>
            获得有关指定窗口的信息，函数也获得在额外窗口内存中指定偏移位地址的32位度整型值。
            </summary>
            <param name="hWnd">窗口句柄及间接给出的窗口所属的窗口类。</param>
            <param name="nlndex">要获得值的大于等于0的值的偏移量。有效值的范围从0到额外窗口内存空间的字节数一4例如，若指定了12位或多于12位的额外类存储空间，则应设为第三个32位整数的索引位8。</param>
            <returns>如果函数成功，返回值是所需的32位值；如果函数失败，返回值是0。若想获得更多错误信息请调用 GetLastError函数。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetSystemMetrics(Py.Windows.SM)">
            <summary>
            返回与windows环境有关的信息。
            </summary>
            <param name="nIndex">Index of the n.</param>
            <returns>取决于具体的常数索引。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.ShowScrollBar(System.IntPtr,Py.Windows.SB,System.Boolean)">
            <summary>
            该函数显示或隐藏所指定的滚动条。
            </summary>
            <param name="hWnd">根据参数wBar值，处理滚动条控制或带有标准滚动条窗体。</param>
            <param name="bar">指定滚动条是被显示还是隐藏。</param>
            <param name="show">指定滚动条是被显示还是隐藏。此参数为TRUE，滚动条将被显示，否则被隐藏。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.EnableScrollBar(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            可以激活一个或两个滚动条箭头或是使其失效。
            </summary>
            <param name="hWnd">根据参数wSBflags的值，处理对窗体或滚动条的处理。</param>
            <param name="flags">指定滚动条的类型。</param>
            <param name="arrows">滚动条上的箭头是否被激活或是无效，并指出哪一个箭头位有效或是无效。</param>
            <returns>如果被指定的箭头被激活或未被激活，其返回值为非零；如果箭头已经是被请求的状态或是出现错误，那么返回值为零。若想获得更多的错误信息，请调用GetLastError函数</returns>
        </member>
        <member name="M:Py.Windows.Win32API.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.IntPtr,System.Drawing.Rectangle@,Py.Windows.SW)">
            <summary>
            滚动指定窗体客户区域的目录。
            </summary>
            <param name="hWnd">客户区域将被滚动的窗体句柄。</param>
            <param name="dx">在设备单元中，指定水平滚动数量。在向左滚动时此参数必须为负。</param>
            <param name="dy">在设备单元中，指定垂直滚动数量。在向上滚动时此参数必须为负。</param>
            <param name="rcScroll">指向RECT结构，它指定了将被滚动的客户区域部分。</param>
            <param name="rcClip">指向包含了类似于被剪下矩形的RECT结构。只有在剪下内部的小块图形才受影响。从矩形外向内部的滚动部分将被着色；而从内向外的滚动部分将不再被着色。</param>
            <param name="UpdateRegion">处理已被修改的区域，保存这些由于滚动而无效的区域。此参数可以为空。</param>
            <param name="rcInvalidated">非法的大小。</param>
            <param name="flags">指定控制滚动的标志。这个参数可以是下面的值：</param>
            <returns>如果函数运行成功，返回值为SIMPLEREGION（矩形的无效区域），COMPLEXREGION（非矩形的无效区域）或NULLREGION（没有使无效的区域）如果函数运行成功，返回值为ERROR。若想获得更多的错误信息，请调用GetLastError函数。</returns>
            <remarks>
            
            <para>
            如果窗体拥有WS_CLIPCHILDREN类型，那么由hrgnUpdate和prcUpdate指定的返回区域描述了必须更新的滚动窗体的全部区域，包括所需更新子窗体的任何区域。
            </para>
            
            若SW_SCROLLCHILDREN标志被设置，在子窗体被滚动时，系统将不能完全更新屏幕。位于矩形外边的滚动子窗体部分不被擦除，也不在它的新方向上被重画。为了移动子窗体使之完全不在prcScroll指定的矩形条中，可使用DeferWindowPos函数。若标志SW_SCROLLCHILDREN被设置并且^符号交叉滚动矩形，则光标也重新设置。
            
            所有输入输出均被定义为客户端如果有必要，使用IptoDP和dptoLP函数转换逻辑相关性。
            </remarks>
        </member>
        <member name="M:Py.Windows.Win32API.GetCurrentThreadId">
            <summary>
            获取当前线程一个唯一的线程标识符。
            </summary>
            <returns>当前的线程标识符。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.LoadLibrary(System.String)">
            <summary>
            映像模块到进行地址空间。
            </summary>
            <param name="lpFileName">载入的dll文件位置。</param>
            <returns>返回模块的指针。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            在模块中查找一个函数。
            </summary>
            <param name="hModule">查找的模块。</param>
            <param name="lpProcName">函数名。</param>
            <returns>指向函数的指针，可以用  <see cref="T:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer"/> 改成某个委托。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.FreeLibrary(System.IntPtr)">
            <summary>
            卸载库模块。
            </summary>
            <param name="hModule">模块。</param>
            <returns>成功返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:Py.Windows.Win32API.GetLastError">
            <summary>
            针对之前调用的api函数，用这个函数取得扩展错误信息。
            </summary>
            <returns>由api函数决定。请参考api32.txt文件，其中列出了一系列错误常数。</returns>
        </member>
        <member name="T:Py.Algorithm.Crc32">
            <summary>
            计算 32 位循环冗余检验码 (CRC)的工具。
            </summary>
            <remarks>
            此类用于计算一个流的 Crc32 ，且必须在流被复制后才能计算出 Crc32 。
            </remarks>
            <example>
            以下例子演示了如何使用 Crc32 类读取流的 CRC32 值。
            <code>
            using System.IO;
            using Py.Algorithm;
            using Py.IO;
            using Py.Logging;
            
            class Sample {
            
                public static void Main(){
                    Stream s = FileHelper.OpenRead("myFile.exe"); // 打开一个文件，返回流。
                    Crc32 crc32 = new Crc32();
                    int result = crc32.GetCrc32(s);
                    Logger.Write(result);
                }
                
            }
            </code>
            </example>
        </member>
        <member name="F:Py.Algorithm.Crc32.BUFFER_SIZE">
            <summary>
            缓存大小。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32._totalBytesRead">
            <summary>
            当前读取的长度。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32._crc32Table">
            <summary>
            CRC32表。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32._runningCrc32Result">
            <summary>
            运行结果。
            </summary>
        </member>
        <member name="M:Py.Algorithm.Crc32.GetCrc32(System.IO.Stream)">
            <summary>
            为指定的流返回CRC32。
            </summary>
            <param name="input">用来计算的CRC32的流。</param>
            <returns>返回参数流CRC32的整数形式。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            返回指定流的CRC32，并写入到输出流。
            </summary>
            <param name="input">用来计算的CRC32的流。</param>
            <param name="output">流出的CRC32计算缓存。</param>
            <returns>返回参数流CRC32的整数形式。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            获取给定（字，字节）组合的CRC32。 
            </summary>
            <param name="word">开始的词。</param>
            <param name="b">结合的字节数目。</param>
            <returns>组合结果。</returns>
        </member>
        <member name="M:Py.Algorithm.Crc32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新为运行使用给定的字节块的CRC32值。
            </summary>
            <param name="block">字节块。</param>
            <param name="offset">起点位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="block"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.#cctor">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Crc32"/> 的静态成员。
            </summary>
        </member>
        <member name="M:Py.Algorithm.Crc32.Gf2MatrixTimes(System.UInt32[],System.UInt32)">
            <summary>
            矩阵乘积。
            </summary>
            <param name="matrix">矩阵。</param>
            <param name="vec">向量。</param>
            <returns>乘积。</returns>
        </member>
        <member name="M:Py.Algorithm.Crc32.Gf2MatrixSquare(System.UInt32[],System.UInt32[])">
            <summary>
            矩阵乘积。
            </summary>
            <param name="square">矩阵。</param>
            <param name="mat">矩阵2。</param>
        </member>
        <member name="M:Py.Algorithm.Crc32.Combine(System.Int32,System.Int32)">
            <summary>
            结合当前正在运行的CRC32值。
            </summary>
            <param name="crc">计算值。</param>
            <param name="length">数据长度。</param>
            <remarks>
            这是非常有用的用在计算一个CRC的半分算法。多个线程可以计算每一个数据段的CRC32，然后结合目前的CRC32值。
            </remarks>
        </member>
        <member name="P:Py.Algorithm.Crc32.TotalBytesRead">
            <summary>
            获取当前已读的字节数。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Crc32.Crc32Result">
            <summary>
            获取当前运行的结果。
            </summary>
        </member>
        <member name="T:Py.Algorithm.Crc32.CrcCalculatorStream">
            <summary>
            一个计算 CRC32 时读写的文件流。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32.CrcCalculatorStream.UNSET_LENGTH_LIMIT">
            <summary>
            没有设置的长度。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32.CrcCalculatorStream._innerStream">
            <summary>
            内部流。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32.CrcCalculatorStream._crc32">
            <summary>
            当前使用的CRC32。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32.CrcCalculatorStream._lengthLimit">
            <summary>
            长度上限。
            </summary>
        </member>
        <member name="F:Py.Algorithm.Crc32.CrcCalculatorStream._leaveOpen">
            <summary>
            是否保持打开。
            </summary>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Crc32.CrcCalculatorStream"/> 的新实例。
            </summary>
            <param name="stream">要写入的 System.IO.Stream 对象。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为空。</exception>
            <remarks>
            从这个返回给内部流。
            </remarks>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Crc32.CrcCalculatorStream"/> 的新实例,并允许调用者指定如何处理内部流。
            </summary>
            <param name="stream">要写入的 System.IO.Stream 对象。</param>
            <param name="leaveOpen">是否保持流为打开的状态。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Crc32.CrcCalculatorStream"/> 的新实例,允许流的长度规格阅读。
            </summary>
            <param name="stream">内部流。</param>
            <param name="length">流的长度。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为空。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            初始化 <see cref="T:Py.Algorithm.Crc32.CrcCalculatorStream"/> 的新实例,允许分配该流的长度以及是否保留内部流关闭后打开。
            </summary>
            <param name="stream">内部流。</param>
            <param name="length">流的长度。</param>
            <param name="leaveOpen">是否保持流为打开的状态。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 必需大于 0 。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并记录读取的值，将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Flush">
            <summary>
            清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:Py.Algorithm.Crc32.CrcCalculatorStream.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:System.IO.Stream"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.TotalBytesSlurped">
            <summary>
            获取运行总字节数。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.Crc">
            <summary>
            获取当前的结果。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.LeaveOpen">
            <summary>
            获取或设置是否保持流为打开的状态。
            </summary>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.Length">
            <summary>
            获取用字节表示的流长度。
            </summary>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:Py.Algorithm.Crc32.CrcCalculatorStream.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="T:Py.Sql.SqlHelper">
            <summary>
            处理 SqlServer 的数据库处理类。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlHelper._dataReader">
            <summary> 
            操作的SqlDataReader对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.SqlHelper._connection">
            <summary> 
            操作的SqlConnection对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.SqlHelper._command">
            <summary> 
            操作的SqlCommand对象。
            </summary> 
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor">
            <summary> 
            初始化 Py.Sql.SqlDbHelper 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
            <param name="connection">已创建的连接的实例。</param>
            <exception cref="T:System.InvalidCastException">给的连接不符合当前类的标准。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(System.Data.SqlClient.SqlCommand)">
            <summary>
            初始化 Py.Sql.DbHelper 类的新实例。
            </summary>
            <param name="command">已创建的命令的实例。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(System.String)">
            <summary> 
            使用指定的数据字符初始化 Py.Sql.SqlDbHelper 类的新实例。
            </summary>
            <param name="connectionString">数据源或连接字符串。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            使用指定的数据字符,数据库密码初始化 Py.Sql.SqlDbHelper 类的新实例。
            </summary>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary> 
            使用指定的数据字符,用户名,密码初始化 Py.Sql.SqlDbHelper 类的新实例。
            </summary>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">附加的数据库文件或默认使用的数据库。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.#ctor(Py.Sql.DbHelper)">
            <summary>
            使用已有的辅助类初始化 <see cref="T:Py.Sql.SqlHelper"/> 的新实例，新实例和参数使用同一个连接。
            </summary>
            <param name="helper">The helper。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">传递的辅助类和当前实例的类型不相同。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.CreateConnection">
            <summary>
            当被子类重写时，初始化连接。
            </summary>
        </member>
        <member name="M:Py.Sql.SqlHelper.CreateCommand">
            <summary>
            创建并返回一个与当前使用的连接关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。
            </summary>
            <returns>创建的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.GetConnectionString(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            返回指定数据库连接的字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\SqlEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如SqlSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">附加的数据库文件或默认使用的数据库。</param>
            <param name="connTimeOut">连接服务器超时的时间。</param>
            <param name="openTimeOut">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.Object)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <example><code>
            using System;
            using Py.Sql;
            class Sample{
            static void Main(){
            DbHelper Sql = new OledbDbHelper("~/App_Code/DbHelper.mdb");
            Sql.SetSql("Select * from [TABLE] where id&gt;@id");
            Sql.AddParameter("id", 200);
            }
            }
            </code></example>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.Boolean)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.String)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.Int32)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String,System.DateTime)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameter(System.String)">
            <summary>
            添加命名参数，不添加值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AddParameters(System.Collections.IDictionary)">
            <summary>
            添加命名参数。
            </summary>
            <param name="d">参数键/值的集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteTable(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="tables">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.CreateAdapter">
            <summary>
            生成适合当前的数据库适配器辅助类。
            </summary>
            <returns>数据库适配器的辅助实例。</returns>
        </member>
        <member name="P:Py.Sql.SqlHelper.DataReader">
            <summary>
            获得正操作的DataReader对象。
            </summary>
        </member>
        <member name="P:Py.Sql.SqlHelper.Connection">
            <summary> 
            获得正操作的DbConnection对象。
            </summary> 
        </member>
        <member name="P:Py.Sql.SqlHelper.Command">
            <summary> 
            获得正操作的 DbCommand对象。
            </summary> 
        </member>
        <member name="T:Py.Sql.SqlHelper.AdapterHelper">
            <summary> 
            数据库适配器辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlHelper.AdapterHelper._dataAdapter">
            <summary>
            数据适配。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlHelper.AdapterHelper._dbHelper">
            <summary>
            辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.SqlHelper.AdapterHelper._commandBuilder">
            <summary>
            命令生成
            </summary>
        </member>
        <member name="M:Py.Sql.SqlHelper.AdapterHelper.CreateCommand(System.String)">
            <summary>
            被子类重写时，实现生成一个命令。
            </summary>
            <param name="cmdText">命令文本。</param>
            <returns>一个命令实例。</returns>
        </member>
        <member name="M:Py.Sql.SqlHelper.AdapterHelper.#ctor(Py.Sql.SqlHelper)">
            <summary> 
            使用Py.RunTime.Sql.SqlData 初始化 Py.RunTime.Sql.SqlData.RecordSet 类的新实例。
            </summary> 
            <param name="dbHelper">dbHelper对象</param>
        </member>
        <member name="M:Py.Sql.SqlHelper.AdapterHelper.Initialize">
            <summary>
            初始化当前集合。
            </summary>
        </member>
        <member name="P:Py.Sql.SqlHelper.AdapterHelper.DataAdapter">
            <summary>
            获取当前正在使用的 数据适配器。
            </summary>
        </member>
        <member name="P:Py.Sql.SqlHelper.AdapterHelper.DbHelper">
            <summary>
            获取当前正在使用的 数据库辅助类。
            </summary>
        </member>
        <member name="P:Py.Sql.SqlHelper.AdapterHelper.CommandBuilder">
            <summary>
            获取命令生成类。
            </summary>
        </member>
        <member name="T:Py.Sql.OdbcHelper">
            <summary>
            处理 Odbc 的数据库处理类。
            </summary>
        </member>
        <member name="F:Py.Sql.OdbcHelper._dataReader">
            <summary> 
            操作的OdbcDataReader对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.OdbcHelper._connection">
            <summary> 
            操作的OdbcConnection对象。
            </summary> 
        </member>
        <member name="F:Py.Sql.OdbcHelper._command">
            <summary> 
            操作的OdbcCommand对象。
            </summary> 
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor">
            <summary> 
            初始化 Py.Odbc.OdbcDbHelper 类的新实例。
            </summary>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(System.Data.Odbc.OdbcConnection)">
            <summary>
            初始化 Py.Odbc.DbHelper 类的新实例。
            </summary>
            <param name="connection">已创建的连接的实例。</param>
            <exception cref="T:System.InvalidCastException">给的连接不符合当前类的标准。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(System.Data.Odbc.OdbcCommand)">
            <summary>
            初始化 Py.Odbc.DbHelper 类的新实例。
            </summary>
            <param name="command">已创建的命令的实例。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="command"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(System.String)">
            <summary> 
            使用指定的数据字符初始化 Py.Odbc.OdbcDbHelper 类的新实例。
            </summary>
            <param name="connectionString">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            使用指定的数据字符,数据库密码初始化 Py.Odbc.OdbcDbHelper 类的新实例。
            </summary>
            <param name="driver">驱动。</param>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OdbcSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">数据库。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary> 
            使用指定的数据字符,用户名,密码初始化 Py.Odbc.OdbcDbHelper 类的新实例。
            </summary>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OdbcSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">登录的数据库名。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.#ctor(Py.Sql.DbHelper)">
            <summary>
            使用已有的辅助类初始化 <see cref="T:Py.Sql.OdbcHelper"/> 的新实例，新实例和参数使用同一个连接。
            </summary>
            <param name="helper">The helper。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">传递的辅助类和当前实例的类型不相同。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.SetConnectionString(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            设置指定数据库连接的字符串。
            </summary>
            <param name="driver">驱动。</param>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OdbcSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">默认使用的数据库。</param>
            <param name="connTimeOut">连接服务器超时的时间。</param>
            <param name="openTimeOut">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="driver"/> 或 <paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.CreateConnection">
            <summary>
            当被子类重写时，初始化连接。
            </summary>
        </member>
        <member name="M:Py.Sql.OdbcHelper.CreateCommand">
            <summary>
            创建并返回一个与当前使用的连接关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。
            </summary>
            <returns>创建的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.GetConnectionString(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            返回指定数据库连接的字符串。
            </summary>  
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OdbcSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">默认使用的数据库。</param>
            <param name="connTimeOut">连接服务器超时的时间。</param>
            <param name="openTimeOut">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.GetConnectionString(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            返回指定数据库连接的字符串。
            </summary>
            <param name="driver">驱动。</param>
            <param name="dataSource">数据源。服务器的Ip地址、域名、文件名或机器名。如 "localhost"、 ".\OdbcEXPRESS" 。</param> 
            <param name="userName">登录数据库的用户名字。可空。当不使用用户名时，将使用默认身份验证。（如OdbcSever的 windows 身份验证。）</param>
            <param name="password">登录数据库的用户密码。可空。</param>
            <param name="database">默认使用的数据库。</param>
            <param name="connTimeOut">连接服务器超时的时间。</param>
            <param name="openTimeOut">保持打开连接超时的时间。</param>
            <returns>连接字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="driver"/> 或 <paramref name="dataSource"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.Object)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <example><code>
            using System;
            using Py.Odbc;
            class Sample{
                static void Main(){
                    DbHelper Odbc = new OledbDbHelper("~/App_Code/DbHelper.mdb");
                    Odbc.SetOdbc("Select * from [TABLE] where id&gt;@id");
                    Odbc.AddParameter("@id", 200);
                }
            }
            </code></example>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.Boolean)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.String)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.Int32)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.Object,System.Data.Odbc.OdbcType)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <returns>对所添加的参数的引用。</returns>
            <see cref="M:Py.Sql.DbHelper.AddParameter(System.String,System.Object)"/>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.Object,System.Data.Odbc.OdbcType,System.Int32)">
            <summary>
            增加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <param name="type">执行的命令的参数类型。</param>
            <param name="size">执行的命令的参数大小。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String,System.DateTime)">
            <summary>
            添加命名参数。
            </summary>
            <param name="name">执行的命令的参数名。</param>
            <param name="value">执行的命令的参数的值。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameter(System.String)">
            <summary>
            添加命名参数，不添加值。
            </summary>
            <param name="name">要查找的列的名字。</param>
            <returns>对所添加的参数的引用。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AddParameters(System.Collections.IDictionary)">
            <summary>
            添加命名参数。
            </summary>
            <param name="d">参数键/值的集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="d"/> 为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteNonQuery(System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回受影响的行数，失败或异常返回-1。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>受影响的行数。</returns>
            <exception cref="T:System.ArgumentException">连接为空。</exception>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteScalar(System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回第一行第一列，失败或异常返回null 。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>object。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteTable(System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteTable(System.String,System.Data.CommandType,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">Sql语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="tables">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回第一个内存表。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="commandParameters">数据库参数。</param>
            <returns>表。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteReader(System.String,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="sql">SQL语句。</param>
            <param name="parameter">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.Odbc.OdbcParameter[])">
            <summary>
            执行数据库语句返回一个自进结果集流。
            </summary>
            <param name="commandText">SQL语句。</param>
            <param name="commandType">解释命令的字符串。</param>
            <param name="parameter">数据库参数。</param>
            <returns>读取。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.CreateAdapter">
            <summary>
            生成适合当前的数据库适配器辅助类。
            </summary>
            <returns>数据库适配器的辅助实例。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.GetCommandTextBuilder">
            <summary>
            生成一个命令生成工具。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Py.Sql.OdbcHelper.DataReader">
            <summary>
            获得正操作的DataReader对象。
            </summary>
        </member>
        <member name="P:Py.Sql.OdbcHelper.Connection">
            <summary> 
            获得正操作的DbConnection对象。
            </summary> 
        </member>
        <member name="P:Py.Sql.OdbcHelper.Command">
            <summary> 
            获得正操作的 DbCommand对象。
            </summary> 
        </member>
        <member name="T:Py.Sql.OdbcHelper.AdapterHelper">
            <summary> 
            数据库适配器辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.OdbcHelper.AdapterHelper._dataAdapter">
            <summary>
            数据适配。
            </summary>
        </member>
        <member name="F:Py.Sql.OdbcHelper.AdapterHelper._dbHelper">
            <summary>
            辅助类。
            </summary>
        </member>
        <member name="F:Py.Sql.OdbcHelper.AdapterHelper._commandBuilder">
            <summary>
            命令生成
            </summary>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AdapterHelper.CreateCommand(System.String)">
            <summary>
            被子类重写时，实现生成一个命令。
            </summary>
            <param name="cmdText">命令文本。</param>
            <returns>一个命令实例。</returns>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AdapterHelper.#ctor(Py.Sql.OdbcHelper)">
            <summary> 
            使用Py.RunTime.Odbc.OdbcData 初始化 Py.RunTime.Odbc.OdbcData.RecordSet 类的新实例。
            </summary> 
            <param name="dbHelper">dbHelper对象</param>
        </member>
        <member name="M:Py.Sql.OdbcHelper.AdapterHelper.Initialize">
            <summary>
            初始化当前集合。
            </summary>
        </member>
        <member name="P:Py.Sql.OdbcHelper.AdapterHelper.DataAdapter">
            <summary>
            获取当前正在使用的 数据适配器。
            </summary>
        </member>
        <member name="P:Py.Sql.OdbcHelper.AdapterHelper.DbHelper">
            <summary>
            获取当前正在使用的 数据库辅助类。
            </summary>
        </member>
        <member name="P:Py.Sql.OdbcHelper.AdapterHelper.CommandBuilder">
            <summary>
            获取命令生成类。
            </summary>
        </member>
        <member name="T:Py.Sql.OdbcHelper.CommandTextBuilder">
            <summary>
            Sql 生成类。
            </summary>
        </member>
        <member name="M:Py.Sql.OdbcHelper.CommandTextBuilder.Format(System.String,System.String)">
            <summary>
            格式化字符串格式。
            </summary>
            <param name="column">列。</param>
            <param name="format">参数源。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="T:Py.Logging.WebFormControlLogListener">
            <summary>
            将日志输出到控件。
            </summary>
        </member>
        <member name="F:Py.Logging.WebFormControlLogListener._control">
            <summary>
            当前使用的控件。
            </summary>
        </member>
        <member name="M:Py.Logging.WebFormControlLogListener.#ctor(System.Web.UI.Control)">
            <summary>
            初始化 <see cref="T:Py.Logging.WinFormControlLogListener"/> 的新实例。
            </summary>
            <param name="control">要使用的控件。</param>
        </member>
        <member name="M:Py.Logging.WebFormControlLogListener.OnLog(System.String)">
            <summary>
            将日志记录到缓存。
            </summary>
            <param name="message">内容。</param>
        </member>
        <member name="M:Py.Logging.WebFormControlLogListener.Control_Render(System.Web.UI.HtmlTextWriter,System.Web.UI.Control)">
            <summary>
            写入控件的委托。
            </summary>
            <param name="writer">要呈现内容的 System.Web.UI.HtmlTextWriter。</param>
            <param name="container">要呈现的 System.Web.UI.Control。</param>
        </member>
        <member name="M:Py.Logging.WebFormControlLogListener.Flush">
            <summary>
            保存缓存中的日志。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlLoader">
            <summary>
            处理节点。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlLoader.LoadNode(Py.Html.HtmlNode,Py.Html.HtmlReader)">
            <summary>
            开始读取 读取器 并将解析的结果加入当前节点。
            </summary>
            
            <remarks>
            
            <para>
            由于 HTML 是可以格式任意的， 所以无法像处理 XML 一样直接统计当前元素在全树的高。
            在 System.Xml.XmlReader 中有 Depth 属性，可以直接统计节点深度。 
            </para>
            
            <para>
            但 Py.Html.HtmlReader 不提供。如下例: &lt;img&gt; src="" &gt; 按严格
            的 XML 处理，树高加1， 但对 HTML， 这可以是错的，因此统计树高是没有意思的，所以，
            处理节点树生成时的树高问题，必须使用栈通过栈元素控制树结构。
            </para>
            
            <para>
            当读取一个 IMG 时， 将元素压入栈， 如果读到一个 /IMG，元素成功处理。 但 /IMG 往
            往忽略， 因此读到一个其他元素的 EndElement 。 同时弹出 IMG ，通过这个方法标记，
            使 IMG 可以顺利处理。
            </para>
            
            <para>
            因 HTML 可能未全关闭， 如 因网络原因导致 &lt;html&gt; 消失， 所以 处理完文档后，
            栈可以不空。
            </para>
            </remarks>
        </member>
        <member name="M:Py.Html.HtmlLoader.LoadHtml(Py.Html.HtmlNode,System.String)">
            <summary>
            载入 HTML 至目前指定的 元素 。
            </summary>
            <param name="current">要插入的节点。</param>
            <param name="html">内容。</param>
        </member>
        <member name="M:Py.Html.HtmlLoader.CanbeEmpty(System.String)">
            <summary>
            判断一个节点名是否可为不需关闭的节点。
            </summary>
            <param name="name">名字。</param>
            <returns></returns>
        </member>
        <member name="T:Py.Html.HtmlAttributeCollection">
            <summary>
            表示可以按名称或索引访问的属性的集合。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlAttributeCollection.Append(Py.Html.HtmlAttribute)">
            <summary>
            将指定的属性插入集合，并将其作为集合中的最后一个节点。
            </summary>
            <param name="node">要插入的 <see cref="T:Py.Html.HtmlAttribute"/>。</param>
            <returns>追加到集合的 HtmlAttribute。</returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="node"/> 是从创建此集合的文档之外的另一个文档创建的。</exception>
        </member>
        <member name="M:Py.Html.HtmlAttributeCollection.InsertAfter(Py.Html.HtmlAttribute,Py.Html.HtmlAttribute)">
            <summary>
            将指定属性直接插入到指定引用属性之后。
            </summary>
            <returns>要插入到集合中的 HtmlAttribute。</returns>
            <param name="newNode">要插入的 <see cref="T:Py.Html.HtmlAttribute" />。</param>
            <param name="refNode">作为引用属性的 <see cref="T:Py.Html.HtmlAttribute" />。<paramref name="newNode" /> 放在 <paramref name="refNode" /> 后面。</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="newNode" /> 是从创建此集合的文档之外的另一个文档创建的。或者，<paramref name="refNode" /> 不是此集合的成员。</exception>
        </member>
        <member name="M:Py.Html.HtmlAttributeCollection.NodeUpdated(Py.Html.HtmlAttribute)">
            <summary>
            完成节点的回调。
            </summary>
            <param name="node">发生改变的节点。</param>
        </member>
        <member name="M:Py.Html.HtmlAttributeCollection.InsertBefore(Py.Html.HtmlAttribute,Py.Html.HtmlAttribute)">
            <summary>
            将指定属性直接插入到指定引用属性之前。
            </summary>
            <returns>要插入到集合中的 HtmlAttribute。</returns>
            <param name="newNode">要插入的 <see cref="T:Py.Html.HtmlAttribute" />。</param>
            <param name="refNode">作为引用属性的 <see cref="T:Py.Html.HtmlAttribute" />。<paramref name="newNode" /> 放在 <paramref name="refNode" /> 之前。</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="newNode" /> 是从创建此集合的文档之外的另一个文档创建的。或者，<paramref name="refNode" /> 不是此集合的成员。</exception>
        </member>
        <member name="M:Py.Html.HtmlAttributeCollection.Prepend(Py.Html.HtmlAttribute)">
            <summary>
            将指定属性插入集合中，并将其作为集合的第一个节点。
            </summary>
            <param name="node">要插入的 <see cref="T:Py.Html.HtmlAttribute"/>。</param>
            <returns>添加到集合中的 HtmlAttribute。</returns>
        </member>
        <member name="T:Py.Core.ErrorAction">
            <summary>
            代表出错后的动作。 
            </summary>
        </member>
        <member name="F:Py.Core.ErrorAction.Throw">
            <summary>
            抛出错误。
            </summary>
        </member>
        <member name="F:Py.Core.ErrorAction.Skip">
            <summary>
            忽视错误。
            </summary>
        </member>
        <member name="F:Py.Core.ErrorAction.Retry">
            <summary>
            重试。
            </summary>
        </member>
        <member name="T:Py.Core.FileDataType">
            <summary>
            表示数据类型。
            </summary>
        </member>
        <member name="F:Py.Core.FileDataType.Binary">
            <summary>
            二进制格式。
            </summary>
        </member>
        <member name="F:Py.Core.FileDataType.Ascii">
            <summary>
            文本格式。
            </summary>
        </member>
        <member name="F:Py.Core.FileDataType.Unknown">
            <summary>
            未知。
            </summary>
        </member>
        <member name="T:Py.Core.SyntaxErrorType">
            <summary>
            表示一个语法分析错误类型。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Unexpected">
            <summary>
            多余某个操作符。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Expected">
            <summary>
            缺少一个操作符。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Invalid">
            <summary>
            不合法的使用。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Unrecognised">
            <summary>
            不识别的操作符。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.SyntaxError">
            <summary>
            语法错误。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Unclosed">
            <summary>
            语句未结束。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Other">
            <summary>
            其它错误。
            </summary>
        </member>
        <member name="F:Py.Core.SyntaxErrorType.Break">
            <summary>
            语句提前结束。
            </summary>
        </member>
        <member name="T:Py.Core.FileAction">
            <summary>
            指示对文件的操作。
            </summary>
        </member>
        <member name="F:Py.Core.FileAction.Default">
            <summary>
            默认。如果文件存在则打开，不存在则创建。
            </summary>
        </member>
        <member name="F:Py.Core.FileAction.Create">
            <summary>
            创建一个新文件。
            </summary>
        </member>
        <member name="F:Py.Core.FileAction.Open">
            <summary>
            编辑一个已存在的文件。
            </summary>
        </member>
        <member name="T:Py.Core.MatchOptions">
            <summary>
            表示一个字符串匹配时的选项。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.None">
            <summary>
            不使用选项。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.Default">
            <summary>
            默认选择。 (支持文件名， 忽略大小写)
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.NoEscape">
            <summary>
            不允许 \ 字符串转义。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.PathName">
            <summary>
            处理文件位置，而不是文件名。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.Period">
            <summary>
            点号只能匹配点号。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.LeadingDirectory">
            <summary>
            忽视前导 / 符。
            </summary>
        </member>
        <member name="F:Py.Core.MatchOptions.CaseSensitive">
            <summary>
            忽视大小写。
            </summary>
        </member>
        <member name="T:Py.Html.HtmlInputElement">
            <summary>
            表示一个 input 标签。
            </summary>
        </member>
        <member name="M:Py.Html.HtmlInputElement.#ctor(System.String,System.String,System.String,Py.Html.HtmlDocument)">
            <summary>
            初始化 <see cref="T:Py.Html.HtmlInputElement"/> 类的新实例。
            </summary>
            <param name="prefix">命名空间前缀，请参见 <see cref="P:Py.Html.HtmlElement.Prefix"/> 属性。</param>
            <param name="localName">本地名称，请参见 <see cref="P:Py.Html.HtmlElement.LocalName"/> 属性。</param>
            <param name="namespaceURI">命名空间 URI，请参见 <see cref="P:Py.Html.HtmlElement.NamespaceURI"/> 属性。</param>
            <param name="doc">父 HTML 文档。</param>
        </member>
        <member name="P:Py.Html.HtmlInputElement.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlInputElement.Type">
            <summary>
            获取节点的类型。
            </summary>
        </member>
        <member name="P:Py.Html.HtmlInputElement.Form">
            <summary>
            获取当前元素所在的表单。
            </summary>
        </member>
        <member name="T:Py.Core.UrlHelper">
            <summary>
            提供对 URL 地址的处理。
            </summary>
        </member>
        <member name="M:Py.Core.UrlHelper.AddParam(System.String,System.String,System.String)">
            <summary>
            在一个地址上增加一个参数。
            </summary>
            <param name="url">地址。</param>
            <param name="paramName">增加的参数名。</param>
            <param name="value">增加的值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.UrlHelper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新一个地址上增加一个参数， 如果不存在参数，添加。
            </summary>
            <param name="url">地址。</param>
            <param name="paramName">增加的参数名。</param>
            <param name="value">增加的值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.UrlHelper.RemoveParam(System.String,System.String)">
            <summary>
            删除参数。
            </summary>
            <param name="url">地址。</param>
            <param name="paramName">增加的参数名。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:Py.Core.UrlHelper.ReadParams(System.String)">
            <summary>
            获取属于一个地址的参数。
            </summary>
            <param name="url">地址。</param>
            <returns>全部参数的数列集合。</returns>
        </member>
        <member name="M:Py.Core.UrlHelper.Encode(System.String)">
            <summary>
            对 URL 字符串的路径部分进行编码，以进行从 Web 服务器到客户端的可靠的 HTTP 传输。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:Py.Core.UrlHelper.Decode(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
    </members>
</doc>
