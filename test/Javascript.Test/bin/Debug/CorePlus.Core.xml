<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CorePlus.Core</name>
    </assembly>
    <members>
        <member name="T:CorePlus.RunTime.SyntaxErrorType">
            <summary>
            表示一个语法分析错误类型。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Unexpected">
            <summary>
            多余某个操作符。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Expected">
            <summary>
            缺少一个操作符。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Invalid">
            <summary>
            不合法的使用。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Unrecognised">
            <summary>
            不识别的操作符。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.SyntaxError">
            <summary>
            语法错误。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Unclosed">
            <summary>
            语句未结束。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Other">
            <summary>
            其它错误。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxErrorType.Break">
            <summary>
            语句提前结束。
            </summary>
        </member>
        <member name="T:CorePlus.Algorithm.Enumerable">
            <summary>
            提供一组处理可枚举对象的方法。
            </summary>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            返回序列中和指定值相同的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <returns>一个数字，表示序列中和指定值相同的元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            返回序列中和指定值相同的元素数量。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>一个数字，表示序列中和指定值相同的元素数量。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">拷贝的目标。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标的列表位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">拷贝的目标位置。</param>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IList{``0},``0[],System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="dest">拷贝的目标数组。</param>
            <param name="destIndex">目标序列的开始位置索引。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="sourceIndex">开始复制的索引。</param>
            <param name="dest">拷贝的目标数组。</param>
            <param name="destIndex">目标序列的开始位置索引。</param>
            <param name="count">复制的元素个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> ， 小于 0  - 或者 -<paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="destIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="sourceIndex">开始复制的索引。</param>
            <param name="dest">可枚举的列表，如数组，集合。</param>
            <param name="destIndex">目标序列的开始位置索引。</param>
            <param name="count">复制的元素个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> ， 小于 0  - 或者 -<paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="destIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            从特定的列表索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">拷贝的源。</param>
            <param name="sourceIndex">序列里开始复制的位置。</param>
            <param name="dest">拷贝的目标。</param>
            <param name="destIndex">目标的位置。</param>
            <param name="count">拷贝的个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dest"/><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 小于 0 或 <paramref name="destIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"> <paramref name="destIndex"/> + <paramref name="count"/> 大于等于集合长度。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Equals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Equals``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},CorePlus.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},CorePlus.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            获得一个值，该值指示2个迭代器对应的值是否相等。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">用于比较的第一个序列。</param>
            <param name="b">用于比较的第二个序列。</param>
            <param name="count">比较的个数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在指定个数内的值完全相同，则 true。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获得2个迭代器首先出现不同的位置。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">第一个集合。</param>
            <param name="b">第二个集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},CorePlus.Core.EqualityComparison{``0})">
            <summary>
            获得2个迭代器首先出现不同的位置。
            </summary>
            <typeparam name="T"><paramref name="a"/> 和 <paramref name="b"/> 中的元素的类型。</typeparam>
            <param name="a">第一个集合。</param>
            <param name="b">第二个集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>出现不同的位置。若集合一致，返回 小于 0 的值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="a"/> 或 <paramref name="b"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.IsUnique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断一个枚举的值是否唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>如果唯一，则返回 true， 否则 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Join``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            将众多集合合成一个集合。
            </summary>
            <typeparam name="T"> source 元素的类型。</typeparam>
            <param name="sources">合并的集合。</param>
            <returns>合并得到的集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IEnumerator{``0},CorePlus.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},CorePlus.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="count">个数。</param>
            <param name="action">操作。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IList{``0},CorePlus.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="action">函数。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IList{``0},System.Int32,CorePlus.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="action">操作。</param>
            <returns>执行的次数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="action"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ForEach``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,CorePlus.Core.ForEachAction{``0})">
            <summary>
            对序列每个元素进行操作。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="startPosition">开始位置。</param>
            <param name="count">个数。</param>
            <param name="f">操作。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="f"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> 小于 0 或 <paramref name="startPosition"/> 大于列表的个数。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="startPosition"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.NextPermutation``1(System.Collections.Generic.IList{``0})">
            <summary>
            全排列一个集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>已经全都排列则返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.NextPermutation``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            全排列一个集合。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>已经全都排列则返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Unique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>元素唯一的集合的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Unique``1(System.Collections.Generic.IList{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <returns>元素唯一的集合的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Unique``1(System.Collections.Generic.IList{``0},CorePlus.Core.EqualityComparison{``0})">
            <summary>
            使一个序列的每个元素唯一。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>一个数字，表示删除的个数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            删除集合中满足条件的第一个位置元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">包含要计数的元素的序列。</param>
            <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
            <returns>如果元素找到且删除，返回 true， 否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.RemoveRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            删除了列表了内指定个数元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="index">开始删除的索引。</param>
            <param name="count">需删除的元素个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 超过索引。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <param name="compare">用于比较的函数。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="action">用于获取替换内容的方法，用原值做为参数，得到新值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 或 <paramref name="action"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="replaceWith">用于替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IList{``0},``0,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="value">要替换的内容。</param>
            <param name="replaceWith">用于替换的值。</param>
            <param name="compare">用于比较的函数。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},System.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="predicate">判断元素是否要替换的方法。</param>
            <param name="action">用于获取替换内容的方法，用原值做为参数，得到新值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 predicate 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Replace``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            替换集合中指定项。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">要替换的集合。</param>
            <param name="action">操作，返回被替换的值。</param>
            <returns>替换后的新集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 compare 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.Swap``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            交换两个列表中指定位置开始指定数目的元素。
            </summary>
            <typeparam name="T"><paramref name="x"/> 和 <paramref name="y"/> 中的元素的类型。</typeparam>
            <param name="x">可枚举的列表，如数组，集合。</param>
            <param name="y">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> 或 <paramref name="y"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 大于从 <paramref name="startIndex"/> 到目标列表结尾处之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ReverseSelf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            翻转列表中元素 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <param name="start">开始位置。</param>
            <param name="end">结束位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">start 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="end"/> 小于 <paramref name="start"/> 或 <paramref name="end"/> 超过列表长度。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.ReverseSelf``1(System.Collections.Generic.IList{``0})">
            <summary>
            翻转列表中元素 。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.GetOrDefault(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            从一个 <see cref="T:System.Collections.IDictionary"/> 获取指定键的值，如果不存在这个键对应的内容，则返回 <paramref name="defaultValue"/> 。
            </summary>
            <param name="d">要获取值的 <see cref="T:System.Collections.IDictionary"/> 。</param>
            <param name="key">要获取值的键名。</param>
            <param name="defaultValue">如果获取不到值，返回的默认值。</param>
            <returns>获取的值。如果获取不到值，则返回默认值。</returns>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            从一个 <see cref="T:System.Collections.IDictionary"/> 获取指定键的值，如果不存在这个键对应的内容，则返回 <paramref name="defaultValue"/> 。
            </summary>
            <typeparam name="Tkey"><see cref="T:System.Collections.IDictionary"/> 对应的键。</typeparam>
            <typeparam name="TValue"><see cref="T:System.Collections.IDictionary"/> 对应的值。</typeparam>
            <param name="d">要获取值的 <see cref="T:System.Collections.IDictionary"/> 。</param>
            <param name="key">要获取值的键名。</param>
            <param name="defaultValue">如果获取不到值，返回的默认值。</param>
            <returns>获取的值。如果获取不到值，则返回默认值。</returns>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.GetOrDefault(System.Collections.IList,System.Int32,System.Object)">
            <summary>
            从一个 <see cref="T:System.Collections.IList"/> 获取指定键的值，如果不存在这个键对应的内容，则返回 <paramref name="defaultValue"/> 。
            </summary>
            <param name="d">要获取值的 <see cref="T:System.Collections.IDictionary"/> 。</param>
            <param name="index">The index.</param>
            <param name="defaultValue">如果获取不到值，返回的默认值。</param>
            <returns>获取的值。如果获取不到值，则返回默认值。</returns>
        </member>
        <member name="M:CorePlus.Algorithm.Enumerable.GetOrDefault``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            从一个 <see cref="T:System.Collections.IList"/> 获取指定键的值，如果不存在这个键对应的内容，则返回 <paramref name="defaultValue"/> 。
            </summary>
            <typeparam name="T"><see cref="T:System.Collections.IList"/> 的类型。</typeparam>
            <param name="d">要获取值的 <see cref="T:System.Collections.IDictionary"/> 。</param>
            <param name="index">The index.</param>
            <param name="defaultValue">如果获取不到值，返回的默认值。</param>
            <returns>获取的值。如果获取不到值，则返回默认值。</returns>
        </member>
        <member name="T:CorePlus.RunTime.Thrower">
            <summary>
            用于抛出异常。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.Object,System.String,System.String)">
            <summary>
            如果符合条件，则引发一个异常。
            </summary>
            <param name="argument">参数。</param>
            <param name="paramName">参数名。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowArgumentNullExceptionIf(System.String,System.String,System.String)">
            <summary>
            如果符合条件，则引发一个异常。
            </summary>
            <param name="argument">参数。</param>
            <param name="paramName">参数名。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.ArgumentNullException">参数空。</exception>
            <exception cref="T:System.ArgumentException">参数空。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowArgumentExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果条件符合，则引发一个异常。
            </summary>
            <param name="condition">判断的条件，如果为 true，则引发异常。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentException">非法的操作。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.CheckArgumentException``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.String)">
            <summary>
            检查参数是否合法。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <param name="start">开始的位置。</param>
            <param name="end">结束的位置。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.CheckArgumentException``1(``0[],System.Int32,System.Int32,System.String)">
            <summary>
            检查参数是否合法。
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <param name="count">复制的个数。</param>
            <param name="paramName">参数名。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。或 <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。或 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowObjectDisposedExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果符合条件，则引发一个异常。
            </summary>
            <param name="disposed">资源是否释放。</param>
            <param name="objectName">对象名字。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowInvalidOperationExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则引发一个异常。
            </summary>
            <param name="condition">判断的条件，如果为 true，则引发异常。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.InvalidOperationException">非法的操作。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowArgumentOutOfRangeExceptionIf(System.Boolean,System.String,System.String)">
            <summary>
            如果条件符合，则引发一个异常。
            </summary>
            <param name="condition">判断的条件，如果为 true，则引发异常。</param>
            <param name="paramName">参数名。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">非法的操作。</exception>
        </member>
        <member name="M:CorePlus.RunTime.Thrower.ThrowNotSupportedExceptionIf(System.Boolean,System.String)">
            <summary>
            如果条件符合，则引发一个异常。
            </summary>
            <param name="condition">判断的条件，如果为 true，则引发异常。</param>
            <param name="message">自定义异常的消息。如果值为 null，则使用默认的消息。</param>
            <exception cref="T:System.NotSupportedException">非法的操作。</exception>
        </member>
        <member name="T:CorePlus.Core.UrlHelper">
            <summary>
            提供对 URL 地址的处理。
            </summary>
        </member>
        <member name="M:CorePlus.Core.UrlHelper.AddParam(System.String,System.String,System.String)">
            <summary>
            在一个地址上增加一个参数。
            </summary>
            <param name="url">要处理的地址。</param>
            <param name="paramName">增加的参数名。</param>
            <param name="value">增加的值。</param>
            <returns>新的地址组成的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.UrlHelper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新一个地址上增加一个参数， 如果不存在参数，添加。
            </summary>
            <param name="url">要处理的地址。</param>
            <param name="paramName">增加的参数名。</param>
            <param name="value">增加的值。</param>
            <returns>新的地址组成的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.UrlHelper.RemoveParam(System.String,System.String)">
            <summary>
            删除参数。
            </summary>
            <param name="url">要处理的地址。</param>
            <param name="paramName">增加的参数名。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.UrlHelper.ReadParams(System.String)">
            <summary>
            获取属于一个地址的参数。
            </summary>
            <param name="url">地址。</param>
            <returns>全部参数的数列集合。</returns>
        </member>
        <member name="T:CorePlus.Collections.TreeNode`1">
            <summary>
            表示一棵树。
            </summary>
            <typeparam name="T">内容类型。</typeparam>
        </member>
        <member name="T:CorePlus.Collections.ITreeNode`1">
            <summary>
            表示一个树节点。
            </summary>
            <typeparam name="T">树所带值。</typeparam>
        </member>
        <member name="T:CorePlus.Collections.IEntry">
            <summary>
            表示一个单元。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.IEntry.Name">
            <summary>
            获取单元的名字。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.NodeValue">
            <summary>
            获取或设置当前节点值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.ParentNode">
            <summary>
            获取当前树父节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.NextSibling">
            <summary>
            获取下一个相邻的节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.PreviousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.Depth">
            <summary>
            获取当前节点的深度。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ITreeNode`1.ChildNodes">
            <summary>
            获取当前节点的子节点。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TreeNode`1.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.TreeNode`1"/> 的新实例。
            </summary>
            <param name="name">节点的名字。</param>
        </member>
        <member name="M:CorePlus.Collections.TreeNode`1.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.TreeNode`1"/> 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TreeNode`1.#ctor(System.String,`0)">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.TreeNode`1"/> 的新实例。
            </summary>
            <param name="name">节点的名字。</param>
            <param name="value">节点所在值。</param>
        </member>
        <member name="M:CorePlus.Collections.TreeNode`1.CreateSubTreeNode(System.String,`0)">
            <summary>
            生成当前节点的子节点。
            </summary>
            <param name="name">节点的名字。</param>
            <param name="value">节点所在值。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.NodeValue">
            <summary>
            获取或设置当前节点值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.ParentNode">
            <summary>
            获取当前树父节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.Depth">
            <summary>
            获取当前节点的深度。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.NextSibling">
            <summary>
            获取或设置下一个相邻的节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.PreciousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.ChildNodes">
            <summary>
            获取当前节点的子节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.Name">
            <summary>
            获取单元的名字。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.CorePlus#Collections#ITreeNode{T}#NextSibling">
            <summary>
            获取下一个相邻的节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNode`1.CorePlus#Collections#ITreeNode{T}#PreviousSibling">
            <summary>
            获取上一个相邻的节点。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.TreeNodeList`1">
            <summary>
            树节点列表。
            </summary>
            <typeparam name="T">内容类型。</typeparam>
        </member>
        <member name="T:CorePlus.Collections.ITreeNodeList`1">
            <summary>
            表示所有子节点。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CorePlus.Collections.ITreeNodeList`1.Item(System.Int32)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="i">位置。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:CorePlus.Collections.ITreeNodeList`1.Item(System.String)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="name">节点名。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:CorePlus.Collections.ITreeNodeList`1.Count">
            <summary>
            获取子节点数目。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TreeNodeList`1._firstChild">
            <summary>
            首个子节点。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TreeNodeList`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的  IEnumerator 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TreeNodeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:CorePlus.Collections.TreeNodeList`1.First">
            <summary>
            获取或设置首节点。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TreeNodeList`1.Item(System.Int32)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="i">位置。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:CorePlus.Collections.TreeNodeList`1.Item(System.String)">
            <summary>
            获取指定位置的节点。
            </summary>
            <param name="name">节点名。</param>
            <returns>节点。</returns>
        </member>
        <member name="P:CorePlus.Collections.TreeNodeList`1.Count">
            <summary>
            获取子节点数目。
            </summary>
        </member>
        <member name="T:CorePlus.Algorithm.Sorter">
            <summary>
            提供排序算法。
            </summary>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.QuickSortInternal``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            快速排序。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.Sort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            排序。使用冒泡排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.SortDescend``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            倒排序。
            </summary>
            <param name="list">用于排序的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Sorter.IsSorted``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            判断某个序列是否完全排序。
            </summary>
            <param name="list">用于检查的列表。</param>
            <param name="start">开始排序的位置。</param>
            <param name="end">排序结束的位置。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="T:CorePlus.IO.CountingStream">
            <summary>
            用于计算以读写的字节数的流。
            </summary>
        </member>
        <member name="F:CorePlus.IO.CountingStream._s">
            <summary>
            用于操作的内部流。
            </summary>
        </member>
        <member name="F:CorePlus.IO.CountingStream._bytesWritten">
            <summary>
            已写入的字节数。
            </summary>
        </member>
        <member name="F:CorePlus.IO.CountingStream._bytesRead">
            <summary>
            已读取的大小。
            </summary>
        </member>
        <member name="F:CorePlus.IO.CountingStream._initialOffset">
            <summary>
            开始偏移位置。
            </summary>
        </member>
        <member name="F:CorePlus.IO.CountingStream._closeInput">
            <summary>
            是否需关闭基础流。
            </summary>
        </member>
        <member name="M:CorePlus.IO.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            初始化 CorePlus.CountingStream 的新实例。
            </summary>
            <param name="baseStream">流。</param>
        </member>
        <member name="M:CorePlus.IO.CountingStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            初始化 CorePlus.CountingStream 的新实例。可选是否关闭基础流。
            </summary>
            <param name="baseStream">流。</param>
            <param name="leaveOpen">指定是否需要同时关闭基础流。</param>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Adjust(System.Int64)">
            <summary>
            调整已写入的大小。
            </summary>
            <param name="delta">差额。</param>
            <exception cref="T:System.InvalidOperationException">已读取的流大小小于差额。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param>
            <param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param>
            <param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param>
            <returns>当前流中的新位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:System.IO.Stream"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:CorePlus.IO.CountingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步读操作。
            </summary>
            <param name="buffer">数据读入的缓冲区。</param>
            <param name="offset"><paramref name="buffer"/> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
            <param name="count">最多读取的字节数。</param>
            <param name="callback">可选的异步回调，在完成读取时调用。</param>
            <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
            <returns>
            表示异步读取的 <see cref="T:System.IAsyncResult"/>（可能仍处于挂起状态）。
            </returns>
            <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
            <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
            <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持读取操作。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步写操作。
            </summary>
            <param name="buffer">从中写入数据的缓冲区。</param>
            <param name="offset"><paramref name="buffer"/> 中的字节偏移量，从此处开始写入。</param>
            <param name="count">最多写入的字节数。</param>
            <param name="callback">可选的异步回调，在完成写入时调用。</param>
            <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
            <returns>表示异步写入的 IAsyncResult（可能仍处于挂起状态）。</returns>
            <exception cref="T:System.IO.IOException">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</exception>
            <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
            <exception cref="T:System.NotSupportedException">当前 Stream 实现不支持写入操作。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.EndRead(System.IAsyncResult)">
            <summary>
            等待挂起的异步读取完成。
            </summary>
            <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
            <returns>
            从流中读取的字节数，介于零 (0) 和所请求的字节数之间。流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="asyncResult"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception>
            <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.EndWrite(System.IAsyncResult)">
            <summary>
            结束异步写操作。
            </summary>
            <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="asyncResult"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception>
            <exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.CreateObjRef(System.Type)">
            <summary>
            创建一个对象，该对象包含生成用于与远程对象进行通信的代理所需的全部相关信息。
            </summary>
            <param name="requestedType">新的 <see cref="T:System.Runtime.Remoting.ObjRef"/> 将引用的对象的 <see cref="T:System.Type"/>。</param>
            <returns>生成代理所需要的信息。</returns>
            <exception cref="T:System.Runtime.Remoting.RemotingException">此实例不是有效的远程处理对象。</exception>
            <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:CorePlus.IO.CountingStream.InitializeLifetimeService">
            <summary>
            获取控制此实例的生存期策略的生存期服务对象。
            </summary>
            <returns>
            	<see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 类型的对象，用于控制此实例的生存期策略。这是此实例当前的生存期服务对象（如果存在）；否则为初始化为 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> 属性的值的新生存期服务对象。
            </returns>
            <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="M:CorePlus.IO.CountingStream.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:CorePlus.IO.CountingStream.ReadByte">
            <summary>
            从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。
            </summary>
            <returns>转换为 Int32 的无符号字节，或者如果到达流的末尾，则为 -1。</returns>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.WriteByte(System.Byte)">
            <summary>
            将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。
            </summary>
            <param name="value">要写入流的字节。</param>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:CorePlus.IO.CountingStream.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:CorePlus.IO.CountingStream.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="P:CorePlus.IO.CountingStream.WrappedStream">
            <summary>
            获取内部的流。
            </summary>
        </member>
        <member name="P:CorePlus.IO.CountingStream.BytesWritten">
            <summary>
            获取已写入的字节数。
            </summary>
        </member>
        <member name="P:CorePlus.IO.CountingStream.BytesRead">
            <summary>
            获取已读取的大小。
            </summary>
        </member>
        <member name="P:CorePlus.IO.CountingStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
            <value></value>
            <returns>
            如果流支持读取，为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.IO.CountingStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持查找，为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.IO.CountingStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
            <value></value>
            <returns>
            如果流支持写入，为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.IO.CountingStream.Length">
            <summary>
            获取用字节表示的流长度。
            </summary>
            <value></value>
            <returns>用字节表示流长度的长值。</returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:CorePlus.IO.CountingStream.ComputedPosition">
            <summary>
            获取计算的位置。
            </summary>
            <value>计算值。</value>
        </member>
        <member name="P:CorePlus.IO.CountingStream.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
            <value></value>
            <returns>流中的当前位置。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:CorePlus.IO.CountingStream.BaseStream">
            <summary>
            获取当前操作的基础流。
            </summary>
        </member>
        <member name="P:CorePlus.IO.CountingStream.CanTimeout">
            <summary>
            获取一个值，该值确定当前流是否可以超时。
            </summary>
            <value></value>
            <returns>一个确定当前流是否可以超时的值。</returns>
        </member>
        <member name="P:CorePlus.IO.CountingStream.ReadTimeout">
            <summary>
            获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。
            </summary>
            <value></value>
            <returns>一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:System.IO.Stream.ReadTimeout"/> 方法总是引发 <see cref="T:System.InvalidOperationException"/>。</exception>
        </member>
        <member name="P:CorePlus.IO.CountingStream.WriteTimeout">
            <summary>
            获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。
            </summary>
            <value></value>
            <returns>一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:System.IO.Stream.WriteTimeout"/> 方法总是引发 <see cref="T:System.InvalidOperationException"/>。</exception>
        </member>
        <member name="T:CorePlus.Core.FileBase">
            <summary>
            为所有支持单一文件操作的类提供抽象基类。
            </summary>
            <remarks>
            
            <para>
            <see cref="T:CorePlus.Core.FileBase"/> 提供了文件操作的基础模型。
            </para>
            
            <para>
            当需要创建文件时，使用 <see cref="M:CorePlus.Core.FileBase.Create(System.String)"/> 方法;当需要打开文件时，使用 <see cref="M:CorePlus.Core.FileBase.Open(System.String)"/> 方法;当需要保存文件时，使用 <see cref="M:CorePlus.Core.FileBase.Save"/> 方法。子类通过继承和重载这些方法来保证使用统一的方法来处理不同格式的文件。
            </para>
            
            </remarks>
        </member>
        <member name="M:CorePlus.Core.FileBase.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.Core.FileBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Core.FileBase.#ctor(System.String,System.IO.FileMode)">
            <summary>
            使用指定的路径和打开方式初始化 <see cref="T:CorePlus.Core.FileBase"/> 类的新实例。
            </summary>
            <param name="path">要打开或创建的文件路径。</param>
            <param name="mode">打开文件的方式。默认情况，将根据文件是否存在决定打开或创建文件。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
            <exception cref="T:CorePlus.IO.FileExistsException">载入的文件已存在，无法覆盖。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.Finalize">
            <summary>
            释放 <see cref="T:CorePlus.Core.FileBase"/> 所占用的资源。
            </summary>
        </member>
        <member name="M:CorePlus.Core.FileBase.OnFileNotFound(System.String)">
            <summary>
            触发文件未找到的事件。
            </summary>
            <param name="path">文件名。</param>
            <exception cref="T:System.IO.FileNotFoundException">触发 <see cref="T:System.IO.FileNotFoundException"/> 异常。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.OnFileExists(System.String)">
            <summary>
            触发文件已存在的事件。
            </summary>
            <param name="filePath">文件名。</param>
            <exception cref="T:CorePlus.IO.FileExistsException">触发 System.IO.FileExistsException 异常。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.OnCreate(System.String)">
            <summary>
            当被子类重写时，实现创建一个新的文件。
            </summary>
            <param name="path">要创建的新文件路径。如果 <paramref name="path"/> 为 null。表示是第一次创建。</param>
        </member>
        <member name="M:CorePlus.Core.FileBase.OnOpen(System.String)">
            <summary>
            当被子类重写时，实现打开已存在的文件。
            </summary>
            <param name="path">要打开的文件的路径。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.OnSave(System.String)">
            <summary>
            当被子类重写时，将当前文件保存到指定的位置。
            </summary>
            <param name="path">保存的目标位置。</param>
        </member>
        <member name="M:CorePlus.Core.FileBase.Dispose(System.Boolean)">
            <summary>
            释放当前实例使用的资源，可选是否释放非托管资源。
            </summary>
            <param name="disposing">如果为 true，则同时释放占用的托管与非托管资源，否则只释放托管资源。</param>
        </member>
        <member name="M:CorePlus.Core.FileBase.Create(System.String)">
            <summary>
            在指定的路径上创建一个新文件。
            </summary>
            <param name="path">要创建的新文件的路径。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.Open(System.String)">
            <summary>
            打开指定的文件。
            </summary>
            <param name="path">要打开的文件的路径。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为空。</exception>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.Save">
            <summary>
            保存当前的全部修改。
            </summary>
            <exception cref="T:System.InvalidOperationException">没有设置保存的文件路径。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.Save(System.String,CorePlus.Core.OverwriteType)">
            <summary>
            保存当前操作的文件到指定位置。
            </summary>
            <param name="path">要保存的文件路径。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>如果保存成功，返回得到的文件路径，否则返回 null 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.Close">
            <summary>
            关闭当前文件。释放所有占用的句柄。
            </summary>
        </member>
        <member name="M:CorePlus.Core.FileBase.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Core.FileBase.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Core.FileBase.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:CorePlus.Core.FileBase.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="P:CorePlus.Core.FileBase.FilePath">
            <summary>
            获取目前正在操作的文件的完整路径。
            </summary>
        </member>
        <member name="P:CorePlus.Core.FileBase.FileName">
            <summary>
            获取目前正在操作的文件名。
            </summary>
        </member>
        <member name="P:CorePlus.Core.FileBase.FileInfo">
            <summary>
            返回和当前文件对应的 <see cref="P:CorePlus.Core.FileBase.FileInfo"/>。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.Collection`1">
            <summary>
            为泛型集合提供基类。
            </summary>
            <typeparam name="T">集合中的元素类型。</typeparam>
            <seealso cref="T:System.Collections.ObjectModel.Collection`1"/>
            <remarks>
            <para>
            通过创建 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类的一个构造类型的实例，可以立即使用该类；您只需指定要包含在集合中的对象类型即可。此外，您可以从任意构造类型派生自己的集合类型，或者从 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类本身派生出泛型集合类型。
            </para>
            
            <para>
            <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 类提供了受保护的方法，这些方法可用于在添加和移除项、清除集合或设置现有项的值时自定义该类的行为。
            </para>
            
            <para>
            大多数 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 对象都可以被修改。但是，不能修改使用只读 <see cref="T:Py.Collections.Generic.IList`1"></see> 对象初始化的 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 对象。有关此类的只读版本，请参见 <see cref="T:Py.Collections.ObjectModel.Collection`1"></see>。
            </para>
            
            <para>可使用一个整数索引访问此集合中的元素。 此集合中的索引从零开始。</para>
            
            <para><see cref="T:Py.Collections.ObjectModel.Collection`1"></see> 接受 null 引用（在 Visual Basic 中为 Nothing） 作为引用类型的有效值并且允许有重复的元素。
            </para>
            
            <para>
            给实现者的说明：
            
            提供此基类旨在使实施者更易于创建自定义集合。实现者最好扩展此基类，而不是创建自己的类。
            </para>
            
            </remarks>
        </member>
        <member name="F:CorePlus.Collections.Collection`1._items">
            <summary>
            存储项的列表。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.#ctor">
            <summary>
            初始化为空的 <see cref="T:CorePlus.Collections.Collection`1"/> 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.#ctor(System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:CorePlus.Collections.Collection`1"/> 的新实例。
            </summary>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.Collection`1"/> 的新实例。并复制列表的项到集合。
            </summary>
            <param name="collection">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            将 <see cref="T:CorePlus.Collections.Collection`1"/>类的新实例初始化为指定列表的包装。
            </summary>
            <param name="list">由新的集合包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.Add(`0)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">要添加到集合结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将对象添加到集合。
            </summary>
            <param name="items">对象。</param>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.Clear">
            <summary>
            从集合中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.OnRemoveAll">
            <summary>
            从集合中移除所有元素。
            </summary>
            <returns>全部移除返回 true，否则不移除。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在集合中找到 item，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个集合复制到兼容的一维 System.Array。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>  等于或大于 <paramref name="array"/> 的长度。 - 或 - index 小于零。</exception>
            <exception cref="T:System.ArgumentException">源集合中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/>  末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>用于集合的集合。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 大于集合的元素的个数。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.OnAddItem(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <returns>继续添加返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.IsCompatibleObject(System.Object)">
            <summary>
            检查对象是否为当前 <typeparamref name="T"/> 型。
            </summary>
            <param name="value">值。</param>
            <returns>如果正确，则返回 true。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从集合中移除的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在原始集合中未找到 item，此方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.RemoveRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            从集合中删除指定的元素。
            </summary>
            <param name="items">要从集合中移除的元素。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.RemoveAt(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 等于或大于集合的元素的个数。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.OnRemoveItem(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
            <returns>可以移除返回 true，否则不移除。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。 - 或 - <paramref name="index"/> 等于或大于集合的元素的个数。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.ToArray">
            <summary>
            将当前集合的项复制到一个为等效的数组。
            </summary>
            <returns>转换的数组。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.ToArray(System.Int32,System.Int32)">
            <summary>
            将当前集合的项复制到一个为等效的数组。
            </summary>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>转换的数组。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            将某项添加到 <see cref="T:System.Collections.IList"/> 中。
            </summary>
            <param name="value">要添加到 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
            <returns>新元素的插入位置。</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 System.Collections.IList 是否包含特定值。
            </summary>
            <param name="value">要在 System.Collections.IList 中查找的 System.Object。</param>
            <returns> 如果在 System.Collections.IList 中找到 System.Object，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> 在 <see cref="T:System.Collections.IList"/> 中是 null 引用。</exception>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 System.Collections.IList 中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 System.Collections.IList 移除的 System.Object。</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.Count">
            <summary>
            获取集合中实际包含的元素数。
            </summary>
            <value>集合中实际包含的元素数。</value>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.IsEmpty">
            <summary>
            获取或设置一个值，该值指示是否 is empty。
            </summary>
            <value>如果 is empty， 则 true; 否则, false。</value>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是该集合的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且集合为只读。</exception>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.Items">
            <summary>
            获取集合周围的 <see cref="T:System.Collections.Generic.IList&lt;T&gt;"/> 包装。
            </summary>
            <value>集合周围的 <see cref="T:System.Collections.Generic.IList&lt;T&gt;"/> 包装。</value>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#IList#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IList 是否为只读。
            </summary>
            <value>如果 System.Collections.IList 为只读，则为 true；否则为 false。</value>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取或设置指定位置的 <see cref="T:System.Object"/>。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是 System.Collections.IList 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且 System.Collections.IList 为只读。</exception>
        </member>
        <member name="T:CorePlus.Collections.Collection`1.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Collection`1.DebugView._collection">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Collection`1.DebugView.#ctor(CorePlus.Collections.Collection{`0})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.Collection`1.DebugView"/> 的新实例。
            </summary>
            <param name="collection">集合。</param>
        </member>
        <member name="P:CorePlus.Collections.Collection`1.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="T:CorePlus.IO.StreamBuffer">
            <summary>
            表示来自流的缓存。
            </summary>
        </member>
        <member name="T:CorePlus.IO.TextBuffer">
            <summary>
            表示可读取连续字符系列的缓存。
            </summary>
            <remarks>
            TextBuffer 是 TextReader 的补充。TextBuffer 本质其实是一个 TextReader 。但 TextBuffer 开放了更多信息，仅适合于高级场所使用。
            </remarks>
        </member>
        <member name="F:CorePlus.IO.TextBuffer.EOF">
            <summary>
            行尾的标记。
            </summary>
        </member>
        <member name="F:CorePlus.IO.TextBuffer.Null">
            <summary>
            提供一个无数据可供读取的 TextBuffer。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Read">
            <summary>
            读取输入流中的下一个字符并使此缓存的位置提升一个字符。
            </summary>
            <returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。 默认返回 -1 。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取最大 <paramref name="count" /> 的字符并从 <paramref name="index" /> 开始将该数据写入 <paramref name="buffer" />。
            </summary>
            <returns>已读取的字符数。该数小于或等于 <paramref name="count" />，具体取决于流中是否有可用的数据。如果调用此方法时没有更多的字符留下可供读取，则此方法返回 0。</returns>
            <param name="buffer">此方法返回时，包含指定的字符数组，该数组的 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之间的值由从当前源中读取的字符替换。</param>
            <param name="index">
            <paramref name="buffer" /> 中开始写入的位置。</param>
            <param name="count">最多读取的字符数。如果在将 <paramref name="count" /> 个字符读入 <paramref name="buffer" /> 之前已到达流的末尾，则当前方法将返回。</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> 为 null。</exception>
            <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取最大 <paramref name="count" /> 的字符并从 <paramref name="index" /> 开始将该数据写入 <paramref name="buffer" />。
            </summary>
            <returns>基础流的位置由读入 <paramref name="buffer" /> 的字符编号提前。已读取的字符数。该数字将小于或等于 <paramref name="count" />，具体取决于是否所有的输入字符都已读取。</returns>
            <param name="buffer">此方法返回时，此参数包含指定的字符数组，该数组中从 <paramref name="index" /> 到 (<paramref name="index" /> + <paramref name="count" /> -1) 之间的值由从当前源中读取的字符替换。</param>
            <param name="index">
            <paramref name="buffer" /> 中开始写入的位置。</param>
            <param name="count">最多读取的字符数。</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer" /> 为 null。</exception>
            <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> 或 <paramref name="count" /> 为负。</exception>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.ReadLine">
            <summary>
            从当前流中读取一行字符并将数据作为字符串返回。
            </summary>
            <returns>输入流的下一行，或者如果已读取了所有字符，则为 null。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.ReadToEnd">
            <summary>
            读取从当前位置到 TextReader 的结尾的所有字符并将它们作为一个字符串返回。
            </summary>
            <returns>包含从当前位置到 TextReader 的结尾的所有字符的字符串。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue" /></exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Seek(System.Int64)">
            <summary>
            移动当前缓存的位置。
            </summary>
            <param name="offset">移动的偏移数。</param>
            <returns>返回本次的偏移大小，或者如果没有更多的可用字符，则为 0。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Peek">
            <summary>
            读取下一个字符，而不更改读取器状态或字符源。返回下一个可用字符，而实际上并不从输入流中读取此字符。
            </summary>
            <returns>一个整数，它表示下一个要读取的字符，或者如果没有更多的可用字符或此流不支持查找，则为 -1。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.PushBack(System.Int32)">
            <summary>
            将 <paramref name="character"/> 放回缓存。
            </summary>
            <param name="character">要放入的字符。</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.PushBack(System.Char)">
            <summary>
            将 <paramref name="character"/> 放回缓存。
            </summary>
            <param name="character">要放入的字符。</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.ReadIf(System.Char)">
            <summary>
            读取一个字符，如果下一个字符是 <paramref name="expected"/> 。则提升一个位置，否则保留位置。
            </summary>
            <param name="expected">期待的字符。</param>
            <returns>是否已读到数据，并提升。</returns>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Dispose">
            <summary>
            释放由此 <see cref="T:CorePlus.IO.TextBuffer"/> 对象使用的所有资源。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Close">
            <summary>
            关闭 <see cref="T:CorePlus.IO.TextBuffer"/> 并释放与该 TextReader 关联的所有系统资源。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:CorePlus.IO.TextBuffer"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">
            为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.DiscardBufferedData">
            <summary>
            允许 <see cref="T:CorePlus.IO.TextBuffer"/> 对象丢弃其当前数据。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.Synchronized(CorePlus.IO.TextBuffer)">
            <summary>
            在指定 TextBuffer 周围创建线程安全包装。
            </summary>
            <returns>一个线程安全的 <see cref="T:CorePlus.IO.TextBuffer"/>。</returns>
            <param name="buffer">要同步的 TextBuffer。</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> 为 null。</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:CorePlus.IO.TextBuffer.BufferSize">
            <summary>
            获取当前的缓存大小。
            </summary>
        </member>
        <member name="P:CorePlus.IO.TextBuffer.Current">
            <summary>
            获取或设置当前的字符。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.#ctor(CorePlus.IO.TextBuffer)">
            <summary>
            初始化 <see cref="T:CorePlus.IO.TextBuffer.SyncTextBuffer"/> 的新实例。
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Close">
            <summary>
            关闭 <see cref="T:CorePlus.IO.TextBuffer"/> 并释放与该 TextReader 关联的所有系统资源。
            </summary>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:CorePlus.IO.TextBuffer"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Peek">
            <summary>
            读取下一个字符，而不更改读取器状态或字符源。返回下一个可用字符，而实际上并不从输入流中读取此字符。
            </summary>
            <returns>
            一个整数，它表示下一个要读取的字符，或者如果没有更多的可用字符或此流不支持查找，则为 -1。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Read">
            <summary>
            读取输入流中的下一个字符并使此缓存的位置提升一个字符。
            </summary>
            <returns>
            输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。 默认返回 -1 。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取最大 <paramref name="count"/> 的字符并从 <paramref name="index"/> 开始将该数据写入 <paramref name="buffer"/>。
            </summary>
            <param name="buffer">此方法返回时，包含指定的字符数组，该数组的 <paramref name="index"/> 和 (<paramref name="index"/> + <paramref name="count"/> - 1) 之间的值由从当前源中读取的字符替换。</param>
            <param name="index"><paramref name="buffer"/> 中开始写入的位置。</param>
            <param name="count">最多读取的字符数。如果在将 <paramref name="count"/> 个字符读入 <paramref name="buffer"/> 之前已到达流的末尾，则当前方法将返回。</param>
            <returns>
            已读取的字符数。该数小于或等于 <paramref name="count"/>，具体取决于流中是否有可用的数据。如果调用此方法时没有更多的字符留下可供读取，则此方法返回 0。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取最大 <paramref name="count"/> 的字符并从 <paramref name="index"/> 开始将该数据写入 <paramref name="buffer"/>。
            </summary>
            <param name="buffer">此方法返回时，此参数包含指定的字符数组，该数组中从 <paramref name="index"/> 到 (<paramref name="index"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字符替换。</param>
            <param name="index"><paramref name="buffer"/> 中开始写入的位置。</param>
            <param name="count">最多读取的字符数。</param>
            <returns>
            基础流的位置由读入 <paramref name="buffer"/> 的字符编号提前。已读取的字符数。该数字将小于或等于 <paramref name="count"/>，具体取决于是否所有的输入字符都已读取。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index"/> 小于 <paramref name="count"/>。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 或 <paramref name="count"/> 为负。</exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.PushBack(System.Char)">
            <summary>
            将 <paramref name="character"/> 放回缓存。
            </summary>
            <param name="character">要放入的字符。</param>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.ReadLine">
            <summary>
            从当前流中读取一行字符并将数据作为字符串返回。
            </summary>
            <returns>输入流的下一行，或者如果已读取了所有字符，则为 null。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue"/></exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.ReadToEnd">
            <summary>
            读取从当前位置到 TextReader 的结尾的所有字符并将它们作为一个字符串返回。
            </summary>
            <returns>包含从当前位置到 TextReader 的结尾的所有字符的字符串。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.OutOfMemoryException">内存不足，无法为返回的字符串分配缓冲区。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符数大于 <see cref="F:System.Int32.MaxValue"/></exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.Seek(System.Int64)">
            <summary>
            移动当前缓存的位置。
            </summary>
            <param name="offset">移动的偏移数。</param>
            <returns>返回本次的偏移大小，或者如果没有更多的可用字符，则为 0。</returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.TextBuffer.SyncTextBuffer.DiscardBufferedData">
            <summary>
            允许 <see cref="T:CorePlus.IO.TextBuffer"/> 对象丢弃其当前数据。
            </summary>
        </member>
        <member name="P:CorePlus.IO.TextBuffer.SyncTextBuffer.Current">
            <summary>
            获取或设置当前的字符。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer.MinBufferSize">
            <summary>
            默认的最小缓存大小。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer.DefaultPushBackBufferSize">
            <summary>
            默认的回退数据大小。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer._bufferStart">
            <summary>
            缓存的开始位置。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer._bufferEnd">
            <summary>
            缓存的结束位置。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer._charBuffer">
            <summary>
            表示实际的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer._charBufferSize">
            <summary>
            实际的缓存大小。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StreamBuffer._buffer">
            <summary>
            用于存储回退的字符的数组首地址。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.DetectEncoding(System.IO.Stream,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="s">缓存。</param>
            <param name="numBom">BOM 字节数。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.DetectEncoding(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="buffer">缓存。</param>
            <param name="len">缓存的大小。</param>
            <param name="numBom">BOM 字节数。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.String)">
            <summary>
            为指定的文件名初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的新实例。
            </summary>
            <param name="path">要读取的完整文件路径。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.String,System.Text.Encoding)">
            <summary>
            为指定的文件名初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的新实例。
            </summary>
            <param name="path">要读取的完整文件路径。 </param>
            <param name="encoding">打开文件的编码。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.IO.Stream)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.String,System.Int32)">
            <summary>
            为指定的文件名初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的新实例。
            </summary>
            <param name="path">要读取的完整文件路径。 </param>
            <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            为指定的文件名初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的新实例。
            </summary>
            <param name="path">要读取的完整文件路径。 </param>
            <param name="encoding">打开文件的编码。 </param>
            <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> 为空字符串 ("")。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> 为 null。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。 </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，比如在未映射的驱动器上。 </exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="path"/> 包括不正确或无效的文件名、目录名或卷标的语法。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。</param>
            <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。</param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            用指定的字符编码为指定的流初始化 <see cref="T:CorePlus.IO.StreamBuffer"/> 类的一个新实例。
            </summary>
            <param name="stream">要读取的流。 </param>
            <param name="encoding">要使用的字符编码。 </param>
            <param name="bufferSize">最小缓冲区大小（以 16 位字符的数目为单位）。 </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> 不支持读取。 </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> 或 <paramref name="encoding"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.DiscardBufferedData">
            <summary>
            允许 <see cref="T:CorePlus.IO.StreamBuffer"/> 对象丢弃其当前数据。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.Read">
            <summary>
            读取输入流中的下一个字符并使此缓存的位置提升一个字符。
            </summary>
            <returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.Peek">
            <summary>
            读取下一个字符，而不更改读取器状态或字符源。返回下一个可用字符，而实际上并不从输入流中读取此字符。
            </summary>
            <returns>
            一个整数，它表示下一个要读取的字符，或者如果没有更多的可用字符或此流不支持查找，则为 -1。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.Seek(System.Int64)">
            <summary>
            移动当前缓存的位置。
            </summary>
            <param name="offset">移动的偏移数。</param>
            <returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.ReadBuffer">
            <summary>
            从当前源读入新的数据放到缓存。
            </summary>
            <returns>如果已成功读到数据并存到缓存，返回 true ， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.PushBack(System.Char)">
            <summary>
            将 <paramref name="character"/> 放回缓存。
            </summary>
            <param name="character">要放入的字符。</param>
        </member>
        <member name="M:CorePlus.IO.StreamBuffer.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:CorePlus.IO.TextBuffer"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="P:CorePlus.IO.StreamBuffer.BaseStream">
            <summary>
            返回基础流。
            </summary>
            <returns>基础流。</returns>
        </member>
        <member name="P:CorePlus.IO.StreamBuffer.CurrentEncoding">
            <summary>
            获取当前 <see cref="T:System.IO.StreamReader"/> 对象正在使用的当前字符编码。
            </summary>
            <returns>当前读取器所使用的当前字符编码。第一次调用 <see cref="T:System.IO.StreamReader"/> 的任何 <see cref="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)"/> 方法后，该值可能会不同，因为直到第一次调用 <see cref="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)"/> 方法时，才会进行编码的自动检测。</returns>
        </member>
        <member name="P:CorePlus.IO.StreamBuffer.EndOfStream">
            <summary>
            获取一个值，该值表示当前的流位置是否在流的末尾。
            </summary>
            <returns>
            如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
            <exception cref="T:System.ObjectDisposedException">基础流已释放。</exception>
        </member>
        <member name="P:CorePlus.IO.StreamBuffer.Current">
            <summary>
            获取或设置当前的字符。
            </summary>
        </member>
        <member name="T:CorePlus.IO.FileHelper">
            <summary>
            提供用于创建、复制、删除、移动和打开文件和文件夹的静态方法。
            </summary>
            <remarks>
            相对于 <see cref="T:System.IO.File"/> 和 <see cref="T:System.IO.Directory"/> 对象，<c>FileHelper</c> 不会因为文件或目录不存在而引发异常。相对地，<c>FileHelper</c>会创建默认的目录和返回默认的值。
            </remarks>
        </member>
        <member name="M:CorePlus.IO.FileHelper.DeleteFile(System.String)">
            <summary>
            删除指定的文件。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="path">要删除的文件的名称。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.DeleteFileX(System.String)">
            <summary>
            粉碎指定的文件。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="path">要删除的文件的名称。</param>
            <remarks>
            相对于 <see cref="M:CorePlus.IO.FileHelper.DeleteFile(System.String)"/>, 此函数能删除一些无法正常删除的文件，但此函数效率低。
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.DeleteDirectory(System.String)">
            <summary>
            删除指定的目录并删除该目录中的任何子目录和文件。如果指定的目录不存在，则不引发异常。
            </summary>
            <param name="path">要移除的目录的名称。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ClearDirectory(System.String)">
            <summary>
            删除指定目录中的任何子目录和文件。如果指定的目录不存在，则创建空目录。
            </summary>
            <param name="path">要清空的目录的名称。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CopyFile(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有文件复制到新文件。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于复制的文件位置。</param>
            <param name="destPath">复制后的文件保存位置。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>如果文件被成功复制，则返回新文件的路径， 否则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CopyDirectoryInternal(System.String,System.String)">
            <summary>
            将现有目录复制到新目录。
            </summary>
            <param name="sourcePath">用于复制的目录位置。</param>
            <param name="destPath">复制后的目录保存位置。</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CopyDirectory(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有目录复制到新目录。如果指定的目录不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于复制的目录位置。</param>
            <param name="destPath">复制后的目录保存位置。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>如果目录被成功复制，则返回新目录的路径， 否则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CopyFileTo(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有文件复制到指定的文件夹。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于复制的文件位置。</param>
            <param name="destDirectoryPath">复制后的文件保存位置。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>返回新文件的位置。如果复制失败，则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个目录。- 或 -<paramref name="destDirectoryPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CopyDirectoryTo(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有目录复制到新目录。如果指定的目录不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于复制的目录位置。</param>
            <param name="destDirectoryPath">复制后的目录保存位置。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>返回新目录的位置。如果复制失败，则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个目录。- 或 -<paramref name="destDirectoryPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CreateFile(System.String,CorePlus.Core.OverwriteType)">
            <summary>
            在指定路径中创建文件。
            </summary>
            <param name="path">要创建的文件的路径及名称。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>一个 <see cref="T:System.IO.FileStream"/>，它提供对 <paramref name="path"/> 中指定的文件的读/写访问。如果无法创建新文件，则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.CreateDirectory(System.String,CorePlus.Core.OverwriteType)">
            <summary>
            按 <paramref name="path"/> 的指定创建所有目录和子目录。
            </summary>
            <param name="path">要创建的目录路径。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>返回创建的目录。如果创建失败，则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.MoveFile(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将指定文件移到新位置，并提供指定新文件名的选项。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="sourcePath">要移动的文件的名称。</param>
            <param name="destPath">文件的新路径。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>如果文件被成功剪切，则返回新文件的路径， 否则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.MoveDirectory(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将文件或目录及其内容移到新位置。如果指定的目录不存在，则不引发异常。
            </summary>
            <param name="sourcePath">要移动的文件或目录的路径。</param>
            <param name="destPath">指向 <paramref name="sourcePath"/> 的新位置的路径。如果 <paramref name="sourcePath"/> 是一个文件，则 <paramref name="destPath"/> 也必须是一个文件名。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>如果目录被成功剪切，则返回新目录的路径， 否则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.MoveFileTo(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有文件移动到指定的文件夹。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于移动的文件位置。</param>
            <param name="destDirectoryPath">移动后的文件保存位置。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>返回新文件的位置。如果移动失败，则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个目录。- 或 -<paramref name="destDirectoryPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.MoveDirectoryTo(System.String,System.String,CorePlus.Core.OverwriteType)">
            <summary>
            将现有目录移动到新目录。如果指定的目录不存在，则不引发异常。
            </summary>
            <param name="sourcePath">用于移动的目录位置。</param>
            <param name="destDirectoryPath">移动后的目录保存位置。</param>
            <param name="overwrite">指定当目标目录已经存在时，应该采取的行为。默认为合并。</param>
            <returns>返回新目录的位置。如果移动失败，则返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destDirectoryPath"/> 是一个目录。- 或 -<paramref name="destDirectoryPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.Replace(System.String,System.String,System.String)">
            <summary>
            用其他文件的内容替换指定文件的内容，删除原始文件，并创建被替换文件的备份。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="sourcePath">替换由 <paramref name="destPath"/> 指定的文件的文件名。</param>
            <param name="destPath">替换文件的名称。</param>
            <param name="bakFileName">备份文件的名称。默认为原文件名尾缀 .bak 的文件名。</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourcePath"/> 或 <paramref name="destPath"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="sourcePath"/> 或 <paramref name="destPath"/> 是一个目录。- 或 -<paramref name="destPath"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.AddAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            添加指定路径上文件的指定的 <see cref="T:System.IO.FileAttributes"/>。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="path">该文件的路径。</param>
            <param name="fileAttributes">所需的 <see cref="T:System.IO.FileAttributes"/>，例如 Hidden、ReadOnly、Normal 和 Archive。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.RemoveAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            删除指定路径上文件的指定的 <see cref="T:System.IO.FileAttributes"/>。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="path">该文件的路径。</param>
            <param name="fileAttributes">所需的 <see cref="T:System.IO.FileAttributes"/>，例如 Hidden、ReadOnly、Normal 和 Archive。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            设置指定路径上文件的指定的 <see cref="T:System.IO.FileAttributes"/>。如果指定的文件不存在，则不引发异常。
            </summary>
            <param name="path">该文件的路径。</param>
            <param name="fileAttributes">所需的 <see cref="T:System.IO.FileAttributes"/>，例如 Hidden、ReadOnly、Normal 和 Archive。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.Exists(System.String)">
            <summary>
            确定文件或目录是否存在。
            </summary>
            <param name="path">要检查的文件或目录。</param>
            <returns>如果调用方具有要求的权限并且 path 包含现有文件或目录的名称，则为 true；否则为 false。如果 path 为 null、无效路径或零长度字符串，则此方法也将返回 false。如果调用方不具有读取指定文件或目录所需的足够权限，则不引发异常并且该方法返回 false，这与 path 是否存在无关。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ExistsFile(System.String)">
            <summary>
            确定文件是否存在。
            </summary>
            <param name="path">要检查的文件。</param>
            <returns>如果调用方具有要求的权限并且 path 包含现有文件的名称，则为 true；否则为 false。如果 path 为 null、无效路径或零长度字符串，则此方法也将返回 false。如果调用方不具有读取指定文件所需的足够权限，则不引发异常并且该方法返回 false，这与 path 是否存在无关。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ExistsDirectory(System.String)">
            <summary>
            确定目录是否存在。
            </summary>
            <param name="path">要检查的目录。</param>
            <returns>如果调用方具有要求的权限并且 path 包含现有目录的名称，则为 true；否则为 false。如果 path 为 null、无效路径或零长度字符串，则此方法也将返回 false。如果调用方不具有读取指定目录所需的足够权限，则不引发异常并且该方法返回 false，这与 path 是否存在无关。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.IsFileWritable(System.String)">
            <summary>
            检查目前是否具有指定文件的修改权限。
            </summary>
            <returns>如果可以修改文件，则返回 true, 否则返回 false。如果指定的文件不存在，则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.IsDirectoryWritable(System.String)">
            <summary>
            检查目前是否具有指定目录的修改权限。
            </summary>
            <returns>如果可以修改目录，则返回 true, 否则返回 false。如果指定的目录不存在，则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="option"><see cref="T:System.IO.SearchOption"/> 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>一个 String 数组，它包含指定目录中与指定搜索模式匹配的文件的名称。文件名包含完整路径。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFiles(System.String,System.Text.RegularExpressions.Regex,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定正则表达式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="searchPatterns">一个 <see cref="T:System.Text.RegularExpressions.Regex"/>, 用于测试指定的文件名是否符合要求。</param>
            <param name="option"><see cref="T:System.IO.SearchOption"/> 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>一个 String 数组，它包含指定目录中与指定搜索模式匹配的文件的名称。文件名包含完整路径。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="searchPatterns">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 System.IO.Path.DirectorySeparatorChar 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（“..”），也不能包含 <see cref="F:System.IO.Path.InvalidPathChars"/> 中的任何字符。多个文件名直接用;隔开。如 *.jpg;*.bmp 。</param>
            <param name="option"><see cref="T:System.IO.SearchOption"/> 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>一个 String 数组，它包含指定目录中与指定搜索模式匹配的文件的名称。文件名包含完整路径。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="option"><see cref="T:System.IO.SearchOption"/> 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>与搜索模式匹配的目录的 String 数组。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="searchPatterns">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 System.IO.Path.DirectorySeparatorChar 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（“..”），也不能包含 <see cref="F:System.IO.Path.InvalidPathChars"/> 中的任何字符。多个文件名直接用;隔开。如 *.jpg;*.bmp 。</param>
            <param name="option"><see cref="T:System.IO.SearchOption"/> 值之一，指定搜索操作应包括所有子目录还是仅包括当前目录。</param>
            <returns>与搜索模式匹配的目录的 String 数组。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFileSystemEntries(System.String)">
            <summary>
            返回指定目录中所有文件和子目录的名称。
            </summary>
            <param name="path">为其返回文件名和子目录名的目录。</param>
            <returns>一个 String 数组，它包含指定目录中文件系统项的名称。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFileSystemEntries(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            返回与指定正则表达式匹配的文件系统项的数组。
            </summary>
            <param name="path">要搜索的目录。</param>
            <param name="searchPatterns">一个 <see cref="T:System.Text.RegularExpressions.Regex"/>, 用于测试指定的文件名是否符合要求。</param>
            <returns>一个 String 数组，它包含指定目录中与指定搜索模式匹配的文件的名称。文件名包含完整路径。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFileSystemEntries(System.String,System.String)">
            <summary>
            返回与指定搜索条件匹配的文件系统项的数组。
            </summary>
            <param name="path">要搜索的路径。</param>
            <param name="searchPatterns">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 System.IO.Path.DirectorySeparatorChar 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（“..”），也不能包含 <see cref="F:System.IO.Path.InvalidPathChars"/> 中的任何字符。多个文件名直接用;隔开。如 *.jpg;*.bmp 。</param>
            <returns>一个 String 数组，它包含与搜索条件匹配的文件系统项。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetFileLength(System.String)">
            <summary>
            获取指定文件的长度。
            </summary>
            <param name="path">要获取文件长度的文件位置。</param>
            <returns>返回文件的大小。如果文件不存在，则返回 -1。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ContainsFileSystemEntry(System.String,System.String)">
            <summary>
            确定一个目录是否包含匹配指定模式的子目录或文件。
            </summary>
            <param name="path">要确定的目录位置。</param>
            <param name="searchPatterns">要与 <paramref name="path"/> 中的文件名匹配的搜索字符串。此参数不能以两个句点（“..”）结束，不能在 System.IO.Path.DirectorySeparatorChar 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 的前面包含两个句点（“..”），也不能包含 <see cref="F:System.IO.Path.InvalidPathChars"/> 中的任何字符。多个文件名直接用;隔开。如 *.jpg;*.bmp 。</param>
            <returns>如果该目录不包含任何子目录或文件，则返回 true，否则返回 false。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetEncoding(System.String)">
            <summary>
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型。
            </summary>
            <param name="path">要判断编码的文件路径。</param>
            <returns>一个 <see cref="T:System.Text.Encoding"/> 对象，表示指定文件的编码。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetEncoding(System.IO.Stream)">
            <summary>
            通过给定的文件流，判断文件的编码类型。
            </summary>
            <param name="seekableStream">要判断编码的文件流。</param>
            <returns>一个 <see cref="T:System.Text.Encoding"/> 对象，表示指定文件流的编码。</returns>
            <exception cref="T:System.NotSupportedException"><paramref name="seekableStream"/> 不支持 Seek 。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetTempFile">
            <summary>
            创建磁盘上唯一命名的零字节的临时文件并返回该用于输出到该文件的 <see cref="T:System.IO.FileStream"/>。
            </summary>
            <returns>一个 <see cref="T:System.IO.FileStream"/>， 用于写入该临时文件。</returns>
        </member>
        <member name="M:CorePlus.IO.FileHelper.GetTempFile(System.String,System.String)">
            <summary>
            在指定的目录创建磁盘上唯一命名的零字节的临时文件并返回该用于输出到该文件的 <see cref="T:System.IO.FileStream"/>。
            </summary>
            <param name="path">临时文件所在的父目录。</param>
            <param name="extension">期望使用的扩展名(含点)。</param>
            <returns>一个 <see cref="T:System.IO.FileStream"/>， 用于写入该临时文件。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.WriteAllText(System.String,System.String,System.Text.Encoding,CorePlus.Core.OverwriteType)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。
            </summary>
            <param name="path">要写入的文件。</param>
            <param name="contents">要写入的文件的字符串。</param>
            <param name="encoding">一个 <see cref="T:System.Text.Encoding"/> 对象，表示应用于字符串的编码。</param>
            <param name="overwrite">指定当目标文件已经存在时，应该采取的行为。默认为强制覆盖。</param>
            <returns>如果写入成功则返回新文件名，否则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            将指定的字符串追加到文件中，如果文件还不存在则创建该文件。
            </summary>
            <param name="path">要将指定的字符串追加到的文件。</param>
            <param name="contents">要追加到文件中的字符串。</param>
            <param name="encoding">要使用的字符编码。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ChangeEncoding(System.String,System.Text.Encoding)">
            <summary>
            转换文件的编码。
            </summary>
            <param name="path">要转换编码的文件。</param>
            <param name="encoding">转换后的新编码。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ChangeEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            转换文件的编码。
            </summary>
            <param name="path">要转换编码的文件。</param>
            <param name="srcEncoding">转换前的编码。</param>
            <param name="destEncoding">转换后的新编码。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
            </summary>
            <param name="path">要打开以进行读取的文件。</param>
            <param name="encoding">应用到文件内容的编码。</param>
            <returns>包含文件所有行的字符串。如果文件不存在，则返回 null 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.OpenWrite(System.String)">
            <summary>
            打开现有文件以进行写入。
            </summary>
            <param name="path">要打开以进行写入的文件。</param>
            <returns>具有 <see cref="F:System.IO.FileAccess.Write"/> 访问权限的指定路径上的非共享 <see cref="T:System.IO.FileStream"/> 对象。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.FileHelper.OpenRead(System.String)">
            <summary>
            打开现有文件以进行读取。如果文件不存在，则返回 <see cref="P:Stream.Null"/> 。
            </summary>
            <param name="path">要打开以进行读取的文件。</param>
            <returns>指定路径上的只读 <see cref="T:System.IO.Stream"/>, 如果文件不存在，则返回 <see cref="P:Stream.Null"/> 。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="T:CorePlus.Text.XmlHelper">
            <summary>
            提供 XML 文档的辅助操作。
            </summary>
        </member>
        <member name="F:CorePlus.Text.XmlHelper._xmlFile">
            <summary>
            文件位置。
            </summary>
        </member>
        <member name="F:CorePlus.Text.XmlHelper._xmlDoc">
            <summary>
            实例。
            </summary>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.Text.XmlHelper"/> 的新实例。
            </summary>
            <param name="xmlFile">打开的文件。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.GetDataView(System.String)">
            <summary>
            获取指定节点的数据表。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
            <returns>数据表。</returns>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.SetInnerText(System.String,System.String)">
            <summary>
            设置节点的内容。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.Delete(System.String)">
            <summary>
            删除指定节点。
            </summary>
            <param name="xmlPath">要操作的位置。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.InsertNode(System.String,System.String,System.String,System.String)">
            <summary>
            插入一个节点。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="childNode">子节点。</param>
            <param name="element">元素。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.InsertElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个元素。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="element">元素。</param>
            <param name="attr">属性。</param>
            <param name="attrContent">属性值。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.InsertElement(System.String,System.String,System.String)">
            <summary>
            插入一个元素。
            </summary>
            <param name="mainNode">主节点。</param>
            <param name="element">元素。</param>
            <param name="content">内容。</param>
        </member>
        <member name="M:CorePlus.Text.XmlHelper.Save">
            <summary>
            保存当前位置。
            </summary>
        </member>
        <member name="T:CorePlus.Core.Rand">
            <summary>
            生成一个随机数/字符串的工具。
            </summary>
        </member>
        <member name="F:CorePlus.Core.Rand._Letters">
            <summary>
            所有字母。
            </summary>
        </member>
        <member name="F:CorePlus.Core.Rand._UserName">
            <summary>
            获取用户名中合法的字符。
            </summary>
        </member>
        <member name="F:CorePlus.Core.Rand._FileName">
            <summary>
            获取文件名的合法字符串。
            </summary>
        </member>
        <member name="F:CorePlus.Core.Rand._Password">
            <summary>
            密码中合法的字符串。
            </summary>
        </member>
        <member name="F:CorePlus.Core.Rand._random">
            <summary>
            当前的随机数生成器。
            </summary>
        </member>
        <member name="M:CorePlus.Core.Rand.Reset(System.Int32)">
            <summary>
            重置当前的随机生成器。
            </summary>
            <param name="sleep">线程延时时间。</param>
        </member>
        <member name="M:CorePlus.Core.Rand.Int">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <returns>一个非负整数。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Int(System.Int32)">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <param name="maxValue">最大值。</param>
            <returns>一个非负整数。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Int(System.Int32,System.Int32)">
            <summary>
            生成在指定范围内的随机数。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。</param>
            <returns>一个正整数或零。</returns>
            <remarks>如果最小值不大于最大值，将返回最小值。</remarks>
        </member>
        <member name="M:CorePlus.Core.Rand.Interger">
            <summary>
            返回一个整数。
            </summary>
            <returns>一个整数。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.IntArray">
            <summary>
            返回随机的整形数组。(101个内)
            </summary>
            <returns>数组。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.IntArray(System.Int32,System.Int32)">
            <summary>
            返回随机的整形数组。
            </summary>
            <param name="min">最小大小。</param>
            <param name="max">最大大小。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.IntArray(System.Int32)">
            <summary>
            返回随机的整形数组。
            </summary>
            <param name="n">个数。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.StringArray(System.Int32,System.Int32)">
            <summary>
            返回随机的字符串数组。
            </summary>
            <param name="min">最小大小。</param>
            <param name="max">最大大小。</param>
            <returns>数组。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.StringArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            返回随机的字符串数组。
            </summary>
            <param name="n">个数。</param>
            <param name="minLength">字符串最小长度。</param>
            <param name="maxLength">字符串长度最大值。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minLength"/> 大于 <paramref name="maxLength"/>。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.String(System.Int32,System.Int32)">
            <summary>
            生成随机的由字母与数字与下划线组成的随机字符串。
            </summary>
            <param name="minLength">生成的最小长度。</param>
            <param name="maxLength">生成的最多长度。</param>
            <returns>返回随机字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.String(System.Int32,System.Char[])">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="pattern">首字母可用的字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pattern"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.String(System.Int32,System.String)">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="pattern">使用这个字符串里出现过的单元作为字符集。</param>
            <returns>返回随机字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.String(System.Int32,System.Char[],System.Char[])">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="firstPattern">首字母可用的字符集。</param>
            <param name="pattern">后面字母可用字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 或 <paramref name="firstPattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.String(System.Int32,System.String,System.String)">
            <summary>
            生成随机的由指定字符集组成的随机字符串。
            </summary>
            <param name="length">生成的长度。</param>
            <param name="firstPattern">首字母可用的字符集。</param>
            <param name="pattern">后面字母可用字符集。</param>
            <returns>返回随机字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="pattern"/> 或 <paramref name="firstPattern"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.DateTime(System.DateTime,System.DateTime)">
            <summary>
            生成一个不超过指定日期的时间。
            </summary>
            <param name="minDateTime">最小时间。</param>
            <param name="maxDateTime">最大时间。</param>
            <returns>时间。</returns>
            <exception cref="T:System.ArgumentException">minDateTime 比 maxDateTime 大 。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.DateTime(System.Int32)">
            <summary>
            生成一个不超过当前日期的指定天数之前的随机时间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Bool">
            <summary>
            生成一个随机的布尔型。
            </summary>
            <returns>随机的布尔型。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Char">
            <summary>
            生成一个随机的字符。
            </summary>
            <returns>随机的字符。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Double">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <returns>随机数。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Float(System.Single,System.Single)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Double(System.Int32,System.Int32)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Double(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成一个随机的浮点数（不小于0）。
            </summary>
            <param name="dights">小数位置。</param>
            <param name="minValue">最小值。</param>
            <param name="maxValue">最大值。(不包含最大值。)</param>
            <returns>随机数。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minValue"/> 大于 <paramref name="maxValue"/>。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Guid">
            <summary>
            生成一个随机的 Guid 对象。
            </summary>
        </member>
        <member name="M:CorePlus.Core.Rand.Bytes(System.Byte[])">
            <summary>
            返回随机的字节数组。
            </summary>
            <param name="buffer">缓存。</param>
            <exception cref="T:System.ArgumentNullException">buffer 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Number(System.Int32)">
            <summary>
            生成随机数字。
            </summary>
            <param name="length">数字位数。</param>
            <returns>数字字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Permutation(System.Int32,System.Int32,System.Boolean)">
            <summary>
            将数字<paramref name="number"/>平均分到一个数组。
            </summary>
            <param name="number">全部数字的和。</param>
            <param name="size">分成的个数。</param>
            <param name="average">是否平均分配，保证每个的差不大于1。</param>
            <returns>分好的数组。</returns>
            <example>
            以下示例演示了如何使用 Permutation 打乱数组。
            <code>
            int[] p = new int[] { 1, 2, 3, 4, 5, 6 };
            Rand.Permutation(p, 4, true);
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> 或 <paramref name="number"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Permutation``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            将一个数组随机平均分成 <paramref name="size"/> 个。
            </summary>
            <param name="input">输入。</param>
            <param name="size">份。</param>
            <param name="average">是否平均分配，保证每个的差不大于1。</param>
            <returns>分好的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="size"/> 小于等于 0。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.RandomShuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            随机分配集合的元素。
            </summary>
            <typeparam name="T"><paramref name="input"/> 的元素的类型。</typeparam>
            <param name="input">要分配的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将集合元素随机重排。
            </summary>
            <typeparam name="T"><paramref name="input"/> 中的元素的类型。</typeparam>
            <param name="input">可枚举的列表，如数组，集合。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> 超过索引。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.UserName">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线。）。该密码长度在 5 - 20内。
            </summary>
            <returns>用户名。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.UserName(System.Int32)">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线。）。
            </summary>
            <param name="length">长度。</param>
            <returns>用户名。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.UserName(System.Int32,System.Int32)">
            <summary>
            生成一个随机用户名（含字符串，数字或下划线；首字母不是数字。）。
            </summary>
            <param name="maxLength">最小长度。</param>
            <param name="minLength">最大长度。</param>
            <returns>用户名。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Password(System.Int32)">
            <summary>
            生成一个随机的密码（含大部分可见字符。）。该密码长度在 5 - 20内。
            </summary>
            <param name="length">长度。</param>
            <returns>密码。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Password(System.Int32,System.Int32)">
            <summary>
            生成一个随机的密码（含大部分可见字符。）。该密码长度在 5 - 20直接。
            </summary>
            <param name="maxLength">最小长度。</param>
            <param name="minLength">最大长度。</param>
            <returns>密码。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Values``1(System.Int32,System.Func{``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Values``1(System.Int32,System.Int32,System.Func{System.Int32,``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="length">委托的第一个参数。表示每个值的长度。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Values``1(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>
            多次运行一个随机数生成，并保证这些值不重复。
            </summary>
            <param name="n">个数。</param>
            <param name="minValue">委托的第一个参数。表示最小的范围。</param>
            <param name="maxValue">委托的第一个参数。表示最多的范围。</param>
            <param name="getter">获取随机数委托。</param>
            <returns>数组。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> 小于 0。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="getter"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Value``1(System.Collections.Generic.IList{``0})">
            <summary>
            从列表中随机选择一个值。
            </summary>
            <typeparam name="T"><paramref name="input"/> 的参数类型。</typeparam>
            <param name="input">要选择的列表。</param>
            <returns>值。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Rand.Letter">
            <summary>
            生成一个随机的字母。
            </summary>
            <returns>随机的字母。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Dight">
            <summary>
            生成一个随机的数字字符。
            </summary>
            <returns>随机的数字字符。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Id(System.Int32)">
            <summary>
            返回一个随机的ID。
            </summary>
            <returns>ID。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.Literal(System.Int32)">
            <summary>
            生成随机由字母组成的组成的随机数。
            </summary>
            <param name="length">长度。</param>
            <returns>随机数。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.FileName">
            <summary>
            生成随机的文件名。
            </summary>
            <returns>文件名。</returns>
        </member>
        <member name="M:CorePlus.Core.Rand.FileName(System.Int32,System.String)">
            <summary>
            生成随机的文件名。
            </summary>
            <param name="length">文件名长度。不含扩展名的部分。</param>
            <param name="ext">扩展名。</param>
            <returns>文件名。</returns>
        </member>
        <member name="P:CorePlus.Core.Rand.Random">
            <summary>
            获取或设置使用的随机数生成器。
            </summary>
        </member>
        <member name="T:CorePlus.Properties.LibarayInfo">
            <summary>
            提供类库的信息。
            </summary>
        </member>
        <member name="F:CorePlus.Properties.LibarayInfo.Name">
            <summary>
            获取类库的名字。
            </summary>
        </member>
        <member name="F:CorePlus.Properties.LibarayInfo.Author">
            <summary>
            获取类库作者名。
            </summary>
        </member>
        <member name="P:CorePlus.Properties.LibarayInfo.Version">
            <summary>
            获取类库的版本。
            </summary>
        </member>
        <member name="P:CorePlus.Properties.LibarayInfo.Path">
            <summary>
            获取当前库文件的位置。
            </summary>
        </member>
        <member name="P:CorePlus.Properties.LibarayInfo.Mode">
            <summary>
            获取当前类库的使用坏境。
            </summary>
        </member>
        <member name="T:CorePlus.Properties.LibarayInfo.RunningMode">
            <summary>
            表示当前类库使用坏境枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Properties.LibarayInfo.RunningMode.Windows">
            <summary>
            Windows 应用程序。
            </summary>
        </member>
        <member name="F:CorePlus.Properties.LibarayInfo.RunningMode.Console">
            <summary>
            控制台应用程序。
            </summary>
        </member>
        <member name="F:CorePlus.Properties.LibarayInfo.RunningMode.AspNet">
            <summary>
            类库。(Asp.Net坏境)
            </summary>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2">
            <summary>
            为所有键/值的集合提供基类。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._buckets">
            <summary>
            保存所有键/值信息的数组。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._comparer">
            <summary>
            表示键比较的比较工具。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._count">
            <summary>
            表示集合中值的个数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._entries">
            <summary>
            所有值的集合。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._freeCount">
            <summary>
            表示当前空闲的个数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._freeList">
            <summary>
            表示当前空闲的索引。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._keys">
            <summary>
            所有键的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._siInfo">
            <summary>
            序列号信息的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._values">
            <summary>
            所有值的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2._version">
            <summary>
            表示当前修改的版本。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="comparer">比较器。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Int32)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="capacity">容器大小。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <param name="comparer">比较器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="capacity">初始化容器的大小。</param>
            <param name="comparer">键比较的比较工具。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 小于 0。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Initialize(System.Int32)">
            <summary>
            初始化集合为指定大小。
            </summary>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnAddExistKey(`0)">
            <summary>
            当添加已存在的一个键时触发。
            </summary>
            <param name="key">键名。</param>
            <returns>如果更新当前值，返回 true;   如果保留原值，返回 false。</returns>
            <exception cref="T:System.ArgumentException">键已存在。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Insert(`0,`1,System.Boolean)">
            <summary>
            在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <param name="add">如果为 <c>true</c> 则增加，否则出现同样键出现错误。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnAddEntry(`0,`1)">
            <summary>
            向当前字典增加单元。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>增加则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Clear">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Remove(`0)">
            <summary>
            从 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns>
            如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中没有找到 <paramref name="key"/>，该方法也会返回 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnRemoveEntry(`0,`1)">
            <summary>
            将单元移除。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnRemoveAll">
            <summary>
            移除所有单元。
            </summary>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:System.Collections.Generic.IDictionary`2"/> 是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.Generic.IDictionary`2"/> 包含带有该键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ContainsValue(`1)">
            <summary>
            确定 <see cref="T:System.Collections.Generic.IDictionary`2"/> 是否包含具有指定值的元素。
            </summary>
            <param name="value">The value.</param>
            <returns>
            如果 <see cref="T:System.Collections.Generic.IDictionary`2"/> 包含带有该值的元素，则为 true；否则，为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.IsCompatibleKey(System.Object)">
            <summary>
            判断当前键是否可用。
            </summary>
            <param name="key">键。</param>
            <returns>
            可用则true。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            拷贝到一个新的键/值集合。
            </summary>
            <param name="array">数组。</param>
            <param name="index">开始数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.FindEntry(`0)">
            <summary>
            查找指定键的值。
            </summary>
            <param name="key">键。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Resize">
            <summary>
            重置大小。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value"/> 参数的类型的默认值。该参数未经初始化即被传递。</param>
            <returns>
            如果实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。当前未实现该参数的功能。</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">缺少匹配的集合。 - 或 - 键为空。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.GetEnumerator">
            <summary>
            返回一个 enumerator 。
            </summary>
            <returns>遍历器。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </summary>
            <returns>
            一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            增加指定键到集合。
            </summary>
            <param name="keyValuePair">键/值集合。</param>
            <exception cref="T:System.ArgumentNullException">
            	键为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定集合是否包含特定值。
            </summary>
            <param name="keyValuePair">要在集合中定位的对象。</param>
            <returns>
            如果在集合中找到 item，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从特定的 System.Array 索引开始，将集合的元素复制到一个 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index"> array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="keyValuePair">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException">
            	key 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.IDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            在 <see cref="T:System.Collections.IDictionary"/> 对象中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的 <see cref="T:System.Object"/>。</param>
            <param name="value">用作要添加的元素的值的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.IDictionary"/> 对象中已存在具有相同键的元素。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 为只读。- 或 - <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IDictionary"/> 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 对象中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 包含带有该键的元素，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IDictionary"/> 对象中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 对象为只读。- 或 -<see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.OnKeyNotFound(`0)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Count">
            <summary>
            获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Comparer">
            <summary>
            获取当前的比较器。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 对象具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.System#Collections#IDictionary#Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Values">
            <summary>
            获取包含 <see cref="T:System.Collections.Generic.IDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Entries">
            <summary>
            获取当前的单元集合。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Version">
            <summary>
            获取当前的字典版本。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.Entry">
            <summary>
            表示字典单元。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Entry.HashCode">
            <summary>
            哈希值。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Entry.Next">
            <summary>
            下一个哈希值。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Entry.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Entry.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.Enumerator">
            <summary>
            当前集合的枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Enumerator._dictionary">
            <summary>
            对应的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Enumerator._version">
            <summary>
            初始化的修改记录。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Enumerator._current">
            <summary>
            表示当前值。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.Enumerator._getEnumeratorDictEntry">
            <summary>
            返回的枚举类型。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Enumerator.#ctor(CorePlus.Collections.Dictionary{`0,`1},System.Boolean)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.Enumerator 的新实例。
            </summary>
            <param name="dictionary">字典。</param>
            <param name="getEnumeratorRetType">枚举的相对方式。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            获取键值集合。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.Key">
            <summary>
            获取当前键。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.Value">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            获取当前键。
            </summary>
            <value>键。</value>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            获取当前值。
            </summary>
            <value>值。</value>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.KeyCollection">
            <summary>
            表示一个键的集合。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.KeyCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.#ctor(CorePlus.Collections.Dictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.KeyCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator._currentKey">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.#ctor(CorePlus.Collections.Dictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.ValueCollection">
            <summary>
            表示一个值的集合。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.ValueCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.#ctor(CorePlus.Collections.Dictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TValue, TValue&gt;.ValueCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator._index">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator._currentValue">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.#ctor(CorePlus.Collections.Dictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:CorePlus.Collections.Dictionary`2.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.Dictionary`2.DebugView._dictionary">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.Dictionary`2.DebugView.#ctor(CorePlus.Collections.Dictionary{`0,`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.Dictionary`2.DebugView"/> 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="P:CorePlus.Collections.Dictionary`2.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="T:CorePlus.IO.StringBuffer">
            <summary>
            表示来自字符串的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StringBuffer._source">
            <summary>
            缓存源。
            </summary>
        </member>
        <member name="F:CorePlus.IO.StringBuffer._position">
            <summary>
            开始位置。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.#ctor(System.String)">
            <summary>
            为指定的字符串初始化 <see cref="T:CorePlus.IO.StringBuffer"/> 类的新实例。
            </summary>
            <param name="value">所有源的字符串。 </param>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.#ctor(System.Text.StringBuilder)">
            <summary>
            为指定的字符串初始化 <see cref="T:CorePlus.IO.StringBuffer"/> 类的新实例。
            </summary>
            <param name="source">所有源的字符串。 </param>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.AppendBuffer(System.String)">
            <summary>
            允许加入新的数据来继续操作。
            </summary>
            <param name="value">要加入的数据。</param>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.DiscardBufferedData">
            <summary>
            允许 <see cref="T:CorePlus.IO.TextBuffer"/> 对象丢弃其当前数据。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.Read">
            <summary>
            读取输入流中的下一个字符并使此缓存的位置提升一个字符。
            </summary>
            <returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。</returns>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.Peek">
            <summary>
            读取下一个字符，而不更改读取器状态或字符源。返回下一个可用字符，而实际上并不从输入流中读取此字符。
            </summary>
            <returns>
            一个整数，它表示下一个要读取的字符，或者如果没有更多的可用字符或此流不支持查找，则为 -1。
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="T:System.IO.TextReader"/> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.Seek(System.Int64)">
            <summary>
            移动当前缓存的位置。
            </summary>
            <param name="offset">移动的偏移数。</param>
            <returns>输入流中的下一个字符，或者如果没有更多的可用字符，则为 -1。</returns>
            <exception cref="T:System.ObjectDisposedException">
            <see cref="T:System.IO.TextReader" /> 是关闭的。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.PushBack(System.Char)">
            <summary>
            将 <paramref name="character"/> 放回缓存。
            </summary>
            <param name="character">要放入的字符。</param>
        </member>
        <member name="M:CorePlus.IO.StringBuffer.Dispose(System.Boolean)">
            <summary>
            释放由 <see cref="T:CorePlus.IO.TextBuffer"/> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
            <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
        </member>
        <member name="P:CorePlus.IO.StringBuffer.BaseBuffer">
            <summary>
            获取当前实际在操作的缓存。
            </summary>
        </member>
        <member name="P:CorePlus.IO.StringBuffer.Position">
            <summary>
            获取当前在源的位置。
            </summary>
        </member>
        <member name="P:CorePlus.IO.StringBuffer.EndOfStream">
            <summary>
            获取一个值，该值表示当前的流位置是否在流的末尾。
            </summary>
            <returns>
            如果当前的流位置在流的末尾，则为 true；否则为 false。</returns>
            <exception cref="T:System.ObjectDisposedException">基础流已释放。</exception>
        </member>
        <member name="P:CorePlus.IO.StringBuffer.Current">
            <summary>
            获取或设置当前的字符。
            </summary>
        </member>
        <member name="T:CorePlus.Core.Str">
            <summary>
            处理字符串工具。
            </summary>
            <remarks>提供字符串常用的工具处理。这个类会忽视null字符串。</remarks>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:CorePlus.Core.Str.Surround(System.String,System.Char,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="l">左括号。</param>
            <param name="r">右括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Unsurround(System.String,System.Char,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="l">左括号。</param>
            <param name="r">右括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Unsurround(System.String,System.Char)">
            <summary>
            让一个字符串被一个符合包围，如果原先已包围，则不进行操作。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="c">括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.InnerString(System.String)">
            <summary>
            删除字符串首尾1长度的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.InnerString(System.String,System.Int32)">
            <summary>
            删除字符串首尾同样长度的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">长度。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="startIndex">要使用的集合中的第一个数组元素。</param>
            <param name="count">要使用的集合的元素数。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Char)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join``1(System.Collections.Generic.IList{``0},System.String,System.Func{``0,System.String})">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <param name="f">返回根据项得到字符串的函数。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input1">字符串集合。</param>
            <param name="input2">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
            </summary>
            <param name="input">字符串集合。</param>
            <param name="separator">分隔符。</param>
            <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Join(System.Collections.IList,System.String,System.String)">
             <summary>
             在指定字符串的列表的每个元素之间串联指定的分隔符，从而产生单个串联的字符串。参数指定要使用的第一个数组元素和元素数。
             </summary>
             <param name="input">字符串集合。</param>
             <param name="format">格式化的字符串。</param>
             <param name="separator">分隔符。</param>
             <returns>字符串对象，由通过分隔符联接的值中的字符串组成。如果 count 为零、value 没有元素  或者 分隔符和集合的全部元素为空字符串，则为空字符串。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a[] = new string[]{ "a","b","c","d" };
                     string input = Text.Join(a,"{0}", "");
                     Console.Write(input);  // 输出   a,b,c,d
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.Split(System.String,System.String)">
             <summary>
             返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定是否返回空数组元素。
             </summary>
             <param name="input">字符串内容。</param>
             <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
             <returns>返回分割后的数组。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Text.Split(a,",")[0];
                     Console.Write(input);  // 输出   hello
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.SplitNewLine(System.String)">
            <summary>
            将多行字符串分割。
            </summary>
            <param name="input">字符串内容。</param>
        </member>
        <member name="M:CorePlus.Core.Str.SplitNewLineAndTrim(System.String)">
            <summary>
            将多行字符串分割并删除空格。
            </summary>
            <param name="input">字符串内容。</param>
        </member>
        <member name="M:CorePlus.Core.Str.SplitAndTrim(System.String,System.Char)">
            <summary>
            分割字符串并对分隔的每部分字符串进行 Trim()   。
            </summary>
            <param name="input">字符串内容。</param>
            <param name="separator">分隔字符。</param>
        </member>
        <member name="M:CorePlus.Core.Str.SplitAndTrim(System.String,System.String)">
            <summary>
            分割字符串并对分隔的每部分字符串进行 Trim()   。
            </summary>
            <param name="input">字符串内容。</param>
            <param name="separator">分隔字符。</param>
        </member>
        <member name="M:CorePlus.Core.Str.Trigger(System.String,System.String,System.String)">
            <summary>
            将字符串在a，b切换。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="a">切换的字符串。</param>
            <param name="b">第二个字符串。</param>
            <returns>如果输入字符串和后2个字符串一个相等，则为另一个。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.TriggerIgnoreCase(System.String,System.String,System.String)">
            <summary>
            将字符串在a，b切换。 忽略所有的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="a">切换的字符串。</param>
            <param name="b">第二个字符串。</param>
            <returns>如果输入字符串和后2个字符串一个相等，则为另一个。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToHexString(System.Byte[])">
            <summary>
            将一个字节数组转为十六进制字符串。
            </summary>
            <param name="bytes">字节数组。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Indent(System.String,System.Int32,System.String)">
            <summary>
            缩进一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="level">缩进数。</param>
            <param name="indentChars">用来缩进的字符串。</param>
            <returns>缩进后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.MaxSubString(System.String,System.String)">
            <summary>
            计算 2 个字符串的最长公共子字符串。
            </summary>
            <param name="value1">要比较的字符串 1 。</param>
            <param name="value2">要比较的字符串 2 。</param>
            <returns>公共子字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.DistanceCompare(System.String,System.String)">
            <summary>
            比较 2 个字符串的相似度。
            </summary>
            <param name="s1">要比较的字符串。</param>
            <param name="s2">要比较的字符串。</param>
            <returns>相似度， 如果值为 0， 表示相等， 值越小， 越相似。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToUpper(System.Char)">
            <summary>
            将输入字符变大写。
            </summary>
            <param name="input">要处理的字符。</param>
            <returns>处理后的字符。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToLower(System.Char)">
            <summary>
            将输入字符变小写。
            </summary>
            <param name="input">要处理的字符。</param>
            <returns>处理后的字符。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToOtherCase(System.Char@)">
            <summary>
            将参数ch转换为另外大小写状态。
            </summary>
            <param name="ch">操作的字符。</param>
            <returns>如果字符已转换，返回true，否则返回false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveBefore(System.String,System.Char)">
             <summary>
             删除特定字符以前的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.StartFrom(a,',');
                     Console.Write(input);  // 输出   my,child
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveBefore(System.String,System.String)">
             <summary>
             删除特定字符以前的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.StartFrom(a,',');
                     Console.Write(input);  // 输出   my,child
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveAfter(System.String,System.Char)">
             <summary>
             删除特定字符以后的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.EndFrom(a,',');
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveAfter(System.String,System.String)">
             <summary>
             删除特定字符以后的字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="c">特定字符。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,child";
                     string input = Str.EndFrom(a,',');
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveStart(System.String,System.Int32)">
            <summary>
            删除特定字符前指定位数的内容。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="count">删除个数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveEmptys(System.String)">
            <summary>
            删除字符串的空白。 包括 ' '、'\t'、'\r'、'\n'等都被移除。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveUnvisible(System.String)">
            <summary>
            删除不可见字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveEnd(System.String,System.Int32)">
             <summary>
             去除字符串最后指定数字符。
             </summary>
             <param name="input">要处理的字符串。</param>
             <param name="count">删除个数。</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "hello,my,";
                     string input = Str.TrimEnd(a);
                     Console.Write(input);  // 输出   hello,my
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveEnd(System.String,System.String)">
            <summary>
            如果字符串以指定内容结尾，删除之。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">判断的内容。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveStart(System.String,System.String)">
            <summary>
            如果字符串以指定内容开始，删除之。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">判断的内容。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Remove(System.String,System.Int32)">
            <summary>
            删除字符串中从指定位置到最后位置的所有字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Remove(System.String,System.Int32,System.Int32)">
            <summary>
            从指定字符串的指定位置开始删除指定数目的字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">要删除的字符数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveIgnoreCase(System.String,System.String)">
            <summary>
            删除字符串中指定的子字符串。忽略比较时的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">子字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Remove(System.String,System.String)">
            <summary>
            删除字符串中指定的子字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">子字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Remove(System.String,System.Char[])">
            <summary>
            删除字符串中所有出现过的字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="values">字符集合。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveIgnoreCase(System.String,System.Collections.Generic.IList{System.Char})">
            <summary>
            删除字符串中所有出现过的字符。忽略比较时的大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="values">字符集合。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Ellipsis(System.String,System.Int32,System.String)">
             <summary>
             截取字符串,多余部分给第三个参数替代。
             </summary>
             <param name="input">所要截取的字符串。</param>
             <param name="length">截取字符串的长度。</param>
             <param name="appendText">截取字符串后省略部分的字符串。</param>
             <returns>字符串</returns>
             <example><code>
             using System;
             using CorePlus.Core;
             class Sample {
            
                 public static void Main(){
                     string a = "hellomychild";
                     string input = Text.GetSubString(a,5," (更多)");
                     Console.Write(input);  // 输出   hello (更多)
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.Substring(System.String,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <param name="length">长度。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Substr(System.String,System.Int32,System.Int32)">
            <summary>
            获取一个子字符串。
            </summary>
            <param name="input">值。</param>
            <param name="startIndex">开始的位置。可以 -1 将不做操作。</param>
            <param name="endIndex">结束位置。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Trim(System.String)">
            <summary>
            移除所有前导空白字符和尾部空白字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.TrimStart(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有前导匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Trim(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.TrimEnd(System.String,System.Char[])">
            <summary>
            从字符串移除数组中指定的一组字符的所有尾部匹配项。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="trimChars">要移除的 Unicode 字符数组或 null。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Plain(System.String)">
            <summary>
            删除所有回车。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Capitalize(System.String)">
            <summary>
            将字符串首字母大写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnCapitalize(System.String)">
            <summary>
            将字符串首字母小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToPascal(System.String,System.Char)">
            <summary>
            将字符串转为 Pascal 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToCamel(System.String,System.Char)">
            <summary>
            将字符串转为 Camel 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
            <example>
            "back-color" /   backColor
            </example>
        </member>
        <member name="M:CorePlus.Core.Str.Hyphenate(System.String,System.Char)">
            <summary>
            将字符串转为 Hyphenate 规则。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="ch">分隔符。</param>
            <returns>处理后的字符串。</returns>
            <example>
            "BackColor" /   back-color
            </example>
        </member>
        <member name="M:CorePlus.Core.Str.Pad(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            将字符串转为一定长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">长度。</param>
            <param name="paddingChar">如果长度不够，用于补充的字符。</param>
            <param name="append">如果为 true，则保留左字符串不变，否则保留右字符串固定。 </param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.PadC(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            将字符串转为一定长度。中文算2个长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">长度。</param>
            <param name="paddingChar">如果长度不够，用于补充的字符。</param>
            <param name="append">如果为 true，则保留左字符串不变，否则保留右字符串固定。 </param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToUpper(System.String)">
            <summary>
            将字符串转为大写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToLower(System.String)">
            <summary>
            将字符串转为小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Replace(System.String,System.Char,System.Char)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Replace(System.String,System.String,System.String)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。忽视所有大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Replace(System.String,System.Object,System.Object)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">要替换的字符串。</param>
            <param name="newValue">要替换原值的所有匹配项的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Replace(System.String,System.Int32,System.Char)">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="position">位置。</param>
            <param name="c">更新的值。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Replace(System.String,System.String[],System.String[])">
            <summary>
            将字符串所有匹配项替换为其他指定的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValues">原值。</param>
            <param name="newValues">更新的值。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Reverse(System.String,System.Int32,System.Int32)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <param name="count">个数。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Reverse(System.String,System.Int32)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Reverse(System.String)">
            <summary>
            翻转一个字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Left(System.String,System.Int32)">
            <summary>
            获取字符串左边 <paramref name="length"/> 个字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">获取的字符串的长度。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Right(System.String,System.Int32)">
            <summary>
            获取字符串右边 <paramref name="length"/> 个字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="length">获取的字符串的长度。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.PadLeft(System.String,System.Int32,System.Char)">
            <summary>
            右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">Unicode 填充字符。</param>
            <returns>
            等效于此实例的一个新 System.String，但它是右对齐的，并在左边用达到总长度长度所需数目的空格进行填充。如果总长度小于此实例的长度，则为与此实例相同的新 System.String。
            </returns>
        </member>
        <member name="M:CorePlus.Core.Str.PadRight(System.String,System.Int32,System.Char)">
            <summary>
            左对齐此字符串中的字符，在右边用空格填充以达到指定的总长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">Unicode 填充字符。</param>
            <returns>
            等效于此实例的一个新 System.String，但它是右对齐的，并在左边用达到总长度长度所需数目的空格进行填充。如果总长度小于此实例的长度，则为与此实例相同的新 System.String。
            </returns>
        </member>
        <member name="M:CorePlus.Core.Str.Insert(System.String,System.Int32,System.String)">
            <summary>
            在字符串指定索引位置插入一个指定的字符串对象。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="position">此插入的索引位置。</param>
            <param name="value">要插入的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Contains(System.String,System.Char)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Contains(System.String,System.String)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。忽略全部大小写。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Contains(System.String,System.String,System.Int32)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ContainsIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            返回一个值，该值指示指定的字符串对象是否出现在字符串中。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="value">值。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>如果 value 参数出现在此字符串中，或者 value 为空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Length(System.String)">
            <summary>
            返回指定字符串的长度。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>如果字符串为空， 返回 0，否则返回字符串长度。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.CLength(System.String)">
            <summary>
            检测含中文字符串实际长度。
            </summary>
            <param name="input">待检测的字符串。</param>
            <returns>正整数。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.StartsWithIgnoreCase(System.String,System.Char)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.StartsWith(System.String,System.String)">
            <summary>
            确定此字符串的开头是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EndsWith(System.String,System.String)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EndsWith(System.String,System.Char)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EndsWithIgnoreCase(System.String,System.Char)">
            <summary>
            确定此字符串的结尾是否与指定的字符串匹配。忽略全部大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">要检查的值。</param>
            <returns>匹配则返回 true， 否则返回 false 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Count(System.String,System.Char,System.Int32)">
            <summary>
            求一个字符串在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <param name="startIndex">开始位置。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Count(System.String,System.String,System.Int32)">
            <summary>
            求一个字符串在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="value">检测的字符。</param>
            <param name="startIndex">开始位置。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Count(System.String,System.Char[])">
            <summary>
            求指定的字符在字符串出现的个数。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <returns>次数。 如果字符串为空，返回 0 。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ForEachCharIn(System.String,System.Char[],CorePlus.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中出现的指定字符。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ForEachCharInIgnoreCase(System.String,System.Char[],CorePlus.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中出现的指定字符。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ForEachCharNotIn(System.String,System.Char[],CorePlus.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中未出现的指定字符。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ForEachCharNotInIgnoreCase(System.String,System.Char[],CorePlus.Core.ForEachAction{System.Char})">
            <summary>
            遍历字符串中未出现的指定字符。忽略大小写。
            </summary>
            <param name="input">待检测的字符串。</param>
            <param name="values">检测的字符。</param>
            <param name="f">操作。</param>
            <returns>出现的个数。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            比较2个字符串是否相同，忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较2个字符串是否相同，忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Equals(System.String,System.String,System.Int32)">
            <summary>
            字符串a中指定位置开始为b。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.EqualsIgnoreCase(System.String,System.String,System.Int32)">
            <summary>
            字符串a中指定位置开始为b。 忽略大小写。
            </summary>
            <param name="a">比较的字符串。</param>
            <param name="b">比较的字符串。</param>
            <param name="startIndex">开始的位置。</param>
            <returns>相同则返回 true ，否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Format(System.String,System.Object[])">
            <summary>
            实现字符串格式化操作。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.FormatException">无法格式化字符串。</exception>
        </member>
        <member name="M:CorePlus.Core.Str.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            实现字符串格式化操作。
            </summary>
            <param name="provider">格式化提供者。</param>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.FormatException">无法格式化字符串。</exception>
        </member>
        <member name="M:CorePlus.Core.Str.Format(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            实现字符串快速格式化操作。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.IndexOutOfRangeException">格式化错误。</exception>
            <exception cref="T:System.NullReferenceException">参数为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Str.CreateCharPtr(System.Int32)">
            <summary>
            根据一个长度创建指定空间的 char* 。
            </summary>
            <param name="length">字符串的长度。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.CreateCharPtr(System.Char*,System.Int32,System.Int32)">
            <summary>
            根据一个 char* 字符串转换为 char* 。
            </summary>
            <param name="src">字符串源。</param>
            <param name="length">新 char* 长度。</param>
            <param name="count">个数。</param>
            <returns>指向字符串首字母的char*。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Strcpy(System.Char*,System.String)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Strncpy(System.Char*,System.String,System.Int32,System.Int32)">
            <summary>
            将字符串src复制到dest指定的地址。
            </summary>
            <param name="dest">目标字符串地址。</param>
            <param name="src">来源字符串地址。</param>
            <param name="startIndex">起始位置。</param>
            <param name="count">个数。</param>
            <returns>原目标地址。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.FormatX(System.String,System.Object[])">
            <summary>
            实现字符串快速格式化操作。适合快读格式化。
            </summary>
            <param name="format">格式化。</param>
            <param name="args">参数。</param>
            <returns>格式化后的字符串。</returns>
            <exception cref="T:System.IndexOutOfRangeException">格式化错误。</exception>
            <exception cref="T:System.NullReferenceException">参数为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Str.TrimHtml(System.String)">
             <summary>
             去掉首尾p与br。
             </summary>
             <param name="input">要做处理的字符串</param>
             <returns>处理后的字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "&lt;p&gt;hellos&lt;/p&gt;";
                     string value = Str.RemoveHtmlLineBreaks(a);
                     Console.Write(value);  // 输出   hellos
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.HtmlEncode(System.String)">
            <summary>
             将字符串转换为 HTML 编码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.HtmlDecode(System.String)">
            <summary>
            将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UrlEncode(System.String)">
            <summary>
            对 URL 字符串的路径部分进行编码，以进行从 Web 服务器到客户端的可靠的 HTTP 传输。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UrlEncodeComponent(System.String)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UrlEncodeComponent(System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UrlDecode(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnicodeEncode(System.Char)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnicodeEncode(System.String)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnicodeEncode(System.String,System.String)">
            <summary>
            转换为同等内容的十六进制表达式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="px">前缀表达式。 如 %u  \u  $#</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnicodeDecode(System.String)">
            <summary>
            从十六进制表达式转化为同样效果的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UnicodeDecode(System.String,System.String)">
            <summary>
            从十六进制表达式转化为同样效果的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="px">前缀字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Escape(System.String)">
            <summary>
            将字符串转换为 Unicode 字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Unescape(System.String)">
            <summary>
            将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.JsEncode(System.String)">
            <summary>
            js编码
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.JsDecode(System.String)">
            <summary>
            js解码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.Enquote(System.String,System.Char)">
            <summary>
            生成一个指定引号字符串。
            </summary>
            <param name="value">值。</param>
            <param name="quote">括号。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.HtmlToString(System.String)">
            <summary>
            HTML代码转换成TXT格式。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.StringToHtml(System.String)">
            <summary>
            把TXT格式转换成HTML代码。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveHtmlTags(System.String)">
            <summary>
            清除 Html 的标签。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.RemoveHtmlScripts(System.String)">
            <summary>
            过滤特殊字符。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
            <remarks>有效防止脚本出现。</remarks>
        </member>
        <member name="M:CorePlus.Core.Str.Times(System.String,System.Int32)">
            <summary>
            创建某个字符串重复次数的字符串。
            </summary>
            <param name="value">字符串。</param>
            <param name="count">次数。</param>
            <returns>返回字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.GetPY(System.String)">
             <summary> 
             汉字转拼音缩写  。
             </summary> 
             <param name="input">要转换的汉字字符串。</param> 
             <returns>返回一个汉字所对的拼音首字母。</returns> 
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = Str.GetPY("平");
                     Console.Write(value);  // 输出   P
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Str.GetPY(System.Char)">
             <summary> 
             取单个字符的拼音声母 。
             </summary> 
             <param name="input">要转换的单个汉字。</param> 
             <returns>拼音声母。</returns> 
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     char value = Str.GetPY('平');
                  Console.Write(value);  // 输出   P
                 }
             
             }
             </code></example> 
        </member>
        <member name="M:CorePlus.Core.Str.GetPinYin(System.String)">
             <summary>
             把汉字转换成拼音(全拼) 。
             </summary>
             <param name="input">汉字字符串。</param>
             <returns>转换后的拼音(全拼)字符串。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = Str.GetPinYin("平");
                  Console.Write(value);  // 输出   P
                 }
             
             }
             </code></example> 
        </member>
        <member name="M:CorePlus.Core.Str.ToSbc(System.String)">
            <summary>
            转全角的函数(SBC case)。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToDbc(System.String)">
            <summary>
            转半角的函数(DBC case) 。
            </summary>
            <param name="input">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.UbbToHtml(System.String)">
            <summary>
            UBB字符转换成HTML字符。
            </summary>
            <param name="input">源字符串。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Str.ToTimeString(System.DateTime,System.String)">
            <summary>
            时间转换成多少分钟前。
            </summary>
            <param name="dateTime">时间。</param>
            <param name="foramt">格式。</param>
            <returns>转换后的时间</returns>
        </member>
        <member name="T:CorePlus.IO.StreamFileBase">
            <summary>
            为所有以流方式支持单一文件操作的类提供抽象基类。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.OnOpen(System.IO.Stream)">
            <summary>
            当被子类重写时，实现从指定的 <see cref="T:System.IO.Stream"/> 读取数据。
            </summary>
            <param name="s">要读取数据的 <see cref="T:System.IO.Stream"/>。</param>
            <exception cref="T:System.NotSupportedException">流不可读。</exception>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.OnSave(System.IO.Stream)">
            <summary>
            当被子类重写时，实现将数据写入指定的 <see cref="T:System.IO.Stream"/> 。
            </summary>
            <param name="s">要写入数据的 <see cref="T:System.IO.Stream"/>。</param>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.IO.StreamFileBase"/> 类的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.#ctor(System.String,System.IO.FileMode)">
            <summary>
            使用指定的路径和打开方式初始化 <see cref="T:CorePlus.IO.StreamFileBase"/> 类的新实例。
            </summary>
            <param name="path">要打开或创建的文件路径。</param>
            <param name="mode">打开文件的方式。默认情况，将根据文件是否存在决定打开或创建文件。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
            <exception cref="T:CorePlus.IO.FileExistsException">载入的文件已存在，无法覆盖。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.OnOpen(System.String)">
            <summary>
            当被子类重写时，实现打开已存在的文件。
            </summary>
            <param name="path">要打开的文件的路径。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.OnSave(System.String)">
            <summary>
            当被子类重写时，将当前文件保存到指定的位置。
            </summary>
            <param name="path">保存的目标位置。</param>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.Open(System.IO.Stream)">
            <summary>
            当被子类重写时，完成打开一个流。
            </summary>
            <param name="s">流。</param>
            <exception cref="T:System.ArgumentNullException">流为空。</exception>
            <exception cref="T:System.NotSupportedException">流不可读。</exception>
            <exception cref="T:System.ObjectDisposedException">资源已释放。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamFileBase.Save(System.IO.Stream)">
            <summary>
            将当前文件保存到指定的 <see cref="T:System.IO.Stream"/>。
            </summary>
            <param name="s">要写入数据的 <see cref="T:System.IO.Stream"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> 为空。</exception>
            <exception cref="T:System.ArgumentException"> <paramref name="s"/> 不支持写。</exception>
        </member>
        <member name="T:CorePlus.RunTime.SerializationHelper">
            <summary>
            序列化辅助类。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SerializationHelper._serializerDictionary">
            <summary>
            序列化字典。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.GetSerializer(System.Type)">
            <summary>
            获得xml序列化结果。
            </summary>
            <param name="type">类型。</param>
            <returns>xml序列化。</returns>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.Load(System.Type,System.String)">
            <summary>
            反序列化。
            </summary>
            <param name="type">对象类型。</param>
            <param name="filePath">文件路径。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.Save(System.Object,System.String)">
            <summary>
            序列化。
            </summary>
            <param name="obj">对象。</param>
            <param name="filePath">文件路径。</param>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.Serialize(System.Object)">
            <summary>
            xml序列化成字符串。
            </summary>
            <param name="obj">对象。</param>
            <returns>xml字符串。</returns>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.DeSerialize(System.Type,System.String)">
            <summary>
             xml反序列化。
            </summary>
            <param name="type">类型。</param>
            <param name="s">资料。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.Serialize(System.Data.DataSet)">
            <summary>
            将DataSet序列化为2进制数组byte[]。
            </summary>
            <param name="ds">要序列化的DataSet</param>
            <returns>值。</returns>
        </member>
        <member name="M:CorePlus.RunTime.SerializationHelper.DeSerialize(System.Byte[])">
            <summary>
            将2进制数组byte[]反序列化为DataSet。
            </summary>
            <param name="bUserData">要反序列化的2进制数组。</param>
            <returns>值。</returns>
        </member>
        <member name="T:CorePlus.RunTime.SyntaxException">
            <summary>
            语法错误产生的异常。继承此类实现更完整的异常（如包含位置，所操作的操作符）。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxException._type">
            <summary>
            表示错误类型。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxException._line">
            <summary>
            发生错误的行。
            </summary>
        </member>
        <member name="F:CorePlus.RunTime.SyntaxException._linePosition">
            <summary>
            发生错误的列。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor">
            <summary>
            初始化 CorePlus.SyntaxException 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(CorePlus.RunTime.SyntaxErrorType)">
            <summary>
            初始化 CorePlus.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(System.String,CorePlus.RunTime.SyntaxErrorType)">
            <summary>
            初始化 CorePlus.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(System.String,CorePlus.RunTime.SyntaxErrorType,System.Int32,System.Int32)">
            <summary>
            初始化 CorePlus.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
            <param name="line">发生错误的行。</param>
            <param name="column">发生错误的列。</param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(System.String,CorePlus.RunTime.SyntaxErrorType,System.Exception,System.Int32,System.Int32)">
            <summary>
            初始化 CorePlus.SyntaxException 的新实例。
            </summary>
            <param name="type">错误种类。</param>
            <param name="message">信息。</param>
            <param name="line">发生错误的行。</param>
            <param name="column">发生错误的列。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.RunTime.SyntaxException"/> 的新实例。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用 <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 和 <see cref="T:System.Runtime.Serialization.StreamingContext"/> 对象中的信息初始化 <see cref="T:CorePlus.RunTime.SyntaxException"/> 类的新实例。
            </summary>
            <param name="info">SerializationInfo 对象，包含 <see cref="T:CorePlus.RunTime.SyntaxException"/> 的所有属性。
            </param>
            <param name="context">StreamingContext 对象，包含上下文信息。
            </param>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.ToString">
            <summary>
            创建并返回当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:CorePlus.RunTime.SyntaxException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对于给定的 <see cref="T:System.Runtime.Serialization.StreamingContext" />，将所有的 HtmlException 属性流式写入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类。
            </summary>
            <param name="info">SerializationInfo 对象。
            </param>
            <param name="context">StreamingContext 对象。
            </param>
        </member>
        <member name="P:CorePlus.RunTime.SyntaxException.Type">
            <summary>
            获取错误类型。
            </summary>
        </member>
        <member name="P:CorePlus.RunTime.SyntaxException.LineNumber">
            <summary>
            获取指示错误发生位置的行号。
            </summary>
            <returns>
            指示错误发生位置的行号。
            </returns>
        </member>
        <member name="P:CorePlus.RunTime.SyntaxException.LinePosition">
            <summary>
            获取指示错误发生位置的行位置。
            </summary>
            <returns>
            指示错误发生位置的行位置。
            </returns>
        </member>
        <member name="T:CorePlus.Collections.Set`1">
            <summary>
            为不含重复元素的集合提供基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CorePlus.Collections.Set`1.OnAddItem(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
            <returns>继续添加返回 true， 否则返回 false 。</returns>
        </member>
        <member name="T:CorePlus.Core.TimeHelper">
            <summary>
            对 <see cref="T:System.DateTime"/> 和 <see cref="T:System.TimeSpan"/> 类提供函数。
            </summary>
        </member>
        <member name="M:CorePlus.Core.TimeHelper.IsMidnightExactly(System.TimeSpan)">
            <summary>
            判断时间是否在午夜。
            </summary>
            <param name="t">时间。</param>
            <returns>
            	如果是午夜，返回<c>true</c>，否则，返回 <c>false</c>.
            </returns>
        </member>
        <member name="M:CorePlus.Core.TimeHelper.ToMilitaryString(System.TimeSpan)">
            <summary>
            转为字符串。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CorePlus.Core.TimeHelper.ToMilitaryInt(System.TimeSpan)">
            <summary>
            转整数。
            </summary>
            <param name="t">时间。</param>
            <returns>整数。</returns>
        </member>
        <member name="T:CorePlus.Core.Number">
            <summary>
            提供处理数字的常用函数。
            </summary>
        </member>
        <member name="M:CorePlus.Core.Number.FromHex(System.Char)">
            <summary>
            返回一个字母对应的十六进制值。如果非正常数字，返回 -1 。
            </summary>
            <param name="c">
            一个十六进制使用的字符。
            </param>
            <returns>一个-1 - 16的数字。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToHex(System.Int32)">
            <summary>
            返回用于指定数的十六进制表达式。
            </summary>
            <param name="value">数。在 0 - 15 间。</param>
            <returns>字符。</returns>
        </member>
        <member name="F:CorePlus.Core.Number.primes">
            <summary>
            所有质数。
            </summary>
        </member>
        <member name="M:CorePlus.Core.Number.GetPrime(System.Int32)">
            <summary>
            获取不小于某个数的最小质数。
            </summary>
            <param name="min">最小数。</param>
            <returns>值。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.IsPrime(System.Int32)">
            <summary>
            判断某个数是否为质数。
            </summary>
            <param name="candidate">数字。</param>
            <returns>质数返回 true。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToCapitalCurrency(System.Decimal)">
            <summary>
            把数字转为汉字大写格式的数字。
            </summary>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.FromBase(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。
            </summary>
            <param name="value">包含数字的 System.String。</param>
            <param name="fromBase">value 中数字的基数，它必须是[2,36]。</param>
            <returns>等效于 value 中的数字的 64 位有符号整数。- 或 - 如果 value 为 null，则为零。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBinary(System.Int32,System.Boolean)">
            <summary>
            把一个数转为等效的二进制数。
            </summary>
            <param name="value"></param>
            <param name="split">是否每隔八位后加上空格。</param>
            <returns></returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBinary(System.Int64,System.Boolean)">
            <summary>
            把一个数转为等效的二进制数。
            </summary>
            <param name="value"></param>
            <param name="split">是否每隔八位后加上空格。</param>
            <returns></returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBinary(System.Byte)">
            <summary>
            转换值到二进制。
            </summary>
            <param name="value">转换的值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBinary(System.Decimal,System.Boolean)">
            <summary>
            转换值到二进制。
            </summary>
            <param name="value">转换的值。</param>
            <param name="split">是否每隔 8 位加上空格。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBase(System.Int32,System.Int32)">
            <summary>
            int 转化为toBase进制。
            </summary>
            <param name="value">转换的值。</param>
            <param name="toBase">目标进制。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBase(System.Int64,System.Int32)">
            <summary>
            long转化为toBase进制。
            </summary>
            <param name="value">转换的值。</param>
            <param name="toBase">目标进制。</param>
            <returns>转换后的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.GetLength(System.Int32)">
            <summary>
            获取一个整数中的整数位长度。
            </summary>
            <param name="value">值。</param>
            <returns>长度。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.IsOdd(System.Int32)">
            <summary>
            判断一个数是否为奇数。
            </summary>
            <param name="value">值。</param>
            <returns>如果为奇数，则 true。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.GetPrecision(System.Decimal)">
            <summary>
            获取一个十进制数的精度。
            </summary>
            <param name="value">值。</param>
            <returns>精度。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.ToBCD(System.Int32)">
            <summary>
            转为半角符。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.IsPowerOfTwo(System.Int32)">
            <summary>
            检查无符号长整形数是否为2的正整次方。
            </summary>
            <param name="value">要检查的数。</param>
            <returns>指示指定的值是否为2的正整次方。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.IsPowerOfTwo(System.UInt64)">
            <summary>
            检查无符号长整形数是否为2的正整次方。
            </summary>
            <param name="value">要检查的数。</param>
            <returns>指示指定的值是否为2的正整次方。</returns>
        </member>
        <member name="M:CorePlus.Core.Number.IsBitSet(System.Int32,System.Int32)">
            <summary>
            检查一个数字在某位是否被设置。
            </summary>
            <param name="value">检查的值。</param>
            <param name="bit">位数。</param>
            <returns>如果为 1 ，返回 true。 </returns>
        </member>
        <member name="M:CorePlus.Core.Number.SetBit(System.Int32,System.Int32)">
            <summary>
            设置指定位置的值为 1 。
            </summary>
            <param name="value">操作的值。</param>
            <param name="bit">位数。</param>
        </member>
        <member name="M:CorePlus.Core.Number.UnsetBit(System.Int32,System.Int32)">
            <summary>
            取消设置指定位置的值为 1 。
            </summary>
            <param name="value">操作的值。</param>
            <param name="bit">位数。</param>
        </member>
        <member name="M:CorePlus.Core.Number.DigitAtPosition(System.Decimal,System.Int32)">
            <summary>
            获取一个十进制数内，指定位置的数字。
            <param name="number">要获取位置的数字。</param>
            <param name="position">获取的位数。最高位为 0, 最低位为 (1-n) 。</param>
            <returns>指定位置的数字(0-9)。</returns>
            <example>
            var number = 1.2459m;
            var digit = number.DigitAtPosition(3); // value is 5
            </example>
            </summary>
        </member>
        <member name="T:CorePlus.IO.PathHelper">
            <summary>
            提供路径操作的统一方法。
            </summary>
            <remarks>
            
            <para>
            文件路径有 3 种:
            <list type="bullet">
            <item>绝对路径: 绝对路径是所有文件资源的唯一标识路径。绝对路径使用 <see cref="P:Path.DirectorySeparatorChar"/> 分隔。比如在 Windows 下， "E:\c\a.d" 是合法的绝对路径。</item>
            <item>相对路径: 相对路径是文件相对于另外一个地址得到的路径。相对路径使用 <see cref="P:Path.AltDirectorySeparatorChar"/> 分隔。比如 "../../a.txt" 是合法的相对路径。</item>
            <item>网络地址: 网络地址即 URL。网络地址使用 '/' 分隔。比如 "http://localhost" 是合法的网络地址。</item>
            </list>
            </para>
            
            <para>
            <c>PathHelper</c> 严格按照以下规范处理路径:
            <list type="bullet">
            <item>代表文件夹的路径必须尾缀 <see cref="P:Path.DirectorySeparatorChar"/> 或 <see cref="P:Path.AltDirectorySeparatorChar"/> 。</item>
            <item>一个标准化的地址，不允许出现连续的分隔符和点。</item>
            </list>
            </para>
            
            </remarks>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetFullPath(System.String)">
            <summary>
            返回指定路径字符串的绝对路径。
            </summary>
            <param name="path">要为其获取绝对路径信息的文件或目录。</param>
            <returns>包含 path 的完全限定位置的字符串，例如“C:\MyFile.txt”。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 包含一个冒号（“:”），此冒号不是卷标识符（如，“c:\”）的一部分。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.IsRelativePath(System.String)">
            <summary>
            判断指定的路径是相对位置还是绝对位置。
            </summary>
            <param name="path">要判断的位置。</param>
            <returns>如果是相对位置返回 true，否则返回 false 。如果地址为空，也返回 true 。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetRelativePath(System.String,System.String,System.Int32)">
            <summary>
            把地址转成相对地址格式  。文件: H:\d\aa.gif  文件:  H:\d\a.html
            </summary>
            <param name="path">绝对文件或文件夹的位置。将会把这个地址转为相对的。</param>
            <param name="basePath">作为相对位置的比较文件夹位置，返回<paramref name="path"/> 在通过本路径后的相对位置。如果 null 则取默认文件夹。</param>
            <param name="g">记号。</param>
            <returns>相对位置字符串。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetRelativePath(System.String,System.String,System.Boolean)">
            <summary>
            获取 <paramref name="path"/> 相对于 <paramref name="basePath"/> 的相对位置。
            </summary>
            <param name="basePath">已知的绝对路径。新生成的路径为相对于 <paramref name="basePath"/> 的路径。</param>
            <param name="path">要获取相对路径的位置。</param>
            <param name="basePathIsDirectory">如果为 true， 则 <paramref name="basePath"/> 被解析为目录位置，否则， <paramref name="basePath"/> 被解析成文件位置。</param>
            <returns>一个字符串，表示 <paramref name="path"/> 相对于 <paramref name="basePath"/> 的相对位置。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetAbsolutePath(System.String,System.String,System.String)">
            <summary>
            检查在 <paramref name="basePath"/> 中的相对位置 <paramref name="relativePath"/> 所表示的文件的新位置。
            </summary>
            <param name="basePath">已知的绝对路径。新路径为相对于 <paramref name="basePath"/> 的路径。</param>
            <param name="relativePath">要获取绝对路径的相对位置。</param>
            <param name="rootPath">获取绝对路径时，使用的跟路径地址。</param>
            <returns>
            一个字符串，表示<paramref name="basePath"/> 中的相对位置 <paramref name="relativePath"/> 所表示的文件的新位置。
            </returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.NormalizePathInternal(System.String[])">
            <summary>
            内部规范路径。
            </summary>
            <param name="folders">各层文件。</param>
            <returns>大小。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.NormalizePath(System.String,System.Char)">
            <summary>
            规范化路径。删除多余的分隔符和点，并额外设置分隔目录使用的分隔符。
            </summary>
            <param name="value">要规范的路径。</param>
            <param name="seperator">分隔目录使用的分隔符。</param>
            <returns>新的路径字符串，其符合标准路径的要求。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.NormalizePath(System.String)">
            <summary>
            规范化路径。删除多余的分隔符和点。
            </summary>
            <param name="value">要规范的路径。</param>
            <returns>新的路径字符串，其符合标准路径的要求。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.FixPath(System.String)">
            <summary>
            确保一个地址后面含分隔符。
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <returns>处理后的地址。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.CombinePath(System.String,System.String)">
            <summary>
            连接两个路径。
            </summary>
            <param name="pathA">位置。</param>
            <param name="pathB">位置。</param>
            <returns>连接的字符串。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.CombinePath(System.String[])">
            <summary>
            将多个位置连成一个位置，保证2个位置间只要一个分隔符。
            </summary>
            <param name="path">位置。</param>
            <returns>处理后的地址。</returns>
            <example>
            <code>
            FileHelper.Combine("H:\\", "File", "Doc.txt"); //   H:\\File\\Doc.txt
             FileHelper.Combine("H:\\", "File\\", "../Doc.txt"); //   H:\\File\\../Doc.txt
            
            </code></example>
        </member>
        <member name="M:CorePlus.IO.PathHelper.ComparePath(System.String,System.String)">
            <summary>
            比较2个路径，返回路径直接出现差异的层次位置。如果路径意义相同，则返回 0 。
            </summary>
            <param name="pathA"></param>
            <param name="pathB"></param>
            <returns>如果路径意义相同，则返回 0 , 否则返回出现差异的层次位置。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.PathEquals(System.String,System.String)">
            <summary>
            判断路径是否相同。
            </summary>
            <param name="pathA">位置a。</param>
            <param name="pathB">位置b。</param>
            <returns>等效位置返回 true， 否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.Contains(System.String,System.String)">
            <summary>
            判断地址2是否在文件夹中。 
            </summary>
            <param name="basePath">文件夹的位置。</param>
            <param name="path">文件或文件夹的位置。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.CheckPath(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="path">文件或文件夹的位置。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.CheckName(System.String)">
            <summary>
            检查是否合格地址
            </summary>
            <param name="name">文件或文件夹名。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.IsMatch(System.String,System.String,CorePlus.IO.MatchOptions)">
            <summary>
            判断一个字符串是否符合文件名模式。空字符串永远不满足。
            </summary>
            <param name="name">要判断的字符串。</param>
            <param name="pattern">匹配的模式字符串。</param>
            <param name="options">操作选项。</param>
            <returns>匹配返回 true， 否则 false 。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetCopyedNameInternal(System.String)">
            <summary>
            获得复制的文件名。
            </summary>
            <param name="fileName">文件名。</param>
            <returns>复制后的文件名。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetName(System.String)">
            <summary>
            返回指定路径字符串的文件名和扩展名或目录名。
            </summary>
            <param name="path">位置。</param>
            <returns>一个 System.String，由 path 中最后的目录字符后的字符组成。如果 <paramref name="path"/> 的最后一个字符是目录或卷分隔符，则此方法返回 System.String.Empty。如果 <paramref name="path"/> 为 null，则此方法返回 null。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetFileName(System.String)">
            <summary>
            返回指定路径字符串的文件名和扩展名。
            </summary>
            <param name="path">从其获取文件名和扩展名的路径字符串。</param>
            <returns>一个 System.String，由 path 中最后的目录字符后的字符组成。如果 <paramref name="path"/> 的最后一个字符是目录或卷分隔符，则此方法返回 System.String.Empty。如果 <paramref name="path"/> 为 null，则此方法返回 null。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            返回不具有扩展名的指定路径字符串的文件名。
            </summary>
            <param name="path">文件的路径。</param>
            <returns>包含由 <see cref="M:GetFileName(string)"/> 返回的字符串的 System.String，但不包括最后的句点 (.) 和该句点后的所有字符。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetExtension(System.String)">
            <summary>
            返回指定的路径字符串的扩展名(含点)。
            </summary>
            <param name="path">从其获取扩展名的路径字符串。</param>
            <returns>包含指定路径的扩展名（包括“.”）的 System.String、null 或 System.String.Empty。如果 <paramref name="path"/> 为 null，则 GetExtension 返回 null。如果 <paramref name="path"/> 不具有扩展名信息，则 GetExtension 返回 Empty。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.ChangeDirectory(System.String,System.String)">
            <summary>
            修改一个路径中的目录，并返回新位置。
            </summary>
            <param name="path">要处理的文件路径。</param>
            <param name="destPath">移动的目标目录位置。</param>
            <returns>新的位置字符串。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.ChangeFileName(System.String,System.String)">
            <summary>
            修改一个路径中的文件名，并返回新位置。
            </summary>
            <param name="path">要处理的文件路径。</param>
            <param name="destFileName">新文件名。</param>
            <returns>更新后的路径。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.ChangeFileNameWithoutExtension(System.String,System.String)">
            <summary>
            修改一个路径中的文件名(不包括扩展名)，并返回新位置。
            </summary>
            <param name="path">要处理的文件路径。</param>
            <param name="destFileName">新文件名(不包括扩展名)。</param>
            <returns>更新后的路径。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.AppendFileName(System.String,System.String)">
            <summary>
            在一个路径中的文件名中追加指定的内容(不修改扩展名)，并返回新位置。
            </summary>
            <param name="path">要处理的文件路径。</param>
            <param name="value">新文件名(不包括扩展名)。</param>
            <returns>更新后的路径。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.ChangeExtension(System.String,System.String)">
            <summary>
            修改一个路径中的扩展名，并返回新位置。
            </summary>
            <param name="path">要处理的文件路径。</param>
            <param name="extension">新的扩展名（有或没有前导句点）。指定 null 以从 <paramref name="path"/> 移除现有扩展名。</param>
            <returns>包含修改的路径信息的字符串。 在基于 Windows 的桌面平台上，如果 <paramref name="path"/> 是 null 或空字符串 ("")，则返回的路径信息是未修改的。如果 <paramref name="extension"/> 是 null，则返回的字符串包含指定的路径，其扩展名已移除。如果 <paramref name="path"/> 不具有扩展名，并且 <paramref name="extension"/> 不是 null，则返回的路径字符串包含 <paramref name="extension"/>，它追加到 <paramref name="path"/> 的结尾。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetDirectoryName(System.String)">
            <summary>
            返回指定路径字符串的目录信息。
            </summary>
            <param name="path">文件或目录的路径。</param>
            <returns>包含 <paramref name="path"/> 目录信息的 System.String；或者为 null（如果 <paramref name="path"/> 表示根目录、是空字符串 ("") 或是 null）。如果 <paramref name="path"/> 没有包含目录信息，则返回 System.String.Empty。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.Rename(System.String)">
            <summary>
            重命名指定路径所表示的文件或目录名。
            </summary>
            <param name="path">要重命名的路径。</param>
            <returns>新的路径。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.RenameFileUnique(System.String)">
            <summary>
            重命名指定路径所表示的文件，并确保新文件不存在。
            </summary>
            <param name="path">要重命名的路径。</param>
            <returns>新的文件名。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.RenameDirectoryUnique(System.String)">
            <summary>
            重命名指定路径所表示的目录，并确保新目录不存在。
            </summary>
            <param name="path">要重命名的路径。</param>
            <returns>新目录名。</returns>
        </member>
        <member name="M:CorePlus.IO.PathHelper.PrepareDirectoryPath(System.String)">
            <summary>
            确认一个地址所在的目录已存在。如果不存在，则创建该目录。
            </summary>
            <param name="path">要保存的文件位置。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.PrepareFilePath(System.String)">
            <summary>
            在创建一个文件前，确保该文件存储位置可以正常地保存文件。
            </summary>
            <param name="path">要保存的文件位置。</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.PrepareFilePath(System.String@,CorePlus.Core.OverwriteType,System.Boolean)">
            <summary>
            尝试写入文件时，处理文件路径问题。
            </summary>
            <param name="filePath">文件位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="create">是否确定所在文件夹一定存在。</param>
            <returns>如果可创建文件返回 true;否则返回 false。</returns>
            <remarks>
            创建新文件时，需要满足:
             - 所创建的文件不存在
             - 文件的文件夹存在
            这个函数会检查上述情况，确保能完成写入。
            </remarks>
        </member>
        <member name="M:CorePlus.IO.PathHelper.PrepareDirectoryPath(System.String@,CorePlus.Core.OverwriteType,System.Boolean)">
            <summary>
            尝试写入文件夹时，处理文件路径问题。
            </summary>
            <param name="path">文件夹的位置。</param>
            <param name="overwrite">覆盖的方式。</param>
            <param name="create">是否确定所在文件夹一定存在。</param>
            <returns>如果成功返回 true;否则返回 false。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> 是一个零长度字符串，仅包含空白或者包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars"/> 定义的无效字符。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为 null。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
            <exception cref="T:System.IO.IOException">指定的文件正在使用中。</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> 的格式无效。</exception>
            <exception cref="T:System.IO.PathTooLongException">指定的路径、文件名或者两者都超出了系统定义的最大长度。例如，在基于 Windows 的平台上，路径必须小于 248 个字符，文件名必须小于 260 个字符。</exception>
            <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -<paramref name="path"/> 是一个目录。- 或 -<paramref name="path"/> 指定一个只读文件。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetTempFile">
            <summary>
            创建磁盘上唯一命名的零字节的临时文件并返回该文件的完整路径。
            </summary>
            <returns>包含临时文件的完整路径的 System.String。</returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误，例如没有提供唯一的临时文件名。 - 或 - 此方法无法创建临时文件。</exception>
        </member>
        <member name="M:CorePlus.IO.PathHelper.GetTempFile(System.String,System.String)">
            <summary>
            返回一个用于保存指定文件时使用的缓存文件位置。
            </summary>
            <param name="path">原始保存的文件位置。</param>
            <param name="extension">期望使用的扩展名。</param>
            <returns>生成的缓存文件位置。</returns>
        </member>
        <member name="P:CorePlus.IO.PathHelper.RootPath">
            <summary>
            获取当前的工作目录。
            </summary>
            <exception cref="T:System.ArgumentException">试图设置为空字符串 ("")。</exception>
            <exception cref="T:System.ArgumentNullException">试图设置为 null。</exception>
            <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">试图设置一个无法找到的本地路径。</exception>
            <exception cref="T:System.Security.SecurityException">调用方没有适当的权限。</exception>
        </member>
        <member name="T:CorePlus.Collections.ReadOnlyCollection`1">
            <summary>
            为泛型只读集合提供基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:CorePlus.Collections.ReadOnlyCollection`1._list">
            <summary>
            列表。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化 Py.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; 类的新实例。
            </summary>
            <param name="list">要包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            初始化 Py.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; 类的新实例，该实例是指定列表周围的只读包装。
            </summary>
            <param name="list">要包装的列表。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="value">要在集合中定位的对象。对于引用类型，该值可以为空。</param>
            <returns>如果在集合中找到 value，则为 true；否则为 false。</returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个集合复制到兼容的一维 System.Array。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index">array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -源集合中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            返回循环访问集合的枚举数。
            </summary>
            <returns>用于集合的序列。</returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="value">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.IsCompatibleObject(System.Object)">
            <summary>
            检查对象是否为当前 <typeparamref name="T"/> 型。
            </summary>
            <param name="value">值。</param>
            <returns>如果正确，则返回 true。</returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            将某项添加到集合中。
            </summary>
            <param name="value">要添加到集合的对象。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
             从集合中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            将一个项插入指定索引处的 集合。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入到 集合 中的对象。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的 集合 项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            将某项添加到 <see cref="T:System.Collections.IList"/> 中。
            </summary>
            <param name="value">要添加到 <see cref="T:System.Collections.IList"/> 的 <see cref="T:System.Object"/>。</param>
            <returns>新元素的插入位置。</returns>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Clear">
            <summary>
            从集合中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 是否包含特定值。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在 <see cref="T:System.Collections.IList"/> 中找到 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IList"/> 中特定项的索引。
            </summary>
            <param name="value">要在 <see cref="T:System.Collections.IList"/> 中查找的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果在列表中找到，则为 <paramref name="value"/> 的索引；否则为 -1。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            将一个项插入指定索引处的 <see cref="T:System.Collections.IList"/>。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 <paramref name="value"/>。</param>
            <param name="value">要插入 <see cref="T:System.Collections.IList"/> 中的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 不是 <see cref="T:System.Collections.IList"/> 中的有效索引。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> 在 <see cref="T:System.Collections.IList"/> 中是 null 引用。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IList"/> 中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 <see cref="T:System.Collections.IList"/> 移除的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IList"/> 为只读。- 或 - <see cref="T:System.Collections.IList"/> 具有固定大小。</exception>
        </member>
        <member name="M:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的集合项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 为空。</exception>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.Count">
            <summary>
            包含在集合实例中的元素数。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            获取指定索引处的元素。
            </summary>
            <param name="index">要获取的元素的索引（索引从零开始）。</param>
            <returns>指定索引处的元素。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 小于零。- 或 - <paramref name="index"/> 等于或大于数量。</exception>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.Items">
            <summary>
            返回集合包装的集合。
            </summary>
            <value>集合包装的集合。</value>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <returns>指定索引处的元素。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 不是有效的索引。</exception>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IList"/> 是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IList"/> 具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取或设置一个值，该值指示是否只读。
            </summary>
            <value>如果已经只读， 则 true; 否则, false。</value>
        </member>
        <member name="P:CorePlus.Collections.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取或设置指定位置的 <see cref="T:System.Object"/>。
            </summary>
            <value>内容。</value>
            <exception cref="T:System.NotSupportedException">集合为只读。</exception>
        </member>
        <member name="T:CorePlus.Algorithm.Encryption">
            <summary>
            提供字符串加密解密的算法。
            </summary>
            <remarks>
            <list type="bullet">
                <listheader>本类包含以下加密算法:</listheader>
                <item>None(无加密)</item>
                <item>MD5</item>
                <item>DES</item>
                <item>AES</item>
                <item>TripleDES</item>
                <item>SHA1</item>
                <item>字符串移位简单加密</item>
            </list>
            <para>
            此类的所有加密解密函数都满足 <see cref="T:CorePlus.Algorithm.Encryption.Algorithm"/> 委托，因此可以实现根据不同选项选择不同的加密算法。
            </para>
            </remarks>
            <example>
            以下示例演示了如何获得一个字符串经 MD5 加密后的字符串。
            <code>
            using CorePlus.Algorithm;
            using CorePlus.Logging;
            
            namespace CorePlus.Samples {
            
                class EncryptionSample {
                
                    public static void Main(){
                        string input = "abc";
                        string md5 = Encryption.MD5(input);
                        Logger.Write(md5);
                    }
                
                }
                
            }
            </code>
            </example>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.ToBit(System.String,System.Int32)">
            <summary>
            将数组固定为 8 的长度。
            </summary>
            <param name="value">缓存。</param>
            <param name="length">长度。</param>
            <returns>处理的缓存。</returns>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.None(System.String)">
            <summary>
            表示不加密的算法。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.MD5(System.String,System.Boolean)">
            <summary>
            使用 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">如果为 true，则使用16位加密，否则，使用32位加密。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.MD5t(System.String,System.Boolean)">
            <summary>
            简单 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">加密是16位还是32位；如果为true则为16位。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.MD5d(System.String)">
            <summary>
            使用 双MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.SHA1(System.String)">
            <summary>
            使用 SHA1 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.GetHash``1(System.String)">
            <summary>
            计算文件的哈希值。
            </summary>
            <typeparam name="T">所有HashAlgorithm的非抽象子类，指示哈希的算法。</typeparam>
            <param name="filePath">要获取检验码的文件名。</param>
            <returns>字符串。表示获得的哈希值。</returns>
            <remarks>
            默认提供的可用的算法列表  (System.Security.Cryptography)
            <list>
            <item>MD5CryptoServiceProvider  MD5 </item>
            <item>SHA1CryptoServiceProvider  SHA1 </item>
            <item>SHA256Managed  SHA256 </item>
            <item>SHA384Managed  SHA384 </item>
            <item>SHA512Managed  SHA512 </item>
            </list>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.GetHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            通过一个方法获得一个文件的哈希值。
            </summary>
            <param name="ha">算法。</param>
            <param name="filePath">要获取检验码的文件名。</param>
            <returns>字符串。表示获得的哈希值。</returns>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.GetHash(System.String)">
            <summary>
            获取一个文件的 MD5 检验码。
            </summary>
            <param name="filePath">要获取检验码的文件名。</param>
            <returns>MD5值。</returns>
            <exception cref="T:System.IO.FileNotFoundException">找不到文件。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> 为空字符串 ("")，只包含空格，或者包含一个或多个无效字符。- 或 -<paramref name="filePath"/> 引用一个非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptString(System.String,System.Int32)">
            <summary>
            使用 移位方式 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="key">用于加密的密钥。</param>
            <returns>返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptString(System.String,System.Int32)">
            <summary>
            使用 移位方式 解密字符串。
            </summary>
            <param name="input">待解密的字符串。</param>
            <param name="key">用于解密的密钥。</param>
            <returns>返回解密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptAES(System.String,System.String,System.String)">
            <summary>
            使用 AES 加密字符串。
            </summary>
            <param name="encryptString">待加密的字符串。</param>
            <param name="encryptKey">用于加密的密钥。不支持中文。</param>
            <param name="encryptIV">用于加密的初始化向量。可以使用任何一个字符串。</param>
            <returns>返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptString"/> 或 <paramref name="encryptKey"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptAES(System.String,System.String,System.String)">
            <summary>
            使用 AES 解密字符串。
            </summary>
            <param name="decryptString">待解密的字符串。</param>
            <param name="decryptKey">用于解密的密钥。不支持中文。</param>
            <param name="decryptIV">用于解密的初始化向量。可以用任何一个字符串。</param>
            <returns>返回解密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptString"/> 或 <paramref name="decryptKey"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptDES(System.String,System.String,System.String)">
            <summary>
            使用 DES 加密字符串。
            </summary>
            <param name="encryptString">待加密的字符串。</param>
            <param name="encryptKey">用于加密的密钥。不支持中文。</param>
            <param name="encryptIV">用于加密的初始化向量。可以用任何一个字符串。</param>
            <returns>返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptString"/> 或 <paramref name="encryptKey"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptDES(System.String,System.String,System.String)">
            <summary>
            使用 DES 解密字符串。
            </summary>
            <param name="decryptString">待解密的字符串。</param>
            <param name="decryptKey">用于解密的密钥。不支持中文。</param>
            <param name="decryptIV">用于解密的初始化向量。可以用任何一个字符串。</param>
            <returns>返回解密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptString"/> 或 <paramref name="decryptKey"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptTripleDES(System.String,System.String)">
            <summary>
            使用 TripleDES 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="encryptKey">用于加密的密钥。不支持中文。</param>
            <returns>返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptTripleDES(System.String,System.String)">
            <summary>
            使用 TripleDES 解密字符串。
            </summary>
            <param name="input">待解密的字符串。</param>
            <param name="decryptKey">用于解密的密钥。不支持中文。</param>
            <returns>返回解密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptBase64(System.String)">
            <summary>
            转换为 Base64 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>返回加密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptBase64(System.String)">
            <summary>
            转换 Base64 加密字符串到普通字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>返回解密后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.EncryptFile(System.String,System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES加密。
            </summary>
            <param name="sourceFile">待加密的文件绝对路径。</param>
            <param name="destFile">加密后的文件保存的绝对路径。</param>
            <param name="encryptKey">用于加密的密钥。不支持中文。</param>
            <param name="encryptIV">用于加密的初始化向量。可以用任何一个字符串。</param>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.DecryptFile(System.String,System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES解密。
            </summary>
            <param name="sourceFile">待解密的文件绝对路径。</param>
            <param name="destFile">解密后的文件保存的绝对路径。</param>
            <param name="decryptKey">用于解密的密钥。不支持中文。</param>
            <param name="decryptIV">用于解密的初始化向量。可以用任何一个字符串。</param>
        </member>
        <member name="T:CorePlus.Algorithm.Encryption.Algorithm">
            <summary>
            表示一个加密的算法实现。
            </summary>
            <param name="input">待加密的字符串。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="T:CorePlus.Algorithm.Encryption.MD5Encryption">
            <summary>
            使用 传统MD5 处理字符串。
            </summary>
            <remarks>
            目前仅支持 Md5OLD=1 的情况，也就是不对输入的字串进行ansi编码。绝大部分asp程序都是用这种方式获得md5编码。
            作者：DarkRain.cn [heroworld.net, taihainet.com] 2007
            </remarks>
        </member>
        <member name="M:CorePlus.Algorithm.Encryption.MD5Encryption.MD5(System.String,System.Boolean)">
            <summary>
            简单 MD5 加密字符串。
            </summary>
            <param name="input">待加密的字符串。</param>
            <param name="half">加密是16位还是32位；如果为true则为16位。</param>
            <returns>被加密的字符串。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/>为空。</exception>
        </member>
        <member name="T:CorePlus.IO.MatchOptions">
            <summary>
            表示一个字符串匹配时的选项。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.None">
            <summary>
            不使用选项。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.Default">
            <summary>
            默认选择。 (支持文件名， 忽略大小写)
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.NoEscape">
            <summary>
            不允许 \ 字符串转义。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.PathName">
            <summary>
            处理文件位置，而不是文件名。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.Period">
            <summary>
            点号只能匹配点号。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.LeadingDirectory">
            <summary>
            忽视前导 / 符。
            </summary>
        </member>
        <member name="F:CorePlus.IO.MatchOptions.CaseSensitive">
            <summary>
            忽视大小写。
            </summary>
        </member>
        <member name="T:CorePlus.Core.ArrayString">
            <summary>
            表示一个以字符串形式存储的数组。
            </summary>
            <remarks>
            这个类实现如 "a,b,c,d" 这样的字符串作为一个列表和字符串操作。
            </remarks>
        </member>
        <member name="M:CorePlus.Core.ArrayString.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ArrayString"/> 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Core.ArrayString.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:CorePlus.Core.ArrayString.#ctor(System.String,System.Char)">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:CorePlus.Core.ArrayString.#ctor(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="input">输入的值。</param>
            <param name="seperator">分隔符。</param>
            <param name="count">个数。</param>
            <param name="option">选项。</param>
        </member>
        <member name="M:CorePlus.Core.ArrayString.#ctor(System.String[],System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ArrayString"/> 的新实例。
            </summary>
            <param name="values">数组。</param>
            <param name="seperator">分隔符。</param>
        </member>
        <member name="M:CorePlus.Core.ArrayString.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            	<see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Implicit(CorePlus.Core.ArrayString)~System.String">
            <summary>
            实现从 <see cref="T:CorePlus.Core.ArrayString"/> 到 <see cref="T:System.String"/> 的隐性的转换。
            </summary>
            <param name="input">数组字符串。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Implicit(System.String)~CorePlus.Core.ArrayString">
            <summary>
            实现从 <see cref="T:System.String"/> 到 <see cref="T:CorePlus.Core.ArrayString"/> 的隐性的转换。
            </summary>
            <param name="input">数组字符串。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Explicit(CorePlus.Core.ArrayString)~System.String[]">
            <summary>
            实现从 <see cref="T:CorePlus.Core.ArrayString"/> 到 <see cref="T:System.String[]"/> 的显性的转换。
            </summary>
            <param name="input">字符数组。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Addition(CorePlus.Core.ArrayString,System.String)">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Addition(CorePlus.Core.ArrayString,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Addition(CorePlus.Core.ArrayString,CorePlus.Core.ArrayString)">
            <summary>
            实现操作 operator +.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Subtraction(CorePlus.Core.ArrayString,System.String)">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Subtraction(CorePlus.Core.ArrayString,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Subtraction(CorePlus.Core.ArrayString,CorePlus.Core.ArrayString)">
            <summary>
            实现操作 operator -.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Equality(CorePlus.Core.ArrayString,CorePlus.Core.ArrayString)">
            <summary>
            实现操作 operator ==.
            </summary>
            <param name="input">数组字符串。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.op_Inequality(CorePlus.Core.ArrayString,CorePlus.Core.ArrayString)">
            <summary>
            实现操作 operator !=.
            </summary>
            <param name="input">输入的值。</param>
            <param name="value">值。</param>
            <returns>操作的结果。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Equals(CorePlus.Core.ArrayString)">
            <summary>
            确定指定的 <see cref="T:CorePlus.Core.ArrayString"/> 是否等于当前的 <see cref="T:CorePlus.Core.ArrayString"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:CorePlus.Core.ArrayString"/> 进行比较的 <see cref="T:CorePlus.Core.ArrayString"/>。</param>
            <returns>
            如果指定的 <see cref="T:CorePlus.Core.ArrayString"/> 等于当前的 <see cref="T:CorePlus.Core.ArrayString"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Equals(CorePlus.Core.ArrayString,System.StringComparison)">
            <summary>
            确定指定的 <see cref="T:CorePlus.Core.ArrayString"/> 是否等于当前的 <see cref="T:CorePlus.Core.ArrayString"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:CorePlus.Core.ArrayString"/> 进行比较的 <see cref="T:CorePlus.Core.ArrayString"/>。</param>
            <param name="comparison">字符串比较方式。</param>
            <returns>
            如果指定的 <see cref="T:CorePlus.Core.ArrayString"/> 等于当前的 <see cref="T:CorePlus.Core.ArrayString"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Equals(System.Object)">
            <summary>
            确定指定的 <see cref="T:System.Object"/> 是否等于当前的 <see cref="T:System.Object"/>。
            </summary>
            <param name="obj">与当前的 <see cref="T:System.Object"/> 进行比较的 <see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的 <see cref="T:System.Object"/> 等于当前的 <see cref="T:System.Object"/>，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="obj"/> 参数为 null。
            </exception>
        </member>
        <member name="M:CorePlus.Core.ArrayString.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前 <see cref="T:System.Object"/> 的哈希代码。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Clone">
            <summary>
            创建当前实例的副本。
            </summary>
            <returns>新的 <see cref="T:CorePlus.Core.ArrayString"/> 对象。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.AddValue(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符串添加值。如果原值存在，则不添加。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">增加的值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.ReplaceValue(System.String,System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符替换值。
            </summary>
            <param name="input">要处理的字符串。</param>
            <param name="oldValue">被替换的值。</param>
            <param name="newValue">用于替换的新值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType"><see cref="T:System.StringComparison"/> 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.SetValue(System.String,System.String,System.String,System.String,System.StringComparison)">
            <summary>
            向一个数组字符替换值，如果原值不存在,添加值。
            </summary>
            <param name="input">字符串。</param>
            <param name="oldValue">原来的值。</param>
            <param name="newValue">新值。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.GetValue(System.String,System.Char,System.Int32)">
            <summary>
            获取某一位置的值。
            </summary>
            <param name="input">字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="index">位置。</param>
            <returns>值。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.GetValue(System.String,System.String,System.Int32)">
            <summary>
            获取某一位置的值。
            </summary>
            <param name="input">字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="index">位置。</param>
            <returns>值。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.IndexOf(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="startIndex">搜索起始位置。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.IndexOf(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <param name="comparisonType">System.StringComparison 值之一。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.IndexOf(System.String,System.String,System.String)">
            <summary>
            报告指定的字符串在当前 System.String 对象中的第一个匹配项的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。
            </summary>
            <param name="input">字符串。</param>
            <param name="value">要查找的字符串。</param>
            <param name="seperator">分隔符。</param>
            <returns>如果找到该字符串，则为 value 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 value 为 System.String.Empty，则返回值为 0。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Concat(System.String,System.String,System.String)">
            <summary>
            连接字符串。
            </summary>
            <param name="input">输入。</param>
            <param name="value">值。</param>
            <param name="seperator">分隔符。</param>
            <returns>连接的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.ArrayString.Slice(System.String,System.String,System.Char)">
            <summary>
            从input去掉 Name和指定符号。 如    input,b,c,d - b = input,c,d 。
            </summary>
            <param name="input">要做处理的字符串。</param>
            <param name="value">被删的字。</param>
            <param name="seperator">分隔符。</param>
            <returns>已处理的字符串。</returns>
            <example><code>
            using System;
            using CorePlus;
            class Sample {
            public static void Main(){
            string input = "input,b,c,d";
            string input = ArrayString.Slice(input,"b");
            Console.Write(input);  // 输出   input,c,d
            }
            }
            </code></example>
        </member>
        <member name="P:CorePlus.Core.ArrayString.Seperator">
            <summary>
            获取或设置分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Core.ArrayString.Length">
            <summary>
            获取字符串的总长度。
            </summary>
        </member>
        <member name="P:CorePlus.Core.ArrayString.Value">
            <summary>
            获取或设置当前字符串的值。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.EntryCollection`2">
            <summary>
            为泛型单元的集合提供基类。
            </summary>
            <typeparam name="TOwner">集合所有者类型。</typeparam>
            <typeparam name="T">集合中的元素类型。</typeparam>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.#ctor(`0)">
            <summary>
            初始化空的 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.#ctor(`0,System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="collection">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            将 <see cref="T:CorePlus.Collections.EntryCollection`2"/>初始化为类的新实例初始化为指定列表的包装。
            </summary>
            <param name="owner">拥有者。</param>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.RemoveRange(System.Collections.Generic.ICollection{System.String})">
            <summary>
            从集合中删除指定的元素。
            </summary>
            <param name="items">项。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.Remove(System.String)">
            <summary>
            从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="name">要从集合中移除的名字。对于引用类型，该值可以为 null。</param>
            <returns>如果成功移除 item，则为 true；否则为 false。如果在原始集合中未找到 item，此方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.Contains(System.String)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="name">要在集合中定位的名字。</param>
            <returns>如果在集合中找到 item，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.EntryCollection`2.IndexOf(System.String)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="name">要在集合中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="P:CorePlus.Collections.EntryCollection`2.Owner">
            <summary>
            获取或设置集合的所有者。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.EntryCollection`2.Comparison">
            <summary>
            获取或设置名字比较函数。
            </summary>
            <remarks>
            如需要不区分名字大小写。可以设置 Comparison 为 StringComparison.OrdinalIgnoreCase
            
            </remarks>
        </member>
        <member name="P:CorePlus.Collections.EntryCollection`2.Item(System.String)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="name">要获得或设置的元素从零开始的索引。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> 为空。</exception>
            <exception cref="T:System.NotSupportedException">设置该属性，而且集合为只读。</exception>
        </member>
        <member name="T:CorePlus.Algorithm.Searcher">
            <summary>
            提供搜索算法。
            </summary>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            通过使用指定的相等比较器确定序列是否包含指定的元素。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            查找第一个和指定的队列一一对应相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="values">用于匹配的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的队列一一对应相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="values">用于匹配的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">查找的索引。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">查找的索引。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">搜索的个数。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.IndexOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">搜索的数目。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="predicate">用于确定一项是否满足的方法。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>  为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Int32,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            查找最后一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">搜索的数目。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            查找第一个和指定的对象相等的项，并返回该项在集合的从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="index">开始搜索的位置。</param>
            <param name="count">搜索的数目。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.AdjacentSearch``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            在一个集合中搜索重复出现的值的位置。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="count">至少需要重复出现次数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.AdjacentSearch``1(System.Collections.Generic.IEnumerable{``0},System.Int32,CorePlus.Core.EqualityComparison{``0})">
            <summary>
            在一个集合中搜索重复出现的值的位置。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IEnumerable"/> 对象。</param>
            <param name="count">至少需要重复出现次数。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回true，否则返回false。</param>
            <returns>如果在整个集合中找到匹配项，则为该项的从零开始的索引；否则为 -1 。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果找到 <paramref name="value"/>，则为已排序的 <see cref="T:System.Collections.IList"/> 中 <paramref name="value"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="T:System.Collections.IList"/> 的按位求补。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="start">开始搜索的位置。</param>
            <param name="end">结束搜索的位置。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果找到 <paramref name="value"/>，则为已排序的 <see cref="T:System.Collections.IList"/> 中 <paramref name="value"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="T:System.Collections.IList"/> 的按位求补。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0})">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0，否则返回相差的值。</param>
            <returns>如果找到 <paramref name="value"/>，则为已排序的 <see cref="T:System.Collections.IList"/> 中 <paramref name="value"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="T:System.Collections.IList"/> 的按位求补。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Algorithm.Searcher.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Comparison{``0})">
            <summary>
            使用指定的比较器在已排序列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <typeparam name="T"><paramref name="source"/> 中的元素的类型。</typeparam>
            <param name="source">用于搜索的 <see cref="T:System.Collections.IList"/> 对象。</param>
            <param name="start">开始搜索的位置。</param>
            <param name="end">结束搜索的位置。</param>
            <param name="value">要搜索的值。</param>
            <param name="comp">用于比较的方法，如果比较的值相等，则返回0，否则返回相差的值。</param>
            <returns>如果找到 <paramref name="value"/>，则为已排序的 <see cref="T:System.Collections.IList"/> 中 <paramref name="value"/> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="value"/> 的第一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="T:System.Collections.IList"/> 的按位求补。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="comp"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> 小于 0 -  或 - <paramref name="end"/> 大于列表的长度。  </exception>
        </member>
        <member name="T:CorePlus.IO.FileExistsException">
            <summary>
            试图写入磁盘上已存在的文件时引发的异常。
            </summary>
        </member>
        <member name="F:CorePlus.IO.FileExistsException.COR_E_POINTER">
            <summary>
            错误指针的 API long 值。
            </summary>
        </member>
        <member name="F:CorePlus.IO.FileExistsException._fileName">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:CorePlus.IO.FileExistsException._fusionLog">
            <summary>
            日志。
            </summary>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例，使其消息字符串设置为系统所提供的消息，其 HRESULT 设置为 COR_E_POINTER。
            </summary>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor(System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例，使其消息字符串设置为 message，其 HRESULT 设置为 COR_E_POINTER。
            </summary>
            <param name="message">描述该错误的 System.String。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用指定的序列化和上下文信息初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例。
            </summary>
            <param name="info">用于序列化或反序列化文件的数据。</param>
            <param name="context">文件的源和目标。</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例。
            </summary>
            <param name="message">描述该错误的 <see cref="T:System.String"/>。<paramref name="message"/> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
            <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例，使其消息字符串设置为 message（用于指定无法找到的文件名），其 HRESULT 设置为 COR_E_POINTER。
            </summary>
            <param name="message">描述该错误的 <see cref="T:System.String"/>。message 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
            <param name="fileName">一个 <see cref="T:System.String"/>，它包含具有无效图像的文件的完整名称。		</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:CorePlus.IO.FileExistsException"/> 类的新实例。
            </summary>
            <param name="message">释异常原因的错误信息。</param>
            <param name="fileName">一个 <see cref="T:System.String"/>，它包含具有无效图像的文件的完整名称。</param>
            <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException"/> 参数不为 null，则当前异常在处理内部异常的 catch 块中引发。</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            设置带有文件名和附加异常信息的 System.Runtime.Serialization.SerializationInfo 对象。
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">System.Runtime.Serialization.StreamingContext，它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:CorePlus.IO.FileExistsException.ToString">
            <summary>
            返回该异常的完全限定名，还可能返回错误信息、内部异常的名称和堆栈跟踪。
            </summary>
            <returns> 一个字符串，包含该异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪。</returns>
        </member>
        <member name="P:CorePlus.IO.FileExistsException.FileName">
            <summary>
            获取无法找到的文件的名称。
            </summary>
            <value>包含文件名的 System.String；或者，如果没有将文件名传递给此实例的构造函数，则为 null。</value>
        </member>
        <member name="P:CorePlus.IO.FileExistsException.FusionLog">
            <summary>
            获取日志文件，该文件描述加载程序集失败的原因。
            </summary>
            <value>一个 String，包含由程序集缓存报告的错误。</value>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="P:CorePlus.IO.FileExistsException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
            <returns>解释异常原因的错误消息或空字符串 ("")。</returns>
        </member>
        <member name="T:CorePlus.Core.QC">
            <summary>
            提供快速转换的函数。
            </summary>
        </member>
        <member name="M:CorePlus.Core.QC.Int(System.String)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回 0 。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = QC.Int("a");
                     Console.Write(value);  // 输出   0
                     value = QC.Int("11.333");
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Int(System.String,System.Int32)">
            <summary>
            将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
            <example><code>
            using CorePlus;
            class Sample {
            public static void Main(){
            string value = QC.Int("a");
            Console.Write(value);  // 输出   0
            value = QC.Int("11.333");
            Console.Write(value);  // 输出   11
            }
            }
            </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Int(System.Object)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回 0。 
             </summary>
             <param name="value">要处理的变量。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "111z";
                     string value = QC.Int(a);
                     Console.Write(value);  // 输出   0
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Int(System.Object,System.Int32)">
             <summary>
             将数字的字符串表示形式转换为它的等效 32 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要处理的变量。</param>
             <param name="dft">默认值。</param>
             <returns>返回转换后的整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = QC.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = QC.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Long(System.String,System.Int64)">
            <summary>
            将数字的字符串表示形式转换为它的等效 64 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Long(System.Object,System.Int64)">
            <summary>
            将数字的字符串表示形式转换为它的等效 64 位有符号整数,失败返回默认。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Short(System.String,System.Int16)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Short(System.Object,System.Int16)">
            <summary>
            将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>16位整数。</returns>
            <example><code>
            using CorePlus;
            class Sample {
            public static void Main(){
            string a = "111";
            string value = Text.Int(a, 9);
            Console.Write(value);  // 输出   111
            value = Text.Int("11.333", 9);
            Console.Write(value);  // 输出   11
            }
            }
            </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Double(System.String,System.Double)">
             <summary>
             将数字的字符串表示形式转换为它的等效双精度浮点数。失败返回 0 。
             </summary>
             <param name="value">要做处理字符串。</param>
             <param name="dft">默认值。</param>
             <returns>小数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Double(System.Object,System.Double)">
            <summary>
            将数字的字符串表示形式转换为它的等效双精度浮点数。失败返回 0 。
            </summary>
            <param name="value">要做处理字符串。</param>
            <param name="dft">默认值。</param>
            <returns>小数。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Float(System.String,System.Single)">
             <summary>
             将数字的字符串表示形式转换为它的等效单精度浮点数。失败返回 0 
             </summary>
             <param name="value">要做处理字符串</param>
             <param name="dft">默认值。</param>
             <returns>小数</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Float(System.Object,System.Single)">
             <summary>
             将数字的字符串表示形式转换为它的等效单精度浮点数。失败返回 0 
             </summary>
             <param name="value">要做处理字符串</param>
             <param name="dft">默认值。</param>
             <returns>小数</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string value = Text.Double("1.2");
                     Console.Write(value);  // 输出   1.2
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Decimal(System.String,System.Decimal)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a,9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333",9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Decimal(System.Object,System.Decimal)">
             <summary>
             将数字的字符串表示形式转换为它的等效 16 位有符号整数,失败返回默认值。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>16位整数。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "111";
                     string value = Text.Int(a, 9);
                     Console.Write(value);  // 输出   111
                     value = Text.Int("11.333", 9);
                     Console.Write(value);  // 输出   11
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Bool(System.Object)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Bool(System.String,System.Boolean)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认值。</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.Bool(System.Object,System.Boolean)">
             <summary>
             转成bool,如果string == “true” 转化 true ,空转false.默认true
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认</param>
             <returns>如果成功返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "false";
                     string value = Text.Bool(a);
                     Console.Write(value);  // 输出   false
                     value = Text.Bool("aa");
                     Console.Write(value);  // 输出   true
                     value = Text.Bool(null);
                     Console.Write(value);  // 输出   false
                  
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.BoolNull(System.String)">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.BoolNull(System.String,System.Nullable{System.Boolean})">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.BoolNull(System.Object)">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.BoolNull(System.Object,System.Nullable{System.Boolean})">
            <summary>
            转到 bool?
            </summary>
            <param name="value">要处理的字符串。</param>
            <param name="dft">默认值。</param>
            <returns>如果变量为null或空，返回null。其它返回布尔型。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.BoolNull(System.Int32)">
             <summary>
             转到  bool?
             </summary>
             <param name="value">要处理的数字。</param>
             <returns>如果数字1返回true，0返回false，2返回null。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger(new String[]{"4"});
                     Console.Write(d);  // 输出  true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.IntNull(System.String,System.Nullable{System.Int32})">
            <summary>
            转到 int?  。
            </summary>
            <param name="value">要处理的数字。</param>
            <param name="dft">默认值。</param>
            <returns>整数。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.IntNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转到 int?  。
            </summary>
            <param name="value">要处理的数字。</param>
            <param name="dft">默认值。</param>
            <returns>整数。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.DateTime(System.String)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>日期。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.DateTime(System.String,System.DateTime)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认时间。</param>
             <returns>日期。</returns>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01",DateTime.Now);
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.DateTime(System.Object)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>日期。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.DateTime(System.Object,System.DateTime)">
             <summary>
             日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <param name="dft">默认时间。</param>
             <returns>日期。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     DateTime d = Text.Date("2009-01-01");
                     Console.Write(d.ToString("yyyy"));  // 输出  2009-01-01
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.QC.DateTimeNull(System.Object,System.Nullable{System.DateTime})">
            <summary>
            日期和时间的指定字符串表示形式转换为其等效的日期,如果失败,返回现在。
            </summary>
            <param name="value">要做处理的字符串。</param>
            <param name="dft">默认时间。</param>
            <returns>日期。</returns>
        </member>
        <member name="F:CorePlus.Core.QC._stringConverter">
            <summary>
            当前使用的字符串转换器。
            </summary>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Collections.IEnumerable)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Collections.IEnumerable,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Data.DataTable,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Data.DataTable)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Data.DataRow)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Data.DataRow,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Array)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Array,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Object)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Object,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Collections.IDictionary)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.String(System.Collections.IDictionary,System.Int32)">
            <summary>
            转为等效的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">最大的等级。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Guid(System.String)">
            <summary>
            将字符串表示全局唯一标示。失败返回默认值。 
            </summary>
            <param name="value">要做处理字符串。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Guid(System.String,System.Guid)">
            <summary>
            将字符串表示全局唯一标示。失败返回默认值。 
            </summary>
            <param name="value">要做处理字符串。</param>
            <param name="dft">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:CorePlus.Core.QC.Ip(System.String)">
            <summary>
            IP地址转长整型。
            </summary>
            <param name="value">输入ip地址 格式127.0.0.1 式。</param>		
            <returns>返回转化成整型后的ip地址,格式不对则返回-1 。</returns>			
        </member>
        <member name="M:CorePlus.Core.QC.Ip(System.Int64)">
            <summary>
            长整型转IP地址。
            </summary>
            <param name="value">输入ip地址的整型格式。</param>		
            <returns>转化成ip地址，格式127.0.0.1 。</returns>			
        </member>
        <member name="M:CorePlus.Core.QC.Url(System.String)">
             <summary>
             转换地址。
             </summary>
             <param name="input">要做处理的字符串。</param>
             <returns>地址。</returns>
             <example><code>
             using System;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string input = QC.Url("www.baidu.com");
                     Console.Write(input);  // 输出   http://www.baidu.com
                 }
             
             }
             </code></example>
        </member>
        <member name="P:CorePlus.Core.QC.StringConverter">
            <summary>
            获取或设置使用的字符串转换器。
            </summary>
        </member>
        <member name="T:CorePlus.Core.Check">
            <summary>
            对数据的合法性进行检查。
            </summary>
        </member>
        <member name="M:CorePlus.Core.Check.IsBlank(System.Object)">
             <summary>
             确定是否是null或空字符串或数组。
             </summary>
             <param name="input">要做判断的变量。</param>
             <returns>如果空返回 true;否则返回 false。</returns>
             <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
             <example><code>
             using CorePlus;
             class Sample {
            
                 public static void Main(){
            			Console.Write(Check.IsBlank(new String[]{}));  // 输出   true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Check.IsBlank(System.String)">
            <summary>
            确定是否是null或空字符串或数组。
            </summary>
            <param name="value">要做判断的变量。</param>
            <returns>如果空返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsInteger(System.String)">
             <summary>
             检测数据是非负整数。
             </summary>
             <param name="value">待检查数据</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger("4");
                     Console.Write(d);  // 输出  true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Check.IsNumber(System.String)">
            <summary>
            验证是否为纯数字的字符串。不论字符串长度，只要每一位都是数字则返回 true 。
            </summary>
            <param name="value">要操作的字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsLetterOrDigit(System.String)">
            <summary>
            检查字符串是否为变量名。
            </summary>
            <param name="str">字符串。 </param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.CheckRequestString(System.String,System.String)">
            <summary>
            检查一个字符串是否含注入语句。
            </summary>
            <param name="param">要操作的字符串。</param>
            <param name="pattern">检测的字符串，多个字符串用|分。</param>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pattern"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Check.CheckRequests">
            <summary>
            综合判段一个请求是否含不安全的内容。
            </summary>
            <returns>如果含注入语句，返回出现的语句 否则 null。</returns>
            <exception cref="T:System.InvalidOperationException"> 不允许运行本函数。</exception>
        </member>
        <member name="M:CorePlus.Core.Check.CheckAndFilter(System.String)">
            <summary>
            检测不合法的提交参数字符串，如果存在则过滤。
            </summary>
            <param name="input">待处理的字符串。</param>
            <returns>返回的字符串。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.CheckPasswordLevel(System.String)">
            <summary>
            检查一个密码的复杂度。
            </summary>
            <param name="psd">密码。</param>
            <returns>数字越大，复杂度越高。 这个数字在 0 - 5 变化。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsChinese(System.String)">
            <summary>
            判断一个字符串是否含中文。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果是中文，则为true。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsId(System.String)">
            <summary>
            检查一个身份证是否为合法。
            </summary>
            <param name="id">身份卡号。</param>
            <returns>如果为合法身份卡返回 true 。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.CheckId(System.String,System.String@,System.DateTime@,System.Boolean@)">
            <summary>
            检查一个身份证是否为合法。
            </summary>
            <param name="id">身份卡号。</param>
            <param name="city">获取的城市。</param>
            <param name="birthday">生日。</param>
            <param name="sex">性别。</param>
            <returns>如果为合法身份卡返回 true 。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsUrl(System.String)">
             <summary>
             判断字符串是否为网址 。
             </summary>
             <param name="value">要做处理的字符串。</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     string a = "http://www.baidu.com";
                     bool value = Text.IsURL(a);
                  Console.Write(value);  // 输出   true
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Check.IsIp(System.String)">
            <summary>
            检测输入字符串是否为IP。
            </summary>
            <param name="input">输入字符串。</param>
            <returns>如果是ip，返回true。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsEmail(System.String)">
            <summary>
            检查是否为电子邮件地址。
            </summary>
            <param name="input">字符串。</param>
            <returns>如果合法返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsGuid(System.String)">
            <summary>
            判断变量是否为标准的 Guid 。
            </summary>
            <param name="value">要操作的字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.InstanceOf(System.Object,System.Object)">
            <summary>
            判断 2 个变量类型是否为继承或相等 。
            </summary>
            <param name="child">肯能是子类的变量。</param>
            <param name="parent">肯能是基类的变量。</param>
            <returns>如果为继承返回 true;否则返回 false。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="child"/> 或 <paramref name="parent"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Core.Check.IsInt(System.String,System.Boolean)">
             <summary>
             检测是否是整数。
             </summary>
             <param name="value">待检查数据。</param>
             <param name="positive">如果true，则负数将判为 false。</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsInteger("-4",true);
                     Console.Write(d);  // 输出  false
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Check.IsDateTime(System.String)">
             <summary>
             判断输入是否为日期类型
             </summary>
             <param name="value">待检查数据</param>
             <returns>如果正确返回 true;否则返回 false。</returns>
             <example><code>
             using System.Array;
             using CorePlus;
             class Sample {
            
                 public static void Main(){
                     bool d = Text.IsDate("2009-01-01");
                     Console.Write(d);  // 输出  true
                     bool d = Text.IsDate("2009-00-02");
                     Console.Write(d);  // 输出  false
                 }
             
             }
             </code></example>
        </member>
        <member name="M:CorePlus.Core.Check.IsDouble(System.String)">
            <summary>
            检查字符串是否为double 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsFloat(System.String)">
            <summary>
            检查字符串是否为float 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsUInt(System.String)">
            <summary>
            检查字符串是否为uint 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsLong(System.String)">
            <summary>
            检查字符串是否为long 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsShort(System.String)">
            <summary>
            检查字符串是否为short 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsByte(System.String)">
            <summary>
            检查字符串是否为byte 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="M:CorePlus.Core.Check.IsBool(System.String)">
            <summary>
            检查字符串是否为bool 。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果正确返回 true;否则返回 false。</returns>
        </member>
        <member name="T:CorePlus.RunTime.EnumHelper">
            <summary>
            提供枚举操作的辅助方法。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.EnumHelper.GetDescription(System.Enum)">
            <summary>
            获取和一个枚举值关联的 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 属性。
            </summary>
            <param name="enumeration">要获取信息的 <see cref="T:System.Enum"/> 对象。</param>
            <returns>一个字符串，由 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 指定的信息。如果不存在对应的 <see cref="T:System.ComponentModel.DescriptionAttribute"/>，则返回 null 。</returns>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2">
            <summary>
            为所有键/值的集合提供基类。适合元素较小的情况。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._comparer">
            <summary>
            表示键比较的比较工具。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._count">
            <summary>
            表示集合中值的个数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._top">
            <summary>
            链接首元素。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._keys">
            <summary>
            所有键的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._siInfo">
            <summary>
            序列号信息的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._values">
            <summary>
            所有值的缓存。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2._version">
            <summary>
            表示当前修改的版本。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.#ctor">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},CorePlus.Core.EqualityComparison{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <param name="comparer">比较器。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.#ctor(CorePlus.Core.EqualityComparison{`0})">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 System.Collections.ObjectModel.TinyDictionary&lt;TKey, TValue&gt; 的新实例。
            </summary>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Add(`0,`1)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnAddExistKey(`0)">
            <summary>
            当添加已存在的一个键时触发。
            </summary>
            <param name="key">键名。</param>
            <exception cref="T:System.ArgumentException">键已存在。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.InsertAt(System.Int32,`0,`1)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 指定位置中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="index">要插入的元素的位置。</param>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Insert(`0,`1,System.Boolean)">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <param name="add">如果为 <c>true</c> 则增加，否则出现同样键出现错误。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>  为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnAddEntry(`0,`1)">
            <summary>
            向当前字典增加单元。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>增加则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Clear">
            <summary>
            从 <see cref="T:System.Collections.Generic.ICollection`1"/> 中移除所有项。
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 为只读。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Remove(`0)">
            <summary>
            从 <see cref="T:Py.Collections.TinyDictionary`2"/> 中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns>
            如果该元素已成功移除，则为 true；否则为 false。 如果在原始 <see cref="T:Py.Collections.TinyDictionary`2"/> 中没有找到 <paramref name="key"/>，该方法也会返回 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnRemoveEntry(`0,`1)">
            <summary>
            将单元移除。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnRemoveAll">
            <summary>
            移除所有单元。
            </summary>
            <returns>移除则返回 true，否则false 。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ContainsKey(`0)">
            <summary>
            确定 <see cref="T:Py.Collections.TinyDictionary`2"/> 是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中定位的键。</param>
            <returns>
            如果 <see cref="T:Py.Collections.TinyDictionary`2"/> 包含带有该键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ContainsValue(`1)">
            <summary>
            确定 <see cref="T:Py.Collections.TinyDictionary`2"/> 是否包含具有指定值的元素。
            </summary>
            <param name="value">The value.</param>
            <returns>
            如果 <see cref="T:Py.Collections.TinyDictionary`2"/> 包含带有该值的元素，则为 true；否则，为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.IsCompatibleKey(System.Object)">
            <summary>
            判断当前键是否可用。
            </summary>
            <param name="key">键。</param>
            <returns>
            可用则true。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            拷贝到一个新的键/值集合。
            </summary>
            <param name="array">数组。</param>
            <param name="index">开始数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.FindEntry(`0)">
            <summary>
            查找指定键的值。
            </summary>
            <param name="key">键。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.FindEntry(System.Predicate{CorePlus.Collections.TinyDictionary{`0,`1}.Entry})">
            <summary>
            查找满足要求的值。
            </summary>
            <param name="predicate">判断值是否满足的条件。</param>
            <returns>值所在位置，找不到 返回 -1。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value"/> 参数的类型的默认值。该参数未经初始化即被传递。</param>
            <returns>
            如果实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象包含具有指定键的元素，则为 true；否则，为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。
            </summary>
            <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext"/>）。</param>
            <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。当前未实现该参数的功能。</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">缺少匹配的集合。 - 或 - 键为空。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.GetEnumerator">
            <summary>
            返回一个 enumerator 。
            </summary>
            <returns>遍历器。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </summary>
            <returns>
            一个用于 <see cref="T:System.Collections.IDictionary"/> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            增加指定键到集合。
            </summary>
            <param name="keyValuePair">键/值集合。</param>
            <exception cref="T:System.ArgumentNullException">
            	键为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定集合是否包含特定值。
            </summary>
            <param name="keyValuePair">要在集合中定位的对象。</param>
            <returns>
            如果在集合中找到 item，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从特定的 System.Array 索引开始，将集合的元素复制到一个 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="index"> array 中从零开始的索引，从此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> 为空。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于 0 或 index 大于 <paramref name="array"/>.Length。</exception>
            <exception cref="T:System.ArgumentException">数组大小不够。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
             从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="keyValuePair">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 item，则为 true；否则为 false。如果在原始集合中没有找到 item，该方法也会返回 false。</returns>
            <exception cref="T:System.ArgumentNullException">
            	key 为 null。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            在 <see cref="T:System.Collections.IDictionary"/> 对象中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的 <see cref="T:System.Object"/>。</param>
            <param name="value">用作要添加的元素的值的 <see cref="T:System.Object"/>。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:System.Collections.IDictionary"/> 对象中已存在具有相同键的元素。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 为只读。- 或 - <see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 <see cref="T:System.Collections.IDictionary"/> 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 <see cref="T:System.Collections.IDictionary"/> 对象中定位的键。</param>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 包含带有该键的元素，则为 true；否则为 false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            从 <see cref="T:System.Collections.IDictionary"/> 对象中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。 </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:System.Collections.IDictionary"/> 对象为只读。- 或 -<see cref="T:System.Collections.IDictionary"/> 具有固定大小。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.OnKeyNotFound(`0)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Count">
            <summary>
            获取 <see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.Generic.ICollection`1"/> 中包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Comparer">
            <summary>
            获取或设置当前的比较器。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.IDictionary"/> 对象是否具有固定大小。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.IDictionary"/> 对象具有固定大小，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 的键的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象的键。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Values">
            <summary>
            获取包含 <see cref="T:Py.Collections.TinyDictionary`2"/> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1"/>。
            </summary>
            <value></value>
            <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1"/>，它包含实现 <see cref="T:Py.Collections.TinyDictionary`2"/> 的对象中的值。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.FirstEntry">
            <summary>
            获取当前的第一个单元。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Version">
            <summary>
            获取当前的字典版本。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.Entry">
            <summary>
            表示字典单元。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Entry.Next">
            <summary>
            下一个索引。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Entry.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Entry.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.Enumerator">
            <summary>
            当前集合的枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Enumerator._dictionary">
            <summary>
            对应的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Enumerator._version">
            <summary>
            初始化的修改记录。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Enumerator._current">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.Enumerator._getEnumeratorDictEntry">
            <summary>
            返回的枚举类型。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Enumerator.#ctor(CorePlus.Collections.TinyDictionary{`0,`1},System.Boolean)">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.Enumerator 的新实例。
            </summary>
            <param name="dictionary">字典。</param>
            <param name="getEnumeratorRetType">枚举的相对方式。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            获取键值集合。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.Key">
            <summary>
            获取当前键。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.Value">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
            <summary>
            获取当前键。
            </summary>
            <value>键。</value>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
            <summary>
            获取当前值。
            </summary>
            <value>值。</value>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.KeyCollection">
            <summary>
            表示一个键的集合。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.KeyCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.#ctor(CorePlus.Collections.TinyDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TKey, TValue&gt;.KeyCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <value></value>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <value></value>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator._current">
            <summary>
            当前位置。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.#ctor(CorePlus.Collections.TinyDictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.ValueCollection">
            <summary>
            表示一个值的集合。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.ValueCollection._dictionary">
            <summary>
            当前使用的字典。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.#ctor(CorePlus.Collections.TinyDictionary{`0,`1})">
            <summary>
            初始化 System.Collections.ObjectModel.Dictionary&lt;TValue, TValue&gt;.ValueCollection 的新实例。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 -<paramref name="index"/> 小于零。</exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns>获取迭代器。</returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
            <summary>
            将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的结尾处。
            </summary>
            <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 结尾处的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
            <summary>
            从 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中移除所有元素。
            </summary>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
            <summary>
            确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中。
            </summary>
            <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns>
            如果在 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中找到 <paramref name="item"/>，则为 true；否则为 false。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
            <summary>
            删除集合中的项。
            </summary>
            <param name="item">项。</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">集合不支持该操作。</exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的枚举数。
            </summary>
            <returns>
            用于 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。
            </summary>
            <param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param>
            <param name="index"><paramref name="array"/> 中从零开始的索引，在此处开始复制。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> 为 null。 </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> 小于零。 </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> 是多维的。- 或 - <paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。- 或 - 源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。 </exception>
            <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.Count">
            <summary>
            获取 <see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。
            </summary>
            <returns>
            	<see cref="T:System.Collections.ObjectModel.Collection`1"/> 中实际包含的元素数。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。
            </summary>
            <returns>
            如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。
            </summary>
            <value></value>
            <returns>
            如果对 <see cref="T:System.Collections.ICollection"/> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 <see cref="T:System.Collections.ICollection"/> 访问的对象。
            </summary>
            <value></value>
            <returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。</returns>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator">
            <summary>
            枚举。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator._dictionary">
            <summary>
            当前操作的字典。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator._version">
            <summary>
            当前修改次数。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator._current">
            <summary>
            当前值。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.#ctor(CorePlus.Collections.TinyDictionary{`0,`1})">
            <summary>
            当前枚举值。
            </summary>
            <param name="dictionary">集合。</param>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            </summary>
            <returns>
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </returns>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
            <exception cref="T:System.InvalidOperationException">在创建了枚举数后集合被修改了。 </exception>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            获取当前值。
            </summary>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前值。
            </summary>
            <exception cref="T:System.InvalidOperationException">索引值超过大小。</exception>
        </member>
        <member name="T:CorePlus.Collections.TinyDictionary`2.DebugView">
            <summary>
            用于调试时列表显示的视图项。
            </summary>
        </member>
        <member name="F:CorePlus.Collections.TinyDictionary`2.DebugView._tinyDictionary">
            <summary>
            当前含的集合。
            </summary>
        </member>
        <member name="M:CorePlus.Collections.TinyDictionary`2.DebugView.#ctor(CorePlus.Collections.TinyDictionary{`0,`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.TinyDictionary`2.DebugView"/> 的新实例。
            </summary>
            <param name="tinyDictionary">集合。</param>
        </member>
        <member name="P:CorePlus.Collections.TinyDictionary`2.DebugView.Items">
            <summary>
            获取当前的项目。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.OwnedCollection`2">
            <summary>
            为泛型集合提供基类。
            </summary>
            <typeparam name="TOwner">所有者。</typeparam>
            <typeparam name="T">元素类型。</typeparam>
        </member>
        <member name="M:CorePlus.Collections.OwnedCollection`2.#ctor(`0)">
            <summary>
            初始化空的 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedCollection`2.#ctor(`0,System.Int32)">
            <summary>
            初始化指定大小的 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedCollection`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.EntryCollection`2"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="collection">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.OwnedCollection`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            将 <see cref="T:CorePlus.Collections.EntryCollection`2"/>初始化为类的新实例初始化为指定列表的包装。
            </summary>
            <param name="owner">所有者。</param>
            <param name="list">可枚举的列表，如数组，集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> 为空。</exception>
        </member>
        <member name="P:CorePlus.Collections.OwnedCollection`2.Owner">
            <summary>
            获取或设置当前的所有者。
            </summary>
        </member>
        <member name="T:CorePlus.Text.TextFileBase">
            <summary>
            为所有以文本方式支持单一文件操作的类提供抽象基类。
            </summary>
        </member>
        <member name="M:CorePlus.Text.TextFileBase.#ctor(System.Text.Encoding)">
            <summary>
            初始化 <see cref="T:CorePlus.Text.TextFileBase"/> 类的新实例。
            </summary>
            <param name="encoding">要使用的字符编码。</param>
        </member>
        <member name="M:CorePlus.Text.TextFileBase.#ctor(System.String,System.IO.FileMode,System.Text.Encoding)">
            <summary>
            使用指定的路径、 <see cref="T:System.IO.FileMode"/> 和 <see cref="P:CorePlus.Text.TextFileBase.Encoding"/> 初始化 <see cref="T:CorePlus.Text.TextFileBase"/> 类的新实例。
            </summary>
            <param name="path">要操作的文件路径地址。</param>
            <param name="mode">文件打开的方式。</param>
            <param name="encoding">要使用的字符编码。</param>
        </member>
        <member name="M:CorePlus.Text.TextFileBase.Create(System.String,System.Text.Encoding)">
            <summary>
            创建一个新文件。
            </summary>
            <param name="path">保存的文件名。</param>
            <param name="encoding">文件的编码。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Text.TextFileBase.Open(System.String,System.Text.Encoding)">
            <summary>
            载入指定的文件。
            </summary>
            <param name="path">文件名。</param>
            <param name="encoding">文件的编码。</param>
            <exception cref="T:System.IO.FileNotFoundException">载入的文件不存在。</exception>
        </member>
        <member name="P:CorePlus.Text.TextFileBase.Encoding">
            <summary>
            获取当前文档使用的编码。
            </summary>
        </member>
        <member name="T:CorePlus.Text.StringConverter">
            <summary>
            表示一个将常用类型转为字符串形式的工具。
            </summary>
        </member>
        <member name="M:CorePlus.Text.StringConverter.#ctor">
            <summary>
            初始化 <see cref="T:CorePlus.Text.StringConverter"/> 的新实例。
            </summary>
        </member>
        <member name="M:CorePlus.Text.StringConverter.Add``1(System.Func{``0,System.String})">
            <summary>
            注册一个类型的转换器。
            </summary>
            <param name="action">转换工具。</param>
        </member>
        <member name="M:CorePlus.Text.StringConverter.Add(System.Type,System.Func{System.Object,System.String})">
            <summary>
            在 <see cref="T:Py.Collections.TinyDictionary`2"/> 中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> 为 null。</exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 中已存在具有相同键的元素。</exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:Py.Collections.TinyDictionary`2"/> 为只读。</exception>
        </member>
        <member name="M:CorePlus.Text.StringConverter.OnKeyNotFound(System.Type)">
            <summary>
            当键没找到后，执行此函数。
            </summary>
            <param name="key">键。</param>
            <returns>值。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键没找到。</exception>
        </member>
        <member name="M:CorePlus.Text.StringConverter.DefaultConverter(System.Object)">
            <summary>
            默认的字符串比较器。
            </summary>
            <param name="t">对象。</param>
            <returns>字符串。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.Dfs(System.Int32,System.Int32[],System.Int32,System.Array,System.Int32[],System.Text.StringBuilder,System.Int32)">
            <summary>
            内部转换。
            </summary>
            <param name="p">位置。</param>
            <param name="k">数组。</param>
            <param name="count">个数。</param>
            <param name="value">值。</param>
            <param name="s">数组。</param>
            <param name="c">字符串。</param>
            <param name="maxLevel"></param>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Object)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Collections.IEnumerable)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataTable)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dt">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataSet)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="ds">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataRow)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dr">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Array)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Object,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.String)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dt">值。</param>
            <param name="maxDeep">转换的等级。</param>
            <param name="size">列的宽度。</param>
            <param name="header">如果 true ，则添加行首。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataSet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="ds">值。</param>
            <param name="maxDeep">转换的等级。</param>
            <param name="size">列的宽度。</param>
            <param name="header">如果 true ，则添加行首。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Array,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Data.DataRow,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="dr">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Collections.IEnumerable,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Collections.IDictionary,System.Int32)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.DBNull)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Exception)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.ToString(System.Collections.IDictionary)">
            <summary>
            返回表示值的字符串。
            </summary>
            <param name="value">值。</param>
            <returns>字符串。表示当前的值。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.Dir(System.Object)">
            <summary>
            遍历指定的对象。
            </summary>
            <param name="obj">对象。</param>
            <returns>转换字符串。</returns>
        </member>
        <member name="M:CorePlus.Text.StringConverter.Dir(System.Object,System.Int32)">
            <summary>
            遍历指定的对象。
            </summary>
            <param name="obj">对象。</param>
            <param name="maxLevel">转换的等级。</param>
            <returns>转换字符串。</returns>
        </member>
        <member name="P:CorePlus.Text.StringConverter.IndentLevel">
            <summary>
            获取或设置当前的缩进等级。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.IndentString">
            <summary>
            获取缩进的字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.MaxDeep">
            <summary>
            获取当前默认的显示的最大等级。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.IndentChars">
            <summary>
            表示当前的缩进符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.Null">
            <summary>
            表示空。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.ArrayStart">
            <summary>
            表示数组开始。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.ArrayEnd">
            <summary>
            表示数组结尾。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.ArraySeparator">
            <summary>
            表示数组分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.EnumerableStart">
            <summary>
            表示枚举开始。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.EnumerableEnd">
            <summary>
            表示枚举结尾。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.EnumerableSeparator">
            <summary>
            表示枚举分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DictionaryAssgin">
            <summary>
            表示字典赋值。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DictionaryStart">
            <summary>
            表示字典开始。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DictionarySeparator">
            <summary>
            表示字典分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DictionaryEnd">
            <summary>
            表示字典结尾。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.RowStart">
            <summary>
            表示行开始。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.RowEnd">
            <summary>
            表示行结尾。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.RowSeperator">
            <summary>
            表示行分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DataTableStart">
            <summary>
            表示数据表开始。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DataTableSeperator">
            <summary>
            表示数据表分隔符。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DataTableEnd">
            <summary>
            表示数据表结尾。
            </summary>
        </member>
        <member name="P:CorePlus.Text.StringConverter.DirAssgin">
            <summary>
            表示遍历对象的分隔字符串。
            </summary>
        </member>
        <member name="T:CorePlus.Core.Properties.Messages">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.ArrayTypeMismatchException">
            <summary>
              查找类似 非法数组类型。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.CountOutOfRange">
            <summary>
              查找类似 count 大于从开始索引到目标列表结尾处之间的可用空间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.DictionaryKeyExist">
            <summary>
              查找类似 当前key已经存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.DictionaryNonZeroLowerBound">
            <summary>
              查找类似 不支持从非 0 开始的数组。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.DictionaryNotSupport">
            <summary>
              查找类似 不支持该操作。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.DictionaryRankMultiDimNotSupported">
            <summary>
              查找类似 不支持转换多维数组。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.EndOutOfRange">
            <summary>
              查找类似 end 小于 start 或 end 超过了列表长度。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.EnumFailedVersion">
            <summary>
              查找类似 当前对象在迭代时被修改。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FileExists">
            <summary>
              查找类似 文件或文件夹已存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FileExistsWithName">
            <summary>
              查找类似 文件 {0} 已经存在,不能覆盖。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FileHelperCopyedFileName">
            <summary>
              查找类似 副本 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FileHelperCopyToChildFolder">
            <summary>
              查找类似 无法复制到子目录。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FileNotFoundWithName">
            <summary>
              查找类似 未找到文件 {0} 。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FilePathIsEmpty">
            <summary>
              查找类似 保存操作失败，因为从没有指定过保存的目标地址。在没有使用 Create(String) 创建过文件时，应该调用 Save(String) 重载。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.FolderExistsWithName">
            <summary>
              查找类似 文件夹 {0} 已经存在,不能覆盖。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.IndexOutOfRange">
            <summary>
              查找类似 索引值超过大小。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.InvalidCheckRequest">
            <summary>
              查找类似 当前情况不适合调用此函数，请确认程序在 asp.net 运行。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.InvalidOperationEnumOpCantHappen">
            <summary>
              查找类似 当前位置不对。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.MinValueGreaterThanMaxValue">
            <summary>
              查找类似 最小值必须不大于最大值。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.OffsetOutOfRange">
            <summary>
              查找类似 offset 和 count 的和大于总长度。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.PositionOutOfRange">
            <summary>
              查找类似 position 必须大于 0 。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.SerializationMissingKeyValuePairs">
            <summary>
              查找类似 缺少匹配的集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.SerializationNullKey">
            <summary>
              查找类似 键为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.StreamCanNotWritten">
            <summary>
              查找类似 输出流必须可写。 的本地化字符串。
            </summary>
        </member>
        <member name="P:CorePlus.Core.Properties.Messages.StringIsEmpty">
            <summary>
              查找类似 {0} 不能为 String.Empty 。 的本地化字符串。
            </summary>
        </member>
        <member name="T:CorePlus.Core.OverwriteType">
            <summary>
            指示文件或目录强制覆盖的行为。
            </summary>
        </member>
        <member name="F:CorePlus.Core.OverwriteType.Default">
            <summary>
            默认。不检查文件或目录是否存在，覆盖的行为由系统决定。
            </summary>
        </member>
        <member name="F:CorePlus.Core.OverwriteType.Replace">
            <summary>
            替换操作。合并已有的目录，替换已存在的文件。
            </summary>
        </member>
        <member name="F:CorePlus.Core.OverwriteType.Skip">
            <summary>
            取消覆盖操作。保留已有的目录和文件。
            </summary>
        </member>
        <member name="F:CorePlus.Core.OverwriteType.Rename">
            <summary>
            重命名要复制的文件和目录。
            </summary>
        </member>
        <member name="F:CorePlus.Core.OverwriteType.Throw">
            <summary>
            引发一个 <see cref="T:CorePlus.IO.FileExistsException"/> 的异常。
            </summary>
        </member>
        <member name="T:CorePlus.Core.CancelableEventArgs">
            <summary>
            可取消的事件的参数。
            </summary>
        </member>
        <member name="P:CorePlus.Core.CancelableEventArgs.Cancel">
            <summary>
            获取或设置一个值,该值指示是否撤销事件。
            </summary>
        </member>
        <member name="T:CorePlus.Core.ValueChangedEventArgs`1">
            <summary>
            表示一个值改变造成的事件参数。
            </summary>
            <typeparam name="T">类型。</typeparam>
        </member>
        <member name="F:CorePlus.Core.ValueChangedEventArgs`1._from">
            <summary>
            初始值。
            </summary>
        </member>
        <member name="F:CorePlus.Core.ValueChangedEventArgs`1._to">
            <summary>
            变化值。
            </summary>
        </member>
        <member name="M:CorePlus.Core.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            初始化 <see cref="T:CorePlus.Core.ValueChangedEventArgs`1"/> 的新实例。
            </summary>
            <param name="from">初始值。</param>
            <param name="to">变化值。</param>
        </member>
        <member name="P:CorePlus.Core.ValueChangedEventArgs`1.From">
            <summary>
            获取初始的值。
            </summary>
        </member>
        <member name="P:CorePlus.Core.ValueChangedEventArgs`1.To">
            <summary>
            获取变化后的值。
            </summary>
        </member>
        <member name="T:CorePlus.Collections.OwnedDictionary`3">
            <summary>
            为所有键/值的集合提供基类。
            </summary>
            <typeparam name="TOwner">所有者。</typeparam>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0)">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Int32)">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">大小。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IDictionary{`1,`2})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="dictionary">集合。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Collections.Generic.IDictionary{`1,`2},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="dictionary">集合。</param>
            <param name="comparer">键比较的比较工具。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> 为空。</exception>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="capacity">初始化容器的大小。</param>
            <param name="comparer">键比较的比较工具。</param>
        </member>
        <member name="M:CorePlus.Collections.OwnedDictionary`3.#ctor(`0,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化 <see cref="T:CorePlus.Collections.OwnedDictionary`3"/> 的新实例。
            </summary>
            <param name="owner">所有者。</param>
            <param name="info">信息。</param>
            <param name="context">内容。</param>
        </member>
        <member name="P:CorePlus.Collections.OwnedDictionary`3.Owner">
            <summary>
            获取或设置当前的所有者。
            </summary>
        </member>
        <member name="T:CorePlus.RunTime.ReflectionHelper">
            <summary>
            反射帮助类。
            </summary>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetReflectionField(System.Object@,System.String)">
            <summary>
            获取反射对象的字段值。
            </summary>
            <param name="fieldName">要返回的字段名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回对象的字段值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetReflectionProperty(System.Object@,System.String)">
            <summary>
            获取反射对象的属性值。
            </summary>
            <param name="propertyName">要返回的属性名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>得到的值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetReflectionPropertyValue(System.Object@,System.String)">
            <summary>
            获取反射对象的属性值。
            </summary>
            <param name="propertyName">要返回的属性名称。</param>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>得到的值。</returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法返回类型。</exception>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.SetPropertyValue(System.Object@,System.Reflection.PropertyInfo@,System.Object)">
            <summary>
            设置反射对象的属性值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="pi">属性。</param>
            <param name="propertyValue">属性值。</param>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.SetFieldValue(System.Object@,System.Reflection.FieldInfo@,System.Object)">
            <summary>
            设置反射对象的字段值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="field">字段[变量/域]。</param>
            <param name="fieldValue">字段值。</param>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.SetPropertyValue(System.Object@,System.String,System.Object)">
            <summary>
            设置反射对象的属性值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="propertyName">属性名。</param>
            <param name="propertyValue">属性值。</param>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.SetFieldValue(System.Object@,System.String,System.Object)">
            <summary>
            设置反射对象的字段值。
            </summary>
            <param name="reflectionObj">反射的对象(引用)。</param>
            <param name="fieldn">字段名[变量/域]。</param>
            <param name="fieldValue">字段值。</param>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectFieldInfo(System.Object@,System.String)">
            <summary>
            获取反射对象的域[变量]。
            </summary>
            <param name="reflectionObj">反射的对象。</param>
            <param name="fieldName">域名。</param>
            <returns>字段信息。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectPropertyInfo(System.Object@,System.String)">
            <summary>
            获取反射对象的域。
            </summary>
            <param name="reflectionObj">反射的对象。</param>
            <param name="propertyName">域名。</param>
            <returns>字段信息。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectPropertyInfoList(System.Object@)">
            <summary>
            获取反射对象的所有属性。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回为public 声明的所有属性。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectPropertyInfoList(System.Object@,System.Reflection.BindingFlags)">
            <summary>
            获取反射对象的所有属性。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <param name="flagArgs">绑定标记。</param>
            <returns>
            返回根据flagArgs指定范围的所有属性，默认为所有public声明的所有属性。
            </returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectFieldInfoList(System.Object@)">
            <summary>
            获取反射对象的所有字段。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <returns>返回为public 声明的所有字段。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.GetObjectFieldInfoList(System.Object@,System.Reflection.BindingFlags)">
            <summary>
            获取反射对象的所有字段。
            </summary>
            <param name="reflectionObj">待反射的对象。</param>
            <param name="flagArgs">绑定的标记。</param>
            <returns>
            返回根据flagArgs指定范围的所有字段，默认为所有public声明的所有字段。
            </returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.CreateInstance(System.String,System.String)">
            <summary>
            动态创建对象。
            </summary>
            <param name="assemblyName">创建对象的程序集名称。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.TryCreateInstance(System.String,System.String,System.Object@)">
            <summary>
            动态创建对象。
            </summary>
            <param name="assemblyName">创建对象的程序集名称。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <param name="value">值。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.CreateInstanceFormDll(System.String,System.String)">
            <summary>
            动态创建对象。
            </summary>
            <param name="path">创建对象的程序集文件。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <returns>对象。</returns>
        </member>
        <member name="M:CorePlus.RunTime.ReflectionHelper.TryCreateInstanceFormDll(System.String,System.String,System.Object@)">
            <summary>
            动态创建对象。
            </summary>
            <param name="path">创建对象的程序集文件。</param>
            <param name="ojbFullName">对象的全名。包括命名空间。</param>
            <param name="value">值。</param>
            <returns>对象。</returns>
        </member>
        <member name="T:CorePlus.IO.StreamHelper">
            <summary>
            流操作的工具。
            </summary>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.ReadInt(System.IO.Stream)">
            <summary>
            读取一个整数。
            </summary>
            <param name="s">流。</param>
            <exception cref="T:System.IO.EndOfStreamException">无数据。</exception>
            <returns>整数。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.DetectEncoding(System.IO.Stream)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="s">缓存。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.DetectEncoding(System.Byte[])">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="buffer">缓存。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.DetectEncoding(System.IO.Stream,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="s">缓存。</param>
            <param name="numBom">输出的标志头大小。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.DetectEncoding(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            根据一个字节缓存判断字符编码。如果不能判断返回 null 。
            </summary>
            <param name="buffer">缓存。</param>
            <param name="len">缓存大小。</param>
            <param name="numBom">输出的标志头大小。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.InitStream(System.IO.Stream)">
            <summary>
            初始化一个流，同时返回编码。
            </summary>
            <param name="s">流。</param>
            <returns>编码。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="buffer">缓存数组。</param>
            <returns>如果是 utf8 返回true。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.Write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            将一个 Int32 整数写入到一个字节数组。
            </summary>
            <param name="value">数据。</param>
            <param name="buffer">缓存。</param>
            <param name="offset">位置。</param>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.Write(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            读取流，写入到另一个流。
            </summary>
            <param name="source">源。</param>
            <param name="index">位置。</param>
            <param name="dest">目标。</param>
            <param name="destIndex">目标位置。</param>
            <param name="count">数目。</param>
            <param name="dftBufferSize">缓存大小。</param>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.Write(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            读取流，写入到另一个流。
            </summary>
            <param name="source">源。</param>
            <param name="dest">目标。</param>
            <param name="dftBufferSize">缓存大小。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 或 <paramref name="dest"/> 等于 null 。</exception>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.GetStream(System.String)">
            <summary>
            根据地址返回流。
            </summary>
            <param name="uri">地址。</param>
            <returns>流。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.GetStream(System.Uri)">
            <summary>
            根据地址返回流。
            </summary>
            <param name="uri">地址。</param>
            <returns>流。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.GetStream(System.Uri,System.String,System.Int32)">
            <summary>
            下载指定地址的文件，并返回打开的文件流。
            </summary>
            <param name="uri">地址。</param>
            <param name="folder">缓存文件夹。</param>
            <param name="dftBufferSize">读取缓存。</param>
            <returns>流。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.ReadAllText(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读取一个流所有数据。并返回相关字符串内容。
            </summary>
            <param name="s">流。</param>
            <param name="encoding">要使用的字符编码。</param>
            <returns>一个字符串。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.ReadAllText(System.IO.Stream)">
            <summary>
            读取一个流所有数据。并返回相关字符串内容。
            </summary>
            <param name="s">要读取的流。</param>
            <returns>一个字符串。包含流的全部数据。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.ReadAllBytes(System.IO.Stream)">
            <summary>
            读取一个流所有数据。并返回相关字节数组。
            </summary>
            <param name="s">要读取的流。</param>
            <returns>一个字节数组。包含流的全部数据。</returns>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.WriteFrom(System.IO.Stream,System.String,System.Int32)">
            <summary>
            读取一个文件，并写入流。
            </summary>
            <param name="dest">目标流。</param>
            <param name="source">来源文件。</param>
            <param name="dftBufferSize">缓存的大小。</param>
        </member>
        <member name="M:CorePlus.IO.StreamHelper.Save(System.IO.Stream,System.String)">
            <summary>
            将指定的流保存到指定的文件。
            </summary>
            <param name="stream">要保存的 <see cref="T:System.IO.Stream"/> 。</param>
            <param name="path">保存的路径。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> 等于 null 。</exception>
        </member>
        <member name="T:CorePlus.Text.Regexs">
            <summary>
            提供常用的正则表达式。
            </summary> 
        </member>
        <member name="F:CorePlus.Text.Regexs.Number">
            <summary>
            正则常量。匹配零和非零开头的数字。
            </summary> 
        </member>
        <member name="F:CorePlus.Text.Regexs.Decimal">
            <summary>
            正则常量。匹配十进制数字。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Integer">
            <summary>
            正则常量。匹配整数。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Hex">
            <summary>
            正则常量。匹配十六进制数字。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Letter">
            <summary>
            正则常量。匹配字母。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Int">
            <summary>
            正则常量。匹配正整数或零
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.UserName">
            <summary>
            正则常量。匹配英文用户名。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Password6">
            <summary>
            正则常量。匹配密码。  长度在6~18之间  以字母开头，只能包含字符、数字和下划线。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Value">
            <summary>
            正则常量。匹配含有^%&apos;,;=?$\"等字符。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Email">
            <summary>
            正则常量。匹配正确的Email地址。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Url">
            <summary>
            正则常量。匹配网络地址。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Month">
            <summary>
            正则常量。匹配一年的12个月   正确格式为："01"～"09"和"1"～"12"。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Base64String">
            <summary>
            base64字符串。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.HtmlNode">
            <summary>
            匹配HTML标记的正则表达式。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Trim">
            <summary>
            匹配首尾空白字符的正则表达式。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Ip">
            <summary>
            正则常量。匹配IP。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Date">
            <summary>
            正则常量。匹配一个月的31天   正确格式为："01"～"09"和"1"～"31"。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Any">
            <summary>
            正则常量。匹配所有表达式。
            </summary>
        </member>
        <member name="T:CorePlus.Text.Regexs.Chinese">
            <summary>
            和美国相关的特定正则表达式。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.IsChinese">
            <summary>
            正则常量。匹配全汉字。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.ID">
            <summary>
            正则常量。匹配身份证号(15位或18位数字)。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.NoChinese">
            <summary>
            正则常量。匹配不含汉字。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.TelePhone">
            <summary>
            正则常量。匹配电话号码， 正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX" 。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.Zipcode">
            <summary>
            匹配邮政编码。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.Mobile">
            <summary>
            匹配手机号。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.Chinese.QQ">
            <summary>
            匹配QQ。
            </summary>
        </member>
        <member name="T:CorePlus.Text.Regexs.America">
            <summary>
            和美国相关的特定正则表达式。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.America.ZipCode">
            <summary>
            匹配邮政编码的正则表达式。
            </summary>
        </member>
        <member name="F:CorePlus.Text.Regexs.America.Phone">
            <summary>
            匹配电话号码的正则表达式。
            </summary>
        </member>
        <member name="T:CorePlus.Core.ForEachAction`1">
            <summary>
            用于 ForEach 的参数。
            </summary>
            <param name="value">值。</param>
            <param name="index">表示循环次数的索引。</param>
            <returns>继续执行返回true，否则false。</returns>
        </member>
        <member name="T:CorePlus.Core.EqualityComparison`1">
            <summary>
            表示比较同一类型的两个对象的方法。
            </summary>
            <typeparam name="T">要比较的对象的类型。</typeparam>
            <param name="x"> 要比较的第一个对象。</param>
            <param name="y">要比较的第二个对象。</param>
            <returns>如果 <paramref name="x"/> 和 <paramref name="y"/> 相同，返回 true， 否则返回 false。</returns>
        </member>
        <member name="T:CorePlus.Core.ValueChangedEventHandler`1">
            <summary>
            值改变的委托。
            </summary>
            <typeparam name="T">类型。</typeparam>
            <param name="sender">事件发生者。</param>
            <param name="e">事件参数。</param>
        </member>
    </members>
</doc>
